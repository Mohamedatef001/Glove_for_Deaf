
Project_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003732  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006c  00800060  00003732  000037c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  008000cc  008000cc  00003832  2**0
                  ALLOC
  3 .stab         00003480  00000000  00000000  00003834  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002261  00000000  00000000  00006cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008f15  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009055  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000091c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000ae0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000bcf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000caa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000cc08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ce95  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d663  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 ff 08 	jmp	0x11fe	; 0x11fe <__vector_10>
      2c:	0c 94 96 08 	jmp	0x112c	; 0x112c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e3       	ldi	r30, 0x32	; 50
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3c       	cpi	r26, 0xCC	; 204
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac ec       	ldi	r26, 0xCC	; 204
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3e       	cpi	r26, 0xEC	; 236
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <main>
      8a:	0c 94 97 1b 	jmp	0x372e	; 0x372e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 50 1b 	jmp	0x36a0	; 0x36a0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac ea       	ldi	r26, 0xAC	; 172
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6c 1b 	jmp	0x36d8	; 0x36d8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 50 1b 	jmp	0x36a0	; 0x36a0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c ea       	ldi	r24, 0xAC	; 172
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6c 1b 	jmp	0x36d8	; 0x36d8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 60 1b 	jmp	0x36c0	; 0x36c0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 7c 1b 	jmp	0x36f8	; 0x36f8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MASTER_SEND_ADDRESS_WRITE>:
#include "TWI_Types.h"
#include "TWI_cfg.h"
#include "TWI_init.h"

void MASTER_SEND_ADDRESS_WRITE(u8 adress)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	89 83       	std	Y+1, r24	; 0x01

	if(adress<128)
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	88 23       	and	r24, r24
     b56:	fc f0       	brlt	.+62     	; 0xb96 <MASTER_SEND_ADDRESS_WRITE+0x50>
	{
		//WRITE ADDRESS IN REG TWAR
		TWDR=adress<<1;
     b58:	e3 e2       	ldi	r30, 0x23	; 35
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	88 0f       	add	r24, r24
     b60:	80 83       	st	Z, r24
		// CLEAR BIT 0 TO WTITE
		CLR_BIT(TWDR,0);
     b62:	a3 e2       	ldi	r26, 0x23	; 35
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e3 e2       	ldi	r30, 0x23	; 35
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	80 81       	ld	r24, Z
     b6c:	8e 7f       	andi	r24, 0xFE	; 254
     b6e:	8c 93       	st	X, r24
		// CLEAR START BIT
		CLR_BIT(TWCR,TWSTA);
     b70:	a6 e5       	ldi	r26, 0x56	; 86
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	e6 e5       	ldi	r30, 0x56	; 86
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	80 81       	ld	r24, Z
     b7a:	8f 7d       	andi	r24, 0xDF	; 223
     b7c:	8c 93       	st	X, r24
		//CLEAR FLAG  The TWINT Flag must be cleared by software by writing a logic one
		SET_BIT(TWCR,TWINT);
     b7e:	a6 e5       	ldi	r26, 0x56	; 86
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	e6 e5       	ldi	r30, 0x56	; 86
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	80 81       	ld	r24, Z
     b88:	80 68       	ori	r24, 0x80	; 128
     b8a:	8c 93       	st	X, r24
		//BUSY W8 OF FLAG
		while(!GET_BIT(TWCR,TWINT));
     b8c:	e6 e5       	ldi	r30, 0x56	; 86
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	88 23       	and	r24, r24
     b94:	dc f7       	brge	.-10     	; 0xb8c <MASTER_SEND_ADDRESS_WRITE+0x46>
		//check in status code
		//while(STATUSE_CODE != ADDRESS_W_transmitted);


	}
}
     b96:	0f 90       	pop	r0
     b98:	cf 91       	pop	r28
     b9a:	df 91       	pop	r29
     b9c:	08 95       	ret

00000b9e <MASTER_SEND_DATA>:
void MASTER_SEND_DATA             (u8 data)
{
     b9e:	df 93       	push	r29
     ba0:	cf 93       	push	r28
     ba2:	0f 92       	push	r0
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	89 83       	std	Y+1, r24	; 0x01
	TWDR=data;
     baa:	e3 e2       	ldi	r30, 0x23	; 35
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	89 81       	ldd	r24, Y+1	; 0x01
     bb0:	80 83       	st	Z, r24

	//CLEAR FLAG  The TWINT Flag must be cleared by software by writing a logic one
	SET_BIT(TWCR,TWINT);
     bb2:	a6 e5       	ldi	r26, 0x56	; 86
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	e6 e5       	ldi	r30, 0x56	; 86
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	80 68       	ori	r24, 0x80	; 128
     bbe:	8c 93       	st	X, r24

	//BUSY W8 OF FLAG
	while(!GET_BIT(TWCR,TWINT));
     bc0:	e6 e5       	ldi	r30, 0x56	; 86
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	88 23       	and	r24, r24
     bc8:	dc f7       	brge	.-10     	; 0xbc0 <MASTER_SEND_DATA+0x22>
	//check in status code
	//while(STATUSE_CODE != DATA_TRASMIT_WITH_ACK);

}
     bca:	0f 90       	pop	r0
     bcc:	cf 91       	pop	r28
     bce:	df 91       	pop	r29
     bd0:	08 95       	ret

00000bd2 <vMASTER_REP_START_condition>:
void vMASTER_REP_START_condition  (void)
{
     bd2:	df 93       	push	r29
     bd4:	cf 93       	push	r28
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
	//SET START BIT CONDITION
	SET_BIT(TWCR,TWSTA);
     bda:	a6 e5       	ldi	r26, 0x56	; 86
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e6 e5       	ldi	r30, 0x56	; 86
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	80 62       	ori	r24, 0x20	; 32
     be6:	8c 93       	st	X, r24

	//CLEAR FLAG  The TWINT Flag must be cleared by software by writing a logic one
	SET_BIT(TWCR,TWINT);
     be8:	a6 e5       	ldi	r26, 0x56	; 86
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	e6 e5       	ldi	r30, 0x56	; 86
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	80 68       	ori	r24, 0x80	; 128
     bf4:	8c 93       	st	X, r24
	//BUSY W8 OF FLAG
	while(!GET_BIT(TWCR,TWINT));
     bf6:	e6 e5       	ldi	r30, 0x56	; 86
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	88 23       	and	r24, r24
     bfe:	dc f7       	brge	.-10     	; 0xbf6 <vMASTER_REP_START_condition+0x24>
	//check in status code
	//while(STATUSE_CODE != repSTART_condition_transmitted);
}
     c00:	cf 91       	pop	r28
     c02:	df 91       	pop	r29
     c04:	08 95       	ret

00000c06 <MASTER_SEND_ADDRESS_READ>:
void MASTER_SEND_ADDRESS_READ     (u8 adress)
{
     c06:	df 93       	push	r29
     c08:	cf 93       	push	r28
     c0a:	0f 92       	push	r0
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62
     c10:	89 83       	std	Y+1, r24	; 0x01

	if(adress<128)
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	88 23       	and	r24, r24
     c16:	fc f0       	brlt	.+62     	; 0xc56 <MASTER_SEND_ADDRESS_READ+0x50>
	{
		//WRITE ADDRESS IN REG TWAR
		TWDR=adress<<1;
     c18:	e3 e2       	ldi	r30, 0x23	; 35
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	89 81       	ldd	r24, Y+1	; 0x01
     c1e:	88 0f       	add	r24, r24
     c20:	80 83       	st	Z, r24
		// SET BIT 0 TO READ  -> SALVE TRASMIT
		SET_BIT(TWDR,TWGCE);
     c22:	a3 e2       	ldi	r26, 0x23	; 35
     c24:	b0 e0       	ldi	r27, 0x00	; 0
     c26:	e3 e2       	ldi	r30, 0x23	; 35
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	81 60       	ori	r24, 0x01	; 1
     c2e:	8c 93       	st	X, r24
		// CLEAR START BIT
		CLR_BIT(TWCR,TWSTA);
     c30:	a6 e5       	ldi	r26, 0x56	; 86
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	e6 e5       	ldi	r30, 0x56	; 86
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	8f 7d       	andi	r24, 0xDF	; 223
     c3c:	8c 93       	st	X, r24

		//CLEAR FLAG  The TWINT Flag must be cleared by software by writing a logic one
		SET_BIT(TWCR,TWINT);
     c3e:	a6 e5       	ldi	r26, 0x56	; 86
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	e6 e5       	ldi	r30, 0x56	; 86
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	80 81       	ld	r24, Z
     c48:	80 68       	ori	r24, 0x80	; 128
     c4a:	8c 93       	st	X, r24
		//BUSY W8 OF FLAG
		while(!GET_BIT(TWCR,TWINT));
     c4c:	e6 e5       	ldi	r30, 0x56	; 86
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	88 23       	and	r24, r24
     c54:	dc f7       	brge	.-10     	; 0xc4c <MASTER_SEND_ADDRESS_READ+0x46>
		//check in status code
		//while(STATUSE_CODE != ADDRESS_R_RECIVE);
	}
}
     c56:	0f 90       	pop	r0
     c58:	cf 91       	pop	r28
     c5a:	df 91       	pop	r29
     c5c:	08 95       	ret

00000c5e <MASTER_RECIVE_DATA>:
u8 MASTER_RECIVE_DATA             (void)
{
     c5e:	df 93       	push	r29
     c60:	cf 93       	push	r28
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR, TWEA);
     c66:	a6 e5       	ldi	r26, 0x56	; 86
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	e6 e5       	ldi	r30, 0x56	; 86
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	80 64       	ori	r24, 0x40	; 64
     c72:	8c 93       	st	X, r24
	//CLEAR FLAG  The TWINT Flag must be cleared by software by writing a logic one
	SET_BIT(TWCR,TWINT);
     c74:	a6 e5       	ldi	r26, 0x56	; 86
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	e6 e5       	ldi	r30, 0x56	; 86
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	80 68       	ori	r24, 0x80	; 128
     c80:	8c 93       	st	X, r24

	//BUSY W8 OF FLAG
	while(!GET_BIT(TWCR,TWINT));
     c82:	e6 e5       	ldi	r30, 0x56	; 86
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	88 23       	and	r24, r24
     c8a:	dc f7       	brge	.-10     	; 0xc82 <MASTER_RECIVE_DATA+0x24>
	//check in status code
	//while(STATUSE_CODE != DATA_RECIVE_WITH_ACK);


	return TWDR;
     c8c:	e3 e2       	ldi	r30, 0x23	; 35
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
}
     c92:	cf 91       	pop	r28
     c94:	df 91       	pop	r29
     c96:	08 95       	ret

00000c98 <vMASTER_init>:

void vMASTER_init                 (void)
{
     c98:	df 93       	push	r29
     c9a:	cf 93       	push	r28
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
	/* set pre-scaler -> 0 */
	/* TWPS1, TWPS0 @ TWSR -> 0, 0 (default) */
	CLR_BIT(TWSR,TWPS0);
     ca0:	a1 e2       	ldi	r26, 0x21	; 33
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	e1 e2       	ldi	r30, 0x21	; 33
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	8e 7f       	andi	r24, 0xFE	; 254
     cac:	8c 93       	st	X, r24
	CLR_BIT(TWSR,TWPS1);
     cae:	a1 e2       	ldi	r26, 0x21	; 33
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	e1 e2       	ldi	r30, 0x21	; 33
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	8d 7f       	andi	r24, 0xFD	; 253
     cba:	8c 93       	st	X, r24

	/* select bit rate */
	/* TWBR	-> 12 */
	/* FTWI = 400KHZ*/

	TWBR=12;
     cbc:	e0 e2       	ldi	r30, 0x20	; 32
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	8c e0       	ldi	r24, 0x0C	; 12
     cc2:	80 83       	st	Z, r24
	/* enable acknowledge  */
	/* TWEA @ TWCR -> 1 */
	SET_BIT(TWCR,TWEA);
     cc4:	a6 e5       	ldi	r26, 0x56	; 86
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e6 e5       	ldi	r30, 0x56	; 86
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	80 64       	ori	r24, 0x40	; 64
     cd0:	8c 93       	st	X, r24


	/* enable TWI */
	/* TWEN @ TWCR -> 1 */
	SET_BIT(TWCR,TWEN);
     cd2:	a6 e5       	ldi	r26, 0x56	; 86
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	e6 e5       	ldi	r30, 0x56	; 86
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	84 60       	ori	r24, 0x04	; 4
     cde:	8c 93       	st	X, r24

}
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <vMASTER_START_condition>:
void vMASTER_START_condition      (void)
{
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
	//SET START BIT CONDITION
	SET_BIT(TWCR,TWSTA);
     cee:	a6 e5       	ldi	r26, 0x56	; 86
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	e6 e5       	ldi	r30, 0x56	; 86
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	80 62       	ori	r24, 0x20	; 32
     cfa:	8c 93       	st	X, r24

	//CLEAR FLAG  The TWINT Flag must be cleared by software by writing a logic one
	SET_BIT(TWCR,TWINT);
     cfc:	a6 e5       	ldi	r26, 0x56	; 86
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	e6 e5       	ldi	r30, 0x56	; 86
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	80 68       	ori	r24, 0x80	; 128
     d08:	8c 93       	st	X, r24
	//BUSY W8 OF FLAG
	while(!GET_BIT(TWCR,TWINT));
     d0a:	e6 e5       	ldi	r30, 0x56	; 86
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	88 23       	and	r24, r24
     d12:	dc f7       	brge	.-10     	; 0xd0a <vMASTER_START_condition+0x24>
	//check in status code
	//while(STATUSE_CODE != START_condition_transmitted);


}
     d14:	cf 91       	pop	r28
     d16:	df 91       	pop	r29
     d18:	08 95       	ret

00000d1a <M_I2C_RecieveByte_ACK>:

u8 M_I2C_RecieveByte_ACK(void)
{
     d1a:	df 93       	push	r29
     d1c:	cf 93       	push	r28
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
     d22:	e6 e5       	ldi	r30, 0x56	; 86
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	84 ec       	ldi	r24, 0xC4	; 196
     d28:	80 83       	st	Z, r24
	while(GET_BIT(TWCR,TWINT)==0)
     d2a:	e6 e5       	ldi	r30, 0x56	; 86
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	88 23       	and	r24, r24
     d32:	dc f7       	brge	.-10     	; 0xd2a <M_I2C_RecieveByte_ACK+0x10>
		{

		}
	return TWDR;
     d34:	e3 e2       	ldi	r30, 0x23	; 35
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
	CLR_BIT(TWCR,TWEA);
}
     d3a:	cf 91       	pop	r28
     d3c:	df 91       	pop	r29
     d3e:	08 95       	ret

00000d40 <M_TWI_Stop>:
////	while((TWSR & 0xF8) != Data_byte_transmitted_ACK_received);
//	M_TWI_Stop();
//}
//
void M_TWI_Stop(void)
{
     d40:	df 93       	push	r29
     d42:	cf 93       	push	r28
     d44:	cd b7       	in	r28, 0x3d	; 61
     d46:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     d48:	e6 e5       	ldi	r30, 0x56	; 86
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	84 e9       	ldi	r24, 0x94	; 148
     d4e:	80 83       	st	Z, r24
}
     d50:	cf 91       	pop	r28
     d52:	df 91       	pop	r29
     d54:	08 95       	ret

00000d56 <Init_S_TWI>:


//-------------------------------------------------------------------------------------------//
void Init_S_TWI(void)
{
     d56:	df 93       	push	r29
     d58:	cf 93       	push	r28
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
	TWAR = SLA_W;
     d5e:	e2 e2       	ldi	r30, 0x22	; 34
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	84 e0       	ldi	r24, 0x04	; 4
     d64:	80 83       	st	Z, r24
	TWCR &= ~(1 << TWSTA);
     d66:	a6 e5       	ldi	r26, 0x56	; 86
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e6 e5       	ldi	r30, 0x56	; 86
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	8f 7d       	andi	r24, 0xDF	; 223
     d72:	8c 93       	st	X, r24
	TWCR &= ~(1 << TWSTO);
     d74:	a6 e5       	ldi	r26, 0x56	; 86
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	e6 e5       	ldi	r30, 0x56	; 86
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	8f 7e       	andi	r24, 0xEF	; 239
     d80:	8c 93       	st	X, r24
	TWCR |= (1<<TWEA) | (1<<TWEN);
     d82:	a6 e5       	ldi	r26, 0x56	; 86
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	e6 e5       	ldi	r30, 0x56	; 86
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	84 64       	ori	r24, 0x44	; 68
     d8e:	8c 93       	st	X, r24
}
     d90:	cf 91       	pop	r28
     d92:	df 91       	pop	r29
     d94:	08 95       	ret

00000d96 <Slave_TWI_Receive>:

u8 Slave_TWI_Receive(void)
{
     d96:	df 93       	push	r29
     d98:	cf 93       	push	r28
     d9a:	00 d0       	rcall	.+0      	; 0xd9c <Slave_TWI_Receive+0x6>
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(TWCR,TWINT)==0);
     da0:	e6 e5       	ldi	r30, 0x56	; 86
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	88 23       	and	r24, r24
     da8:	dc f7       	brge	.-10     	; 0xda0 <Slave_TWI_Receive+0xa>
	if ((TWSR & 0xF8) != 60 || (TWSR & 0xF8) != 68 || (TWSR & 0xF8) != 70 || (TWSR & 0xF8) != 78)
     daa:	e1 e2       	ldi	r30, 0x21	; 33
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
	{
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     db0:	e6 e5       	ldi	r30, 0x56	; 86
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	84 ec       	ldi	r24, 0xC4	; 196
     db6:	80 83       	st	Z, r24
		while (GET_BIT(TWCR,TWINT) == 0);
     db8:	e6 e5       	ldi	r30, 0x56	; 86
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	88 23       	and	r24, r24
     dc0:	dc f7       	brge	.-10     	; 0xdb8 <Slave_TWI_Receive+0x22>
		u8 ReceivedData = TWDR;
     dc2:	e3 e2       	ldi	r30, 0x23	; 35
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	89 83       	std	Y+1, r24	; 0x01
		return ReceivedData;
     dca:	89 81       	ldd	r24, Y+1	; 0x01
		TWCR = (1 << TWINT) | (1 << TWEN); // Clear TWINT and retain TWI enabled
	}
	   // If there's no data or an error, return an invalid value (e.g., 0xFF)
	    return 0xFF;
}
     dcc:	0f 90       	pop	r0
     dce:	0f 90       	pop	r0
     dd0:	cf 91       	pop	r28
     dd2:	df 91       	pop	r29
     dd4:	08 95       	ret

00000dd6 <TIMER0_VoidInit>:
u8 RemainingCounts=0;

void(*Ptr_OverFlowInterrupt)(void)=NULL;
void(*Ptr_CTCInterrupt)(void)=NULL;
void TIMER0_VoidInit(Waveform_Generation_Mode Timer_mode,Clock_Select Prescaler,Compare_Output_Mode mode)
{
     dd6:	df 93       	push	r29
     dd8:	cf 93       	push	r28
     dda:	00 d0       	rcall	.+0      	; 0xddc <TIMER0_VoidInit+0x6>
     ddc:	0f 92       	push	r0
     dde:	cd b7       	in	r28, 0x3d	; 61
     de0:	de b7       	in	r29, 0x3e	; 62
     de2:	89 83       	std	Y+1, r24	; 0x01
     de4:	6a 83       	std	Y+2, r22	; 0x02
     de6:	4b 83       	std	Y+3, r20	; 0x03
	/*select timer mode*/
	GLobal_Timer_mode=Timer_mode;
     de8:	89 81       	ldd	r24, Y+1	; 0x01
     dea:	80 93 ea 00 	sts	0x00EA, r24
	TCCR0&=0xB7;
     dee:	a3 e5       	ldi	r26, 0x53	; 83
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	e3 e5       	ldi	r30, 0x53	; 83
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	87 7b       	andi	r24, 0xB7	; 183
     dfa:	8c 93       	st	X, r24
	TCCR0|=((Timer_mode&1)<<6);
     dfc:	a3 e5       	ldi	r26, 0x53	; 83
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	e3 e5       	ldi	r30, 0x53	; 83
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	28 2f       	mov	r18, r24
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	88 2f       	mov	r24, r24
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	81 70       	andi	r24, 0x01	; 1
     e10:	90 70       	andi	r25, 0x00	; 0
     e12:	00 24       	eor	r0, r0
     e14:	96 95       	lsr	r25
     e16:	87 95       	ror	r24
     e18:	07 94       	ror	r0
     e1a:	96 95       	lsr	r25
     e1c:	87 95       	ror	r24
     e1e:	07 94       	ror	r0
     e20:	98 2f       	mov	r25, r24
     e22:	80 2d       	mov	r24, r0
     e24:	82 2b       	or	r24, r18
     e26:	8c 93       	st	X, r24
	TCCR0|=((Timer_mode&2)<<2);
     e28:	a3 e5       	ldi	r26, 0x53	; 83
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e3 e5       	ldi	r30, 0x53	; 83
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	28 2f       	mov	r18, r24
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	88 2f       	mov	r24, r24
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	82 70       	andi	r24, 0x02	; 2
     e3c:	90 70       	andi	r25, 0x00	; 0
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	88 0f       	add	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	82 2b       	or	r24, r18
     e48:	8c 93       	st	X, r24
	/*select prescaler*/
	Global_prescaler=Prescaler;
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	80 93 eb 00 	sts	0x00EB, r24
	/*select output comapare mode*/
	TCCR0&=0xCF;
     e50:	a3 e5       	ldi	r26, 0x53	; 83
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e3 e5       	ldi	r30, 0x53	; 83
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	8f 7c       	andi	r24, 0xCF	; 207
     e5c:	8c 93       	st	X, r24
	TCCR0|=mode<<4;
     e5e:	a3 e5       	ldi	r26, 0x53	; 83
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e3 e5       	ldi	r30, 0x53	; 83
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	28 2f       	mov	r18, r24
     e6a:	8b 81       	ldd	r24, Y+3	; 0x03
     e6c:	88 2f       	mov	r24, r24
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	82 95       	swap	r24
     e72:	92 95       	swap	r25
     e74:	90 7f       	andi	r25, 0xF0	; 240
     e76:	98 27       	eor	r25, r24
     e78:	80 7f       	andi	r24, 0xF0	; 240
     e7a:	98 27       	eor	r25, r24
     e7c:	82 2b       	or	r24, r18
     e7e:	8c 93       	st	X, r24

}
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	cf 91       	pop	r28
     e88:	df 91       	pop	r29
     e8a:	08 95       	ret

00000e8c <TIMER0_Voidstart>:

void TIMER0_Voidstart(void)
{
     e8c:	df 93       	push	r29
     e8e:	cf 93       	push	r28
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
	TCCR0&=0xF8;
     e94:	a3 e5       	ldi	r26, 0x53	; 83
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e3 e5       	ldi	r30, 0x53	; 83
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	88 7f       	andi	r24, 0xF8	; 248
     ea0:	8c 93       	st	X, r24
	TCCR0|=Global_prescaler;
     ea2:	a3 e5       	ldi	r26, 0x53	; 83
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e3 e5       	ldi	r30, 0x53	; 83
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	90 81       	ld	r25, Z
     eac:	80 91 eb 00 	lds	r24, 0x00EB
     eb0:	89 2b       	or	r24, r25
     eb2:	8c 93       	st	X, r24
}
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <TIMER0_VoidStop>:

void TIMER0_VoidStop(void)
{
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
	TCCR0&=0xF8;
     ec2:	a3 e5       	ldi	r26, 0x53	; 83
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e3 e5       	ldi	r30, 0x53	; 83
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	88 7f       	andi	r24, 0xF8	; 248
     ece:	8c 93       	st	X, r24
}
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <TIMER0_VoidDelayTimeMillisec>:


void TIMER0_VoidDelayTimeMillisec(u32 Millisecond)
{
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
     ede:	2e 97       	sbiw	r28, 0x0e	; 14
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	f8 94       	cli
     ee4:	de bf       	out	0x3e, r29	; 62
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	cd bf       	out	0x3d, r28	; 61
     eea:	6b 87       	std	Y+11, r22	; 0x0b
     eec:	7c 87       	std	Y+12, r23	; 0x0c
     eee:	8d 87       	std	Y+13, r24	; 0x0d
     ef0:	9e 87       	std	Y+14, r25	; 0x0e
	u32 TickTime=(Prescaler_Arr[Global_prescaler-1]*1000000)/(FCPU);
     ef2:	80 91 eb 00 	lds	r24, 0x00EB
     ef6:	88 2f       	mov	r24, r24
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	01 97       	sbiw	r24, 0x01	; 1
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	fc 01       	movw	r30, r24
     f02:	ec 54       	subi	r30, 0x4C	; 76
     f04:	ff 4f       	sbci	r31, 0xFF	; 255
     f06:	80 81       	ld	r24, Z
     f08:	91 81       	ldd	r25, Z+1	; 0x01
     f0a:	cc 01       	movw	r24, r24
     f0c:	a0 e0       	ldi	r26, 0x00	; 0
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	20 e4       	ldi	r18, 0x40	; 64
     f12:	32 e4       	ldi	r19, 0x42	; 66
     f14:	4f e0       	ldi	r20, 0x0F	; 15
     f16:	50 e0       	ldi	r21, 0x00	; 0
     f18:	bc 01       	movw	r22, r24
     f1a:	cd 01       	movw	r24, r26
     f1c:	0e 94 cd 1a 	call	0x359a	; 0x359a <__mulsi3>
     f20:	dc 01       	movw	r26, r24
     f22:	cb 01       	movw	r24, r22
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	34 e2       	ldi	r19, 0x24	; 36
     f28:	44 ef       	ldi	r20, 0xF4	; 244
     f2a:	50 e0       	ldi	r21, 0x00	; 0
     f2c:	bc 01       	movw	r22, r24
     f2e:	cd 01       	movw	r24, r26
     f30:	0e 94 21 1b 	call	0x3642	; 0x3642 <__divmodsi4>
     f34:	da 01       	movw	r26, r20
     f36:	c9 01       	movw	r24, r18
     f38:	8f 83       	std	Y+7, r24	; 0x07
     f3a:	98 87       	std	Y+8, r25	; 0x08
     f3c:	a9 87       	std	Y+9, r26	; 0x09
     f3e:	ba 87       	std	Y+10, r27	; 0x0a
	u32 DesiredTicks=(Millisecond*1000)/TickTime;
     f40:	8b 85       	ldd	r24, Y+11	; 0x0b
     f42:	9c 85       	ldd	r25, Y+12	; 0x0c
     f44:	ad 85       	ldd	r26, Y+13	; 0x0d
     f46:	be 85       	ldd	r27, Y+14	; 0x0e
     f48:	28 ee       	ldi	r18, 0xE8	; 232
     f4a:	33 e0       	ldi	r19, 0x03	; 3
     f4c:	40 e0       	ldi	r20, 0x00	; 0
     f4e:	50 e0       	ldi	r21, 0x00	; 0
     f50:	bc 01       	movw	r22, r24
     f52:	cd 01       	movw	r24, r26
     f54:	0e 94 cd 1a 	call	0x359a	; 0x359a <__mulsi3>
     f58:	dc 01       	movw	r26, r24
     f5a:	cb 01       	movw	r24, r22
     f5c:	2f 81       	ldd	r18, Y+7	; 0x07
     f5e:	38 85       	ldd	r19, Y+8	; 0x08
     f60:	49 85       	ldd	r20, Y+9	; 0x09
     f62:	5a 85       	ldd	r21, Y+10	; 0x0a
     f64:	bc 01       	movw	r22, r24
     f66:	cd 01       	movw	r24, r26
     f68:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <__udivmodsi4>
     f6c:	da 01       	movw	r26, r20
     f6e:	c9 01       	movw	r24, r18
     f70:	8b 83       	std	Y+3, r24	; 0x03
     f72:	9c 83       	std	Y+4, r25	; 0x04
     f74:	ad 83       	std	Y+5, r26	; 0x05
     f76:	be 83       	std	Y+6, r27	; 0x06
	if(GLobal_Timer_mode==NORMAL)
     f78:	80 91 ea 00 	lds	r24, 0x00EA
     f7c:	88 23       	and	r24, r24
     f7e:	91 f5       	brne	.+100    	; 0xfe4 <TIMER0_VoidDelayTimeMillisec+0x10e>
	{
		NumberOfOverFlows=DesiredTicks/OverFlowTicks;
     f80:	8b 81       	ldd	r24, Y+3	; 0x03
     f82:	9c 81       	ldd	r25, Y+4	; 0x04
     f84:	ad 81       	ldd	r26, Y+5	; 0x05
     f86:	be 81       	ldd	r27, Y+6	; 0x06
     f88:	89 2f       	mov	r24, r25
     f8a:	9a 2f       	mov	r25, r26
     f8c:	ab 2f       	mov	r26, r27
     f8e:	bb 27       	eor	r27, r27
     f90:	80 93 cc 00 	sts	0x00CC, r24
     f94:	90 93 cd 00 	sts	0x00CD, r25
     f98:	a0 93 ce 00 	sts	0x00CE, r26
     f9c:	b0 93 cf 00 	sts	0x00CF, r27
		RemainingCounts=DesiredTicks%OverFlowTicks;
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	80 93 d0 00 	sts	0x00D0, r24
		if(RemainingCounts!=0)
     fa6:	80 91 d0 00 	lds	r24, 0x00D0
     faa:	88 23       	and	r24, r24
     fac:	09 f4       	brne	.+2      	; 0xfb0 <TIMER0_VoidDelayTimeMillisec+0xda>
     fae:	57 c0       	rjmp	.+174    	; 0x105e <TIMER0_VoidDelayTimeMillisec+0x188>
		{

			TCNT0=OverFlowTicks-RemainingCounts;
     fb0:	e2 e5       	ldi	r30, 0x52	; 82
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 91 d0 00 	lds	r24, 0x00D0
     fb8:	81 95       	neg	r24
     fba:	80 83       	st	Z, r24
			NumberOfOverFlows++;
     fbc:	80 91 cc 00 	lds	r24, 0x00CC
     fc0:	90 91 cd 00 	lds	r25, 0x00CD
     fc4:	a0 91 ce 00 	lds	r26, 0x00CE
     fc8:	b0 91 cf 00 	lds	r27, 0x00CF
     fcc:	01 96       	adiw	r24, 0x01	; 1
     fce:	a1 1d       	adc	r26, r1
     fd0:	b1 1d       	adc	r27, r1
     fd2:	80 93 cc 00 	sts	0x00CC, r24
     fd6:	90 93 cd 00 	sts	0x00CD, r25
     fda:	a0 93 ce 00 	sts	0x00CE, r26
     fde:	b0 93 cf 00 	sts	0x00CF, r27
     fe2:	3d c0       	rjmp	.+122    	; 0x105e <TIMER0_VoidDelayTimeMillisec+0x188>
		}
	}else if(GLobal_Timer_mode==CTC)
     fe4:	80 91 ea 00 	lds	r24, 0x00EA
     fe8:	82 30       	cpi	r24, 0x02	; 2
     fea:	c9 f5       	brne	.+114    	; 0x105e <TIMER0_VoidDelayTimeMillisec+0x188>
	{
		u16 value=OverFlowTicks;
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	91 e0       	ldi	r25, 0x01	; 1
     ff0:	9a 83       	std	Y+2, r25	; 0x02
     ff2:	89 83       	std	Y+1, r24	; 0x01
     ff4:	05 c0       	rjmp	.+10     	; 0x1000 <TIMER0_VoidDelayTimeMillisec+0x12a>
		while(DesiredTicks%value!=0)
		{
			value--;
     ff6:	89 81       	ldd	r24, Y+1	; 0x01
     ff8:	9a 81       	ldd	r25, Y+2	; 0x02
     ffa:	01 97       	sbiw	r24, 0x01	; 1
     ffc:	9a 83       	std	Y+2, r25	; 0x02
     ffe:	89 83       	std	Y+1, r24	; 0x01
			NumberOfOverFlows++;
		}
	}else if(GLobal_Timer_mode==CTC)
	{
		u16 value=OverFlowTicks;
		while(DesiredTicks%value!=0)
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	9a 81       	ldd	r25, Y+2	; 0x02
    1004:	9c 01       	movw	r18, r24
    1006:	40 e0       	ldi	r20, 0x00	; 0
    1008:	50 e0       	ldi	r21, 0x00	; 0
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	9c 81       	ldd	r25, Y+4	; 0x04
    100e:	ad 81       	ldd	r26, Y+5	; 0x05
    1010:	be 81       	ldd	r27, Y+6	; 0x06
    1012:	bc 01       	movw	r22, r24
    1014:	cd 01       	movw	r24, r26
    1016:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <__udivmodsi4>
    101a:	dc 01       	movw	r26, r24
    101c:	cb 01       	movw	r24, r22
    101e:	00 97       	sbiw	r24, 0x00	; 0
    1020:	a1 05       	cpc	r26, r1
    1022:	b1 05       	cpc	r27, r1
    1024:	41 f7       	brne	.-48     	; 0xff6 <TIMER0_VoidDelayTimeMillisec+0x120>
		{
			value--;
		}
		OCR0=value-1;
    1026:	ec e5       	ldi	r30, 0x5C	; 92
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	81 50       	subi	r24, 0x01	; 1
    102e:	80 83       	st	Z, r24
		NumberOfOverFlows=DesiredTicks/value;
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	9a 81       	ldd	r25, Y+2	; 0x02
    1034:	9c 01       	movw	r18, r24
    1036:	40 e0       	ldi	r20, 0x00	; 0
    1038:	50 e0       	ldi	r21, 0x00	; 0
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	9c 81       	ldd	r25, Y+4	; 0x04
    103e:	ad 81       	ldd	r26, Y+5	; 0x05
    1040:	be 81       	ldd	r27, Y+6	; 0x06
    1042:	bc 01       	movw	r22, r24
    1044:	cd 01       	movw	r24, r26
    1046:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <__udivmodsi4>
    104a:	da 01       	movw	r26, r20
    104c:	c9 01       	movw	r24, r18
    104e:	80 93 cc 00 	sts	0x00CC, r24
    1052:	90 93 cd 00 	sts	0x00CD, r25
    1056:	a0 93 ce 00 	sts	0x00CE, r26
    105a:	b0 93 cf 00 	sts	0x00CF, r27
	}

}
    105e:	2e 96       	adiw	r28, 0x0e	; 14
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	f8 94       	cli
    1064:	de bf       	out	0x3e, r29	; 62
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	cd bf       	out	0x3d, r28	; 61
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	08 95       	ret

00001070 <TIMER0_VoidAsynchronous>:


void TIMER0_VoidAsynchronous(void(*TIMER0)(void))
{
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	00 d0       	rcall	.+0      	; 0x1076 <TIMER0_VoidAsynchronous+0x6>
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
    107a:	9a 83       	std	Y+2, r25	; 0x02
    107c:	89 83       	std	Y+1, r24	; 0x01
	if(GLobal_Timer_mode==NORMAL)
    107e:	80 91 ea 00 	lds	r24, 0x00EA
    1082:	88 23       	and	r24, r24
    1084:	a9 f4       	brne	.+42     	; 0x10b0 <TIMER0_VoidAsynchronous+0x40>
	{
		TIMSK&=0xFC;
    1086:	a9 e5       	ldi	r26, 0x59	; 89
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e9 e5       	ldi	r30, 0x59	; 89
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	8c 7f       	andi	r24, 0xFC	; 252
    1092:	8c 93       	st	X, r24
		SET_BIT(TIMSK,TOIE0);
    1094:	a9 e5       	ldi	r26, 0x59	; 89
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	e9 e5       	ldi	r30, 0x59	; 89
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	81 60       	ori	r24, 0x01	; 1
    10a0:	8c 93       	st	X, r24
		Ptr_OverFlowInterrupt=TIMER0;
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
    10a4:	9a 81       	ldd	r25, Y+2	; 0x02
    10a6:	90 93 d2 00 	sts	0x00D2, r25
    10aa:	80 93 d1 00 	sts	0x00D1, r24
    10ae:	18 c0       	rjmp	.+48     	; 0x10e0 <TIMER0_VoidAsynchronous+0x70>
	}else if(GLobal_Timer_mode==CTC)
    10b0:	80 91 ea 00 	lds	r24, 0x00EA
    10b4:	82 30       	cpi	r24, 0x02	; 2
    10b6:	a1 f4       	brne	.+40     	; 0x10e0 <TIMER0_VoidAsynchronous+0x70>
	{
		TIMSK&=0xFC;
    10b8:	a9 e5       	ldi	r26, 0x59	; 89
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e9 e5       	ldi	r30, 0x59	; 89
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	8c 7f       	andi	r24, 0xFC	; 252
    10c4:	8c 93       	st	X, r24
		SET_BIT(TIMSK,OCIE0);
    10c6:	a9 e5       	ldi	r26, 0x59	; 89
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e9 e5       	ldi	r30, 0x59	; 89
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	82 60       	ori	r24, 0x02	; 2
    10d2:	8c 93       	st	X, r24
		Ptr_CTCInterrupt=TIMER0;
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	9a 81       	ldd	r25, Y+2	; 0x02
    10d8:	90 93 d4 00 	sts	0x00D4, r25
    10dc:	80 93 d3 00 	sts	0x00D3, r24
	}
}
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	cf 91       	pop	r28
    10e6:	df 91       	pop	r29
    10e8:	08 95       	ret

000010ea <TIMER_VoidPwmDuty>:

void TIMER_VoidPwmDuty(u8 duty)
{
    10ea:	df 93       	push	r29
    10ec:	cf 93       	push	r28
    10ee:	00 d0       	rcall	.+0      	; 0x10f0 <TIMER_VoidPwmDuty+0x6>
    10f0:	0f 92       	push	r0
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
    10f6:	8b 83       	std	Y+3, r24	; 0x03
	u16 x=0;
    10f8:	1a 82       	std	Y+2, r1	; 0x02
    10fa:	19 82       	std	Y+1, r1	; 0x01
	x=((duty*256)/100)-1;
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	88 2f       	mov	r24, r24
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	98 2f       	mov	r25, r24
    1104:	88 27       	eor	r24, r24
    1106:	24 e6       	ldi	r18, 0x64	; 100
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	b9 01       	movw	r22, r18
    110c:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__divmodhi4>
    1110:	cb 01       	movw	r24, r22
    1112:	01 97       	sbiw	r24, 0x01	; 1
    1114:	9a 83       	std	Y+2, r25	; 0x02
    1116:	89 83       	std	Y+1, r24	; 0x01
	OCR0=x;
    1118:	ec e5       	ldi	r30, 0x5C	; 92
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	89 81       	ldd	r24, Y+1	; 0x01
    111e:	80 83       	st	Z, r24
}
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	08 95       	ret

0000112c <__vector_11>:


void __vector_11(void)
{
    112c:	1f 92       	push	r1
    112e:	0f 92       	push	r0
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	0f 92       	push	r0
    1134:	11 24       	eor	r1, r1
    1136:	2f 93       	push	r18
    1138:	3f 93       	push	r19
    113a:	4f 93       	push	r20
    113c:	5f 93       	push	r21
    113e:	6f 93       	push	r22
    1140:	7f 93       	push	r23
    1142:	8f 93       	push	r24
    1144:	9f 93       	push	r25
    1146:	af 93       	push	r26
    1148:	bf 93       	push	r27
    114a:	ef 93       	push	r30
    114c:	ff 93       	push	r31
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62

	static u32 count=0;
	count++;
    1156:	80 91 d5 00 	lds	r24, 0x00D5
    115a:	90 91 d6 00 	lds	r25, 0x00D6
    115e:	a0 91 d7 00 	lds	r26, 0x00D7
    1162:	b0 91 d8 00 	lds	r27, 0x00D8
    1166:	01 96       	adiw	r24, 0x01	; 1
    1168:	a1 1d       	adc	r26, r1
    116a:	b1 1d       	adc	r27, r1
    116c:	80 93 d5 00 	sts	0x00D5, r24
    1170:	90 93 d6 00 	sts	0x00D6, r25
    1174:	a0 93 d7 00 	sts	0x00D7, r26
    1178:	b0 93 d8 00 	sts	0x00D8, r27
	if(count == NumberOfOverFlows)
    117c:	20 91 d5 00 	lds	r18, 0x00D5
    1180:	30 91 d6 00 	lds	r19, 0x00D6
    1184:	40 91 d7 00 	lds	r20, 0x00D7
    1188:	50 91 d8 00 	lds	r21, 0x00D8
    118c:	80 91 cc 00 	lds	r24, 0x00CC
    1190:	90 91 cd 00 	lds	r25, 0x00CD
    1194:	a0 91 ce 00 	lds	r26, 0x00CE
    1198:	b0 91 cf 00 	lds	r27, 0x00CF
    119c:	28 17       	cp	r18, r24
    119e:	39 07       	cpc	r19, r25
    11a0:	4a 07       	cpc	r20, r26
    11a2:	5b 07       	cpc	r21, r27
    11a4:	c9 f4       	brne	.+50     	; 0x11d8 <__vector_11+0xac>
	{
		TCNT0=OverFlowTicks-RemainingCounts;
    11a6:	e2 e5       	ldi	r30, 0x52	; 82
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 91 d0 00 	lds	r24, 0x00D0
    11ae:	81 95       	neg	r24
    11b0:	80 83       	st	Z, r24
		count=0;
    11b2:	10 92 d5 00 	sts	0x00D5, r1
    11b6:	10 92 d6 00 	sts	0x00D6, r1
    11ba:	10 92 d7 00 	sts	0x00D7, r1
    11be:	10 92 d8 00 	sts	0x00D8, r1
		if(Ptr_OverFlowInterrupt!=NULL)
    11c2:	80 91 d1 00 	lds	r24, 0x00D1
    11c6:	90 91 d2 00 	lds	r25, 0x00D2
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	29 f0       	breq	.+10     	; 0x11d8 <__vector_11+0xac>
		{
			Ptr_OverFlowInterrupt();
    11ce:	e0 91 d1 00 	lds	r30, 0x00D1
    11d2:	f0 91 d2 00 	lds	r31, 0x00D2
    11d6:	09 95       	icall
		}


	}

}
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	ff 91       	pop	r31
    11de:	ef 91       	pop	r30
    11e0:	bf 91       	pop	r27
    11e2:	af 91       	pop	r26
    11e4:	9f 91       	pop	r25
    11e6:	8f 91       	pop	r24
    11e8:	7f 91       	pop	r23
    11ea:	6f 91       	pop	r22
    11ec:	5f 91       	pop	r21
    11ee:	4f 91       	pop	r20
    11f0:	3f 91       	pop	r19
    11f2:	2f 91       	pop	r18
    11f4:	0f 90       	pop	r0
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	0f 90       	pop	r0
    11fa:	1f 90       	pop	r1
    11fc:	18 95       	reti

000011fe <__vector_10>:

void __vector_10(void)
{
    11fe:	1f 92       	push	r1
    1200:	0f 92       	push	r0
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	0f 92       	push	r0
    1206:	11 24       	eor	r1, r1
    1208:	2f 93       	push	r18
    120a:	3f 93       	push	r19
    120c:	4f 93       	push	r20
    120e:	5f 93       	push	r21
    1210:	6f 93       	push	r22
    1212:	7f 93       	push	r23
    1214:	8f 93       	push	r24
    1216:	9f 93       	push	r25
    1218:	af 93       	push	r26
    121a:	bf 93       	push	r27
    121c:	ef 93       	push	r30
    121e:	ff 93       	push	r31
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
	static u32 count=0;
	count++;
    1228:	80 91 d9 00 	lds	r24, 0x00D9
    122c:	90 91 da 00 	lds	r25, 0x00DA
    1230:	a0 91 db 00 	lds	r26, 0x00DB
    1234:	b0 91 dc 00 	lds	r27, 0x00DC
    1238:	01 96       	adiw	r24, 0x01	; 1
    123a:	a1 1d       	adc	r26, r1
    123c:	b1 1d       	adc	r27, r1
    123e:	80 93 d9 00 	sts	0x00D9, r24
    1242:	90 93 da 00 	sts	0x00DA, r25
    1246:	a0 93 db 00 	sts	0x00DB, r26
    124a:	b0 93 dc 00 	sts	0x00DC, r27
	if(count == NumberOfOverFlows)
    124e:	20 91 d9 00 	lds	r18, 0x00D9
    1252:	30 91 da 00 	lds	r19, 0x00DA
    1256:	40 91 db 00 	lds	r20, 0x00DB
    125a:	50 91 dc 00 	lds	r21, 0x00DC
    125e:	80 91 cc 00 	lds	r24, 0x00CC
    1262:	90 91 cd 00 	lds	r25, 0x00CD
    1266:	a0 91 ce 00 	lds	r26, 0x00CE
    126a:	b0 91 cf 00 	lds	r27, 0x00CF
    126e:	28 17       	cp	r18, r24
    1270:	39 07       	cpc	r19, r25
    1272:	4a 07       	cpc	r20, r26
    1274:	5b 07       	cpc	r21, r27
    1276:	99 f4       	brne	.+38     	; 0x129e <__vector_10+0xa0>
	{
		if(Ptr_CTCInterrupt!=NULL)
    1278:	80 91 d3 00 	lds	r24, 0x00D3
    127c:	90 91 d4 00 	lds	r25, 0x00D4
    1280:	00 97       	sbiw	r24, 0x00	; 0
    1282:	29 f0       	breq	.+10     	; 0x128e <__vector_10+0x90>
		{
			Ptr_CTCInterrupt();
    1284:	e0 91 d3 00 	lds	r30, 0x00D3
    1288:	f0 91 d4 00 	lds	r31, 0x00D4
    128c:	09 95       	icall
		}
		count=0;
    128e:	10 92 d9 00 	sts	0x00D9, r1
    1292:	10 92 da 00 	sts	0x00DA, r1
    1296:	10 92 db 00 	sts	0x00DB, r1
    129a:	10 92 dc 00 	sts	0x00DC, r1
	}
}
    129e:	cf 91       	pop	r28
    12a0:	df 91       	pop	r29
    12a2:	ff 91       	pop	r31
    12a4:	ef 91       	pop	r30
    12a6:	bf 91       	pop	r27
    12a8:	af 91       	pop	r26
    12aa:	9f 91       	pop	r25
    12ac:	8f 91       	pop	r24
    12ae:	7f 91       	pop	r23
    12b0:	6f 91       	pop	r22
    12b2:	5f 91       	pop	r21
    12b4:	4f 91       	pop	r20
    12b6:	3f 91       	pop	r19
    12b8:	2f 91       	pop	r18
    12ba:	0f 90       	pop	r0
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	0f 90       	pop	r0
    12c0:	1f 90       	pop	r1
    12c2:	18 95       	reti

000012c4 <M_GIE_VoidEnable>:

#include"GIE_Private.h"
#include"GIE_init.h"

void M_GIE_VoidEnable(void)
{
    12c4:	df 93       	push	r29
    12c6:	cf 93       	push	r28
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    12cc:	af e5       	ldi	r26, 0x5F	; 95
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	ef e5       	ldi	r30, 0x5F	; 95
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	80 68       	ori	r24, 0x80	; 128
    12d8:	8c 93       	st	X, r24
}
    12da:	cf 91       	pop	r28
    12dc:	df 91       	pop	r29
    12de:	08 95       	ret

000012e0 <M_GIE_VoidDisable>:
void M_GIE_VoidDisable(void)
{
    12e0:	df 93       	push	r29
    12e2:	cf 93       	push	r28
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    12e8:	af e5       	ldi	r26, 0x5F	; 95
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	ef e5       	ldi	r30, 0x5F	; 95
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	8f 77       	andi	r24, 0x7F	; 127
    12f4:	8c 93       	st	X, r24
}
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	08 95       	ret

000012fc <DIO_VoidSetPinDirection>:
#include <DIO_Private.h>
#include "STD_TYPES.h"
#include"BIT_MATH.h"
#include"DIO_cfg.h"

void DIO_VoidSetPinDirection(PIN_NUM PIN, u8 Value) {
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	00 d0       	rcall	.+0      	; 0x1302 <DIO_VoidSetPinDirection+0x6>
    1302:	00 d0       	rcall	.+0      	; 0x1304 <DIO_VoidSetPinDirection+0x8>
    1304:	00 d0       	rcall	.+0      	; 0x1306 <DIO_VoidSetPinDirection+0xa>
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	89 83       	std	Y+1, r24	; 0x01
    130c:	6a 83       	std	Y+2, r22	; 0x02
	if (Value == OUTPUT) /*OUTPUT*/
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	81 30       	cpi	r24, 0x01	; 1
    1312:	09 f0       	breq	.+2      	; 0x1316 <DIO_VoidSetPinDirection+0x1a>
    1314:	7f c0       	rjmp	.+254    	; 0x1414 <DIO_VoidSetPinDirection+0x118>
	{
		switch (PIN / 8) {
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	86 95       	lsr	r24
    131a:	86 95       	lsr	r24
    131c:	86 95       	lsr	r24
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	3e 83       	std	Y+6, r19	; 0x06
    1324:	2d 83       	std	Y+5, r18	; 0x05
    1326:	8d 81       	ldd	r24, Y+5	; 0x05
    1328:	9e 81       	ldd	r25, Y+6	; 0x06
    132a:	81 30       	cpi	r24, 0x01	; 1
    132c:	91 05       	cpc	r25, r1
    132e:	69 f1       	breq	.+90     	; 0x138a <DIO_VoidSetPinDirection+0x8e>
    1330:	2d 81       	ldd	r18, Y+5	; 0x05
    1332:	3e 81       	ldd	r19, Y+6	; 0x06
    1334:	22 30       	cpi	r18, 0x02	; 2
    1336:	31 05       	cpc	r19, r1
    1338:	2c f4       	brge	.+10     	; 0x1344 <DIO_VoidSetPinDirection+0x48>
    133a:	8d 81       	ldd	r24, Y+5	; 0x05
    133c:	9e 81       	ldd	r25, Y+6	; 0x06
    133e:	00 97       	sbiw	r24, 0x00	; 0
    1340:	69 f0       	breq	.+26     	; 0x135c <DIO_VoidSetPinDirection+0x60>
    1342:	ee c0       	rjmp	.+476    	; 0x1520 <DIO_VoidSetPinDirection+0x224>
    1344:	2d 81       	ldd	r18, Y+5	; 0x05
    1346:	3e 81       	ldd	r19, Y+6	; 0x06
    1348:	22 30       	cpi	r18, 0x02	; 2
    134a:	31 05       	cpc	r19, r1
    134c:	a9 f1       	breq	.+106    	; 0x13b8 <DIO_VoidSetPinDirection+0xbc>
    134e:	8d 81       	ldd	r24, Y+5	; 0x05
    1350:	9e 81       	ldd	r25, Y+6	; 0x06
    1352:	83 30       	cpi	r24, 0x03	; 3
    1354:	91 05       	cpc	r25, r1
    1356:	09 f4       	brne	.+2      	; 0x135a <DIO_VoidSetPinDirection+0x5e>
    1358:	46 c0       	rjmp	.+140    	; 0x13e6 <DIO_VoidSetPinDirection+0xea>
    135a:	e2 c0       	rjmp	.+452    	; 0x1520 <DIO_VoidSetPinDirection+0x224>
		case PORTA:
			SET_BIT(DDRA_REG, (PIN % 8));
    135c:	aa e3       	ldi	r26, 0x3A	; 58
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	ea e3       	ldi	r30, 0x3A	; 58
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	48 2f       	mov	r20, r24
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	88 2f       	mov	r24, r24
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	9c 01       	movw	r18, r24
    1370:	27 70       	andi	r18, 0x07	; 7
    1372:	30 70       	andi	r19, 0x00	; 0
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	02 2e       	mov	r0, r18
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <DIO_VoidSetPinDirection+0x84>
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	0a 94       	dec	r0
    1382:	e2 f7       	brpl	.-8      	; 0x137c <DIO_VoidSetPinDirection+0x80>
    1384:	84 2b       	or	r24, r20
    1386:	8c 93       	st	X, r24
    1388:	cb c0       	rjmp	.+406    	; 0x1520 <DIO_VoidSetPinDirection+0x224>
			break;
		case PORTB:
			SET_BIT(DDRB_REG, (PIN % 8));
    138a:	a7 e3       	ldi	r26, 0x37	; 55
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	e7 e3       	ldi	r30, 0x37	; 55
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	48 2f       	mov	r20, r24
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	88 2f       	mov	r24, r24
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	9c 01       	movw	r18, r24
    139e:	27 70       	andi	r18, 0x07	; 7
    13a0:	30 70       	andi	r19, 0x00	; 0
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	02 2e       	mov	r0, r18
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <DIO_VoidSetPinDirection+0xb2>
    13aa:	88 0f       	add	r24, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	0a 94       	dec	r0
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <DIO_VoidSetPinDirection+0xae>
    13b2:	84 2b       	or	r24, r20
    13b4:	8c 93       	st	X, r24
    13b6:	b4 c0       	rjmp	.+360    	; 0x1520 <DIO_VoidSetPinDirection+0x224>
			break;
		case PORTC:
			SET_BIT(DDRC_REG, (PIN % 8));
    13b8:	a4 e3       	ldi	r26, 0x34	; 52
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e4 e3       	ldi	r30, 0x34	; 52
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	48 2f       	mov	r20, r24
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	88 2f       	mov	r24, r24
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	9c 01       	movw	r18, r24
    13cc:	27 70       	andi	r18, 0x07	; 7
    13ce:	30 70       	andi	r19, 0x00	; 0
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	02 2e       	mov	r0, r18
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <DIO_VoidSetPinDirection+0xe0>
    13d8:	88 0f       	add	r24, r24
    13da:	99 1f       	adc	r25, r25
    13dc:	0a 94       	dec	r0
    13de:	e2 f7       	brpl	.-8      	; 0x13d8 <DIO_VoidSetPinDirection+0xdc>
    13e0:	84 2b       	or	r24, r20
    13e2:	8c 93       	st	X, r24
    13e4:	9d c0       	rjmp	.+314    	; 0x1520 <DIO_VoidSetPinDirection+0x224>
			break;
		case PORTD:
			SET_BIT(DDRD_REG, (PIN % 8));
    13e6:	a1 e3       	ldi	r26, 0x31	; 49
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e1 e3       	ldi	r30, 0x31	; 49
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	48 2f       	mov	r20, r24
    13f2:	89 81       	ldd	r24, Y+1	; 0x01
    13f4:	88 2f       	mov	r24, r24
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	9c 01       	movw	r18, r24
    13fa:	27 70       	andi	r18, 0x07	; 7
    13fc:	30 70       	andi	r19, 0x00	; 0
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	02 2e       	mov	r0, r18
    1404:	02 c0       	rjmp	.+4      	; 0x140a <DIO_VoidSetPinDirection+0x10e>
    1406:	88 0f       	add	r24, r24
    1408:	99 1f       	adc	r25, r25
    140a:	0a 94       	dec	r0
    140c:	e2 f7       	brpl	.-8      	; 0x1406 <DIO_VoidSetPinDirection+0x10a>
    140e:	84 2b       	or	r24, r20
    1410:	8c 93       	st	X, r24
    1412:	86 c0       	rjmp	.+268    	; 0x1520 <DIO_VoidSetPinDirection+0x224>
			break;
		}

	} else if (Value == INPUT) /*input*/
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	88 23       	and	r24, r24
    1418:	09 f0       	breq	.+2      	; 0x141c <DIO_VoidSetPinDirection+0x120>
    141a:	82 c0       	rjmp	.+260    	; 0x1520 <DIO_VoidSetPinDirection+0x224>
	{
		switch (PIN / 8) {
    141c:	89 81       	ldd	r24, Y+1	; 0x01
    141e:	86 95       	lsr	r24
    1420:	86 95       	lsr	r24
    1422:	86 95       	lsr	r24
    1424:	28 2f       	mov	r18, r24
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	3c 83       	std	Y+4, r19	; 0x04
    142a:	2b 83       	std	Y+3, r18	; 0x03
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	9c 81       	ldd	r25, Y+4	; 0x04
    1430:	81 30       	cpi	r24, 0x01	; 1
    1432:	91 05       	cpc	r25, r1
    1434:	71 f1       	breq	.+92     	; 0x1492 <DIO_VoidSetPinDirection+0x196>
    1436:	2b 81       	ldd	r18, Y+3	; 0x03
    1438:	3c 81       	ldd	r19, Y+4	; 0x04
    143a:	22 30       	cpi	r18, 0x02	; 2
    143c:	31 05       	cpc	r19, r1
    143e:	2c f4       	brge	.+10     	; 0x144a <DIO_VoidSetPinDirection+0x14e>
    1440:	8b 81       	ldd	r24, Y+3	; 0x03
    1442:	9c 81       	ldd	r25, Y+4	; 0x04
    1444:	00 97       	sbiw	r24, 0x00	; 0
    1446:	69 f0       	breq	.+26     	; 0x1462 <DIO_VoidSetPinDirection+0x166>
    1448:	6b c0       	rjmp	.+214    	; 0x1520 <DIO_VoidSetPinDirection+0x224>
    144a:	2b 81       	ldd	r18, Y+3	; 0x03
    144c:	3c 81       	ldd	r19, Y+4	; 0x04
    144e:	22 30       	cpi	r18, 0x02	; 2
    1450:	31 05       	cpc	r19, r1
    1452:	b9 f1       	breq	.+110    	; 0x14c2 <DIO_VoidSetPinDirection+0x1c6>
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	9c 81       	ldd	r25, Y+4	; 0x04
    1458:	83 30       	cpi	r24, 0x03	; 3
    145a:	91 05       	cpc	r25, r1
    145c:	09 f4       	brne	.+2      	; 0x1460 <DIO_VoidSetPinDirection+0x164>
    145e:	49 c0       	rjmp	.+146    	; 0x14f2 <DIO_VoidSetPinDirection+0x1f6>
    1460:	5f c0       	rjmp	.+190    	; 0x1520 <DIO_VoidSetPinDirection+0x224>
		case PORTA:
			CLR_BIT(DDRA_REG, (PIN % 8));
    1462:	aa e3       	ldi	r26, 0x3A	; 58
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	ea e3       	ldi	r30, 0x3A	; 58
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	48 2f       	mov	r20, r24
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	88 2f       	mov	r24, r24
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	9c 01       	movw	r18, r24
    1476:	27 70       	andi	r18, 0x07	; 7
    1478:	30 70       	andi	r19, 0x00	; 0
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	02 2e       	mov	r0, r18
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <DIO_VoidSetPinDirection+0x18a>
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	0a 94       	dec	r0
    1488:	e2 f7       	brpl	.-8      	; 0x1482 <DIO_VoidSetPinDirection+0x186>
    148a:	80 95       	com	r24
    148c:	84 23       	and	r24, r20
    148e:	8c 93       	st	X, r24
    1490:	47 c0       	rjmp	.+142    	; 0x1520 <DIO_VoidSetPinDirection+0x224>
			break;
		case PORTB:
			CLR_BIT(DDRB_REG, (PIN % 8));
    1492:	a7 e3       	ldi	r26, 0x37	; 55
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e7 e3       	ldi	r30, 0x37	; 55
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	48 2f       	mov	r20, r24
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	88 2f       	mov	r24, r24
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	9c 01       	movw	r18, r24
    14a6:	27 70       	andi	r18, 0x07	; 7
    14a8:	30 70       	andi	r19, 0x00	; 0
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	02 2e       	mov	r0, r18
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <DIO_VoidSetPinDirection+0x1ba>
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	0a 94       	dec	r0
    14b8:	e2 f7       	brpl	.-8      	; 0x14b2 <DIO_VoidSetPinDirection+0x1b6>
    14ba:	80 95       	com	r24
    14bc:	84 23       	and	r24, r20
    14be:	8c 93       	st	X, r24
    14c0:	2f c0       	rjmp	.+94     	; 0x1520 <DIO_VoidSetPinDirection+0x224>
			break;
		case PORTC:
			CLR_BIT(DDRC_REG, (PIN % 8));
    14c2:	a4 e3       	ldi	r26, 0x34	; 52
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e4 e3       	ldi	r30, 0x34	; 52
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	48 2f       	mov	r20, r24
    14ce:	89 81       	ldd	r24, Y+1	; 0x01
    14d0:	88 2f       	mov	r24, r24
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	9c 01       	movw	r18, r24
    14d6:	27 70       	andi	r18, 0x07	; 7
    14d8:	30 70       	andi	r19, 0x00	; 0
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	02 2e       	mov	r0, r18
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <DIO_VoidSetPinDirection+0x1ea>
    14e2:	88 0f       	add	r24, r24
    14e4:	99 1f       	adc	r25, r25
    14e6:	0a 94       	dec	r0
    14e8:	e2 f7       	brpl	.-8      	; 0x14e2 <DIO_VoidSetPinDirection+0x1e6>
    14ea:	80 95       	com	r24
    14ec:	84 23       	and	r24, r20
    14ee:	8c 93       	st	X, r24
    14f0:	17 c0       	rjmp	.+46     	; 0x1520 <DIO_VoidSetPinDirection+0x224>
			break;
		case PORTD:
			CLR_BIT(DDRD_REG, (PIN % 8));
    14f2:	a1 e3       	ldi	r26, 0x31	; 49
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e1 e3       	ldi	r30, 0x31	; 49
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	48 2f       	mov	r20, r24
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	88 2f       	mov	r24, r24
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	9c 01       	movw	r18, r24
    1506:	27 70       	andi	r18, 0x07	; 7
    1508:	30 70       	andi	r19, 0x00	; 0
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	02 2e       	mov	r0, r18
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <DIO_VoidSetPinDirection+0x21a>
    1512:	88 0f       	add	r24, r24
    1514:	99 1f       	adc	r25, r25
    1516:	0a 94       	dec	r0
    1518:	e2 f7       	brpl	.-8      	; 0x1512 <DIO_VoidSetPinDirection+0x216>
    151a:	80 95       	com	r24
    151c:	84 23       	and	r24, r20
    151e:	8c 93       	st	X, r24
			break;
		}

	}

}
    1520:	26 96       	adiw	r28, 0x06	; 6
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	f8 94       	cli
    1526:	de bf       	out	0x3e, r29	; 62
    1528:	0f be       	out	0x3f, r0	; 63
    152a:	cd bf       	out	0x3d, r28	; 61
    152c:	cf 91       	pop	r28
    152e:	df 91       	pop	r29
    1530:	08 95       	ret

00001532 <DIO_VoidSetPinValue>:

void DIO_VoidSetPinValue(PIN_NUM PIN, u8 Value) {
    1532:	df 93       	push	r29
    1534:	cf 93       	push	r28
    1536:	00 d0       	rcall	.+0      	; 0x1538 <DIO_VoidSetPinValue+0x6>
    1538:	00 d0       	rcall	.+0      	; 0x153a <DIO_VoidSetPinValue+0x8>
    153a:	00 d0       	rcall	.+0      	; 0x153c <DIO_VoidSetPinValue+0xa>
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    1540:	89 83       	std	Y+1, r24	; 0x01
    1542:	6a 83       	std	Y+2, r22	; 0x02
	if (Value == DIO_HIGH) /*OUTPUT*/
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	81 30       	cpi	r24, 0x01	; 1
    1548:	09 f0       	breq	.+2      	; 0x154c <DIO_VoidSetPinValue+0x1a>
    154a:	7f c0       	rjmp	.+254    	; 0x164a <DIO_VoidSetPinValue+0x118>
	{
		switch (PIN / 8) {
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	86 95       	lsr	r24
    1550:	86 95       	lsr	r24
    1552:	86 95       	lsr	r24
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	3e 83       	std	Y+6, r19	; 0x06
    155a:	2d 83       	std	Y+5, r18	; 0x05
    155c:	8d 81       	ldd	r24, Y+5	; 0x05
    155e:	9e 81       	ldd	r25, Y+6	; 0x06
    1560:	81 30       	cpi	r24, 0x01	; 1
    1562:	91 05       	cpc	r25, r1
    1564:	69 f1       	breq	.+90     	; 0x15c0 <DIO_VoidSetPinValue+0x8e>
    1566:	2d 81       	ldd	r18, Y+5	; 0x05
    1568:	3e 81       	ldd	r19, Y+6	; 0x06
    156a:	22 30       	cpi	r18, 0x02	; 2
    156c:	31 05       	cpc	r19, r1
    156e:	2c f4       	brge	.+10     	; 0x157a <DIO_VoidSetPinValue+0x48>
    1570:	8d 81       	ldd	r24, Y+5	; 0x05
    1572:	9e 81       	ldd	r25, Y+6	; 0x06
    1574:	00 97       	sbiw	r24, 0x00	; 0
    1576:	69 f0       	breq	.+26     	; 0x1592 <DIO_VoidSetPinValue+0x60>
    1578:	ee c0       	rjmp	.+476    	; 0x1756 <DIO_VoidSetPinValue+0x224>
    157a:	2d 81       	ldd	r18, Y+5	; 0x05
    157c:	3e 81       	ldd	r19, Y+6	; 0x06
    157e:	22 30       	cpi	r18, 0x02	; 2
    1580:	31 05       	cpc	r19, r1
    1582:	a9 f1       	breq	.+106    	; 0x15ee <DIO_VoidSetPinValue+0xbc>
    1584:	8d 81       	ldd	r24, Y+5	; 0x05
    1586:	9e 81       	ldd	r25, Y+6	; 0x06
    1588:	83 30       	cpi	r24, 0x03	; 3
    158a:	91 05       	cpc	r25, r1
    158c:	09 f4       	brne	.+2      	; 0x1590 <DIO_VoidSetPinValue+0x5e>
    158e:	46 c0       	rjmp	.+140    	; 0x161c <DIO_VoidSetPinValue+0xea>
    1590:	e2 c0       	rjmp	.+452    	; 0x1756 <DIO_VoidSetPinValue+0x224>
		case PORTA:
			SET_BIT(PORTA_REG, (PIN % 8));
    1592:	ab e3       	ldi	r26, 0x3B	; 59
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	eb e3       	ldi	r30, 0x3B	; 59
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	48 2f       	mov	r20, r24
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	88 2f       	mov	r24, r24
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	9c 01       	movw	r18, r24
    15a6:	27 70       	andi	r18, 0x07	; 7
    15a8:	30 70       	andi	r19, 0x00	; 0
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	02 2e       	mov	r0, r18
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <DIO_VoidSetPinValue+0x84>
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	0a 94       	dec	r0
    15b8:	e2 f7       	brpl	.-8      	; 0x15b2 <DIO_VoidSetPinValue+0x80>
    15ba:	84 2b       	or	r24, r20
    15bc:	8c 93       	st	X, r24
    15be:	cb c0       	rjmp	.+406    	; 0x1756 <DIO_VoidSetPinValue+0x224>
			break;
		case PORTB:
			SET_BIT(PORTB_REG, (PIN % 8));
    15c0:	a8 e3       	ldi	r26, 0x38	; 56
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	e8 e3       	ldi	r30, 0x38	; 56
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	48 2f       	mov	r20, r24
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	88 2f       	mov	r24, r24
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	9c 01       	movw	r18, r24
    15d4:	27 70       	andi	r18, 0x07	; 7
    15d6:	30 70       	andi	r19, 0x00	; 0
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	02 2e       	mov	r0, r18
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <DIO_VoidSetPinValue+0xb2>
    15e0:	88 0f       	add	r24, r24
    15e2:	99 1f       	adc	r25, r25
    15e4:	0a 94       	dec	r0
    15e6:	e2 f7       	brpl	.-8      	; 0x15e0 <DIO_VoidSetPinValue+0xae>
    15e8:	84 2b       	or	r24, r20
    15ea:	8c 93       	st	X, r24
    15ec:	b4 c0       	rjmp	.+360    	; 0x1756 <DIO_VoidSetPinValue+0x224>
			break;
		case PORTC:
			SET_BIT(PORTC_REG, (PIN % 8));
    15ee:	a5 e3       	ldi	r26, 0x35	; 53
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	e5 e3       	ldi	r30, 0x35	; 53
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	48 2f       	mov	r20, r24
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	88 2f       	mov	r24, r24
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	9c 01       	movw	r18, r24
    1602:	27 70       	andi	r18, 0x07	; 7
    1604:	30 70       	andi	r19, 0x00	; 0
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	02 2e       	mov	r0, r18
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <DIO_VoidSetPinValue+0xe0>
    160e:	88 0f       	add	r24, r24
    1610:	99 1f       	adc	r25, r25
    1612:	0a 94       	dec	r0
    1614:	e2 f7       	brpl	.-8      	; 0x160e <DIO_VoidSetPinValue+0xdc>
    1616:	84 2b       	or	r24, r20
    1618:	8c 93       	st	X, r24
    161a:	9d c0       	rjmp	.+314    	; 0x1756 <DIO_VoidSetPinValue+0x224>
			break;
		case PORTD:
			SET_BIT(PORTD_REG, (PIN % 8));
    161c:	a2 e3       	ldi	r26, 0x32	; 50
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e2 e3       	ldi	r30, 0x32	; 50
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	48 2f       	mov	r20, r24
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	88 2f       	mov	r24, r24
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	9c 01       	movw	r18, r24
    1630:	27 70       	andi	r18, 0x07	; 7
    1632:	30 70       	andi	r19, 0x00	; 0
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	02 2e       	mov	r0, r18
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <DIO_VoidSetPinValue+0x10e>
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	0a 94       	dec	r0
    1642:	e2 f7       	brpl	.-8      	; 0x163c <DIO_VoidSetPinValue+0x10a>
    1644:	84 2b       	or	r24, r20
    1646:	8c 93       	st	X, r24
    1648:	86 c0       	rjmp	.+268    	; 0x1756 <DIO_VoidSetPinValue+0x224>
			break;
		}

	} else if (Value == DIO_LOW) /*input*/
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	88 23       	and	r24, r24
    164e:	09 f0       	breq	.+2      	; 0x1652 <DIO_VoidSetPinValue+0x120>
    1650:	82 c0       	rjmp	.+260    	; 0x1756 <DIO_VoidSetPinValue+0x224>
	{
		switch (PIN / 8) {
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	86 95       	lsr	r24
    1656:	86 95       	lsr	r24
    1658:	86 95       	lsr	r24
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	3c 83       	std	Y+4, r19	; 0x04
    1660:	2b 83       	std	Y+3, r18	; 0x03
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	9c 81       	ldd	r25, Y+4	; 0x04
    1666:	81 30       	cpi	r24, 0x01	; 1
    1668:	91 05       	cpc	r25, r1
    166a:	71 f1       	breq	.+92     	; 0x16c8 <DIO_VoidSetPinValue+0x196>
    166c:	2b 81       	ldd	r18, Y+3	; 0x03
    166e:	3c 81       	ldd	r19, Y+4	; 0x04
    1670:	22 30       	cpi	r18, 0x02	; 2
    1672:	31 05       	cpc	r19, r1
    1674:	2c f4       	brge	.+10     	; 0x1680 <DIO_VoidSetPinValue+0x14e>
    1676:	8b 81       	ldd	r24, Y+3	; 0x03
    1678:	9c 81       	ldd	r25, Y+4	; 0x04
    167a:	00 97       	sbiw	r24, 0x00	; 0
    167c:	69 f0       	breq	.+26     	; 0x1698 <DIO_VoidSetPinValue+0x166>
    167e:	6b c0       	rjmp	.+214    	; 0x1756 <DIO_VoidSetPinValue+0x224>
    1680:	2b 81       	ldd	r18, Y+3	; 0x03
    1682:	3c 81       	ldd	r19, Y+4	; 0x04
    1684:	22 30       	cpi	r18, 0x02	; 2
    1686:	31 05       	cpc	r19, r1
    1688:	b9 f1       	breq	.+110    	; 0x16f8 <DIO_VoidSetPinValue+0x1c6>
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	9c 81       	ldd	r25, Y+4	; 0x04
    168e:	83 30       	cpi	r24, 0x03	; 3
    1690:	91 05       	cpc	r25, r1
    1692:	09 f4       	brne	.+2      	; 0x1696 <DIO_VoidSetPinValue+0x164>
    1694:	49 c0       	rjmp	.+146    	; 0x1728 <DIO_VoidSetPinValue+0x1f6>
    1696:	5f c0       	rjmp	.+190    	; 0x1756 <DIO_VoidSetPinValue+0x224>
		case PORTA:
			CLR_BIT(PORTA_REG, (PIN % 8));
    1698:	ab e3       	ldi	r26, 0x3B	; 59
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	eb e3       	ldi	r30, 0x3B	; 59
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	48 2f       	mov	r20, r24
    16a4:	89 81       	ldd	r24, Y+1	; 0x01
    16a6:	88 2f       	mov	r24, r24
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	9c 01       	movw	r18, r24
    16ac:	27 70       	andi	r18, 0x07	; 7
    16ae:	30 70       	andi	r19, 0x00	; 0
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	02 2e       	mov	r0, r18
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <DIO_VoidSetPinValue+0x18a>
    16b8:	88 0f       	add	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	0a 94       	dec	r0
    16be:	e2 f7       	brpl	.-8      	; 0x16b8 <DIO_VoidSetPinValue+0x186>
    16c0:	80 95       	com	r24
    16c2:	84 23       	and	r24, r20
    16c4:	8c 93       	st	X, r24
    16c6:	47 c0       	rjmp	.+142    	; 0x1756 <DIO_VoidSetPinValue+0x224>
			break;
		case PORTB:
			CLR_BIT(PORTB_REG, (PIN % 8));
    16c8:	a8 e3       	ldi	r26, 0x38	; 56
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e8 e3       	ldi	r30, 0x38	; 56
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	48 2f       	mov	r20, r24
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
    16d6:	88 2f       	mov	r24, r24
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	9c 01       	movw	r18, r24
    16dc:	27 70       	andi	r18, 0x07	; 7
    16de:	30 70       	andi	r19, 0x00	; 0
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	02 2e       	mov	r0, r18
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <DIO_VoidSetPinValue+0x1ba>
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	0a 94       	dec	r0
    16ee:	e2 f7       	brpl	.-8      	; 0x16e8 <DIO_VoidSetPinValue+0x1b6>
    16f0:	80 95       	com	r24
    16f2:	84 23       	and	r24, r20
    16f4:	8c 93       	st	X, r24
    16f6:	2f c0       	rjmp	.+94     	; 0x1756 <DIO_VoidSetPinValue+0x224>
			break;
		case PORTC:
			CLR_BIT(PORTC_REG, (PIN % 8));
    16f8:	a5 e3       	ldi	r26, 0x35	; 53
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	e5 e3       	ldi	r30, 0x35	; 53
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	48 2f       	mov	r20, r24
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	88 2f       	mov	r24, r24
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	9c 01       	movw	r18, r24
    170c:	27 70       	andi	r18, 0x07	; 7
    170e:	30 70       	andi	r19, 0x00	; 0
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	02 2e       	mov	r0, r18
    1716:	02 c0       	rjmp	.+4      	; 0x171c <DIO_VoidSetPinValue+0x1ea>
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	0a 94       	dec	r0
    171e:	e2 f7       	brpl	.-8      	; 0x1718 <DIO_VoidSetPinValue+0x1e6>
    1720:	80 95       	com	r24
    1722:	84 23       	and	r24, r20
    1724:	8c 93       	st	X, r24
    1726:	17 c0       	rjmp	.+46     	; 0x1756 <DIO_VoidSetPinValue+0x224>
			break;
		case PORTD:
			CLR_BIT(PORTD_REG, (PIN % 8));
    1728:	a2 e3       	ldi	r26, 0x32	; 50
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	e2 e3       	ldi	r30, 0x32	; 50
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	48 2f       	mov	r20, r24
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	88 2f       	mov	r24, r24
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	9c 01       	movw	r18, r24
    173c:	27 70       	andi	r18, 0x07	; 7
    173e:	30 70       	andi	r19, 0x00	; 0
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	02 2e       	mov	r0, r18
    1746:	02 c0       	rjmp	.+4      	; 0x174c <DIO_VoidSetPinValue+0x21a>
    1748:	88 0f       	add	r24, r24
    174a:	99 1f       	adc	r25, r25
    174c:	0a 94       	dec	r0
    174e:	e2 f7       	brpl	.-8      	; 0x1748 <DIO_VoidSetPinValue+0x216>
    1750:	80 95       	com	r24
    1752:	84 23       	and	r24, r20
    1754:	8c 93       	st	X, r24
			break;
		}

	}

}
    1756:	26 96       	adiw	r28, 0x06	; 6
    1758:	0f b6       	in	r0, 0x3f	; 63
    175a:	f8 94       	cli
    175c:	de bf       	out	0x3e, r29	; 62
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	cd bf       	out	0x3d, r28	; 61
    1762:	cf 91       	pop	r28
    1764:	df 91       	pop	r29
    1766:	08 95       	ret

00001768 <DIO_VoidSetPortValue>:

void DIO_VoidSetPortValue(u8 PORT, u8 Value) {
    1768:	df 93       	push	r29
    176a:	cf 93       	push	r28
    176c:	00 d0       	rcall	.+0      	; 0x176e <DIO_VoidSetPortValue+0x6>
    176e:	00 d0       	rcall	.+0      	; 0x1770 <DIO_VoidSetPortValue+0x8>
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
    1774:	89 83       	std	Y+1, r24	; 0x01
    1776:	6a 83       	std	Y+2, r22	; 0x02
	switch (PORT) {
    1778:	89 81       	ldd	r24, Y+1	; 0x01
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	3c 83       	std	Y+4, r19	; 0x04
    1780:	2b 83       	std	Y+3, r18	; 0x03
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	9c 81       	ldd	r25, Y+4	; 0x04
    1786:	81 30       	cpi	r24, 0x01	; 1
    1788:	91 05       	cpc	r25, r1
    178a:	d1 f0       	breq	.+52     	; 0x17c0 <DIO_VoidSetPortValue+0x58>
    178c:	2b 81       	ldd	r18, Y+3	; 0x03
    178e:	3c 81       	ldd	r19, Y+4	; 0x04
    1790:	22 30       	cpi	r18, 0x02	; 2
    1792:	31 05       	cpc	r19, r1
    1794:	2c f4       	brge	.+10     	; 0x17a0 <DIO_VoidSetPortValue+0x38>
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	9c 81       	ldd	r25, Y+4	; 0x04
    179a:	00 97       	sbiw	r24, 0x00	; 0
    179c:	61 f0       	breq	.+24     	; 0x17b6 <DIO_VoidSetPortValue+0x4e>
    179e:	1e c0       	rjmp	.+60     	; 0x17dc <DIO_VoidSetPortValue+0x74>
    17a0:	2b 81       	ldd	r18, Y+3	; 0x03
    17a2:	3c 81       	ldd	r19, Y+4	; 0x04
    17a4:	22 30       	cpi	r18, 0x02	; 2
    17a6:	31 05       	cpc	r19, r1
    17a8:	81 f0       	breq	.+32     	; 0x17ca <DIO_VoidSetPortValue+0x62>
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
    17ac:	9c 81       	ldd	r25, Y+4	; 0x04
    17ae:	83 30       	cpi	r24, 0x03	; 3
    17b0:	91 05       	cpc	r25, r1
    17b2:	81 f0       	breq	.+32     	; 0x17d4 <DIO_VoidSetPortValue+0x6c>
    17b4:	13 c0       	rjmp	.+38     	; 0x17dc <DIO_VoidSetPortValue+0x74>
	case PORTA:
		PORTA_REG = Value;
    17b6:	eb e3       	ldi	r30, 0x3B	; 59
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	80 83       	st	Z, r24
    17be:	0e c0       	rjmp	.+28     	; 0x17dc <DIO_VoidSetPortValue+0x74>
		break;
	case PORTB:
		PORTB_REG = Value;
    17c0:	e8 e3       	ldi	r30, 0x38	; 56
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	8a 81       	ldd	r24, Y+2	; 0x02
    17c6:	80 83       	st	Z, r24
    17c8:	09 c0       	rjmp	.+18     	; 0x17dc <DIO_VoidSetPortValue+0x74>
		break;
	case PORTC:
		PORTC_REG = Value;
    17ca:	e5 e3       	ldi	r30, 0x35	; 53
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	8a 81       	ldd	r24, Y+2	; 0x02
    17d0:	80 83       	st	Z, r24
    17d2:	04 c0       	rjmp	.+8      	; 0x17dc <DIO_VoidSetPortValue+0x74>
		break;
	case PORTD:
		PORTD_REG = Value;
    17d4:	e2 e3       	ldi	r30, 0x32	; 50
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	8a 81       	ldd	r24, Y+2	; 0x02
    17da:	80 83       	st	Z, r24
		break;
	}
}
    17dc:	0f 90       	pop	r0
    17de:	0f 90       	pop	r0
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	cf 91       	pop	r28
    17e6:	df 91       	pop	r29
    17e8:	08 95       	ret

000017ea <DIO_VoidSetPortDirection>:

void DIO_VoidSetPortDirection(u8 PORT, u8 Value) {
    17ea:	df 93       	push	r29
    17ec:	cf 93       	push	r28
    17ee:	00 d0       	rcall	.+0      	; 0x17f0 <DIO_VoidSetPortDirection+0x6>
    17f0:	00 d0       	rcall	.+0      	; 0x17f2 <DIO_VoidSetPortDirection+0x8>
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
    17f6:	89 83       	std	Y+1, r24	; 0x01
    17f8:	6a 83       	std	Y+2, r22	; 0x02
	switch (PORT) {
    17fa:	89 81       	ldd	r24, Y+1	; 0x01
    17fc:	28 2f       	mov	r18, r24
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	3c 83       	std	Y+4, r19	; 0x04
    1802:	2b 83       	std	Y+3, r18	; 0x03
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	9c 81       	ldd	r25, Y+4	; 0x04
    1808:	81 30       	cpi	r24, 0x01	; 1
    180a:	91 05       	cpc	r25, r1
    180c:	d1 f0       	breq	.+52     	; 0x1842 <DIO_VoidSetPortDirection+0x58>
    180e:	2b 81       	ldd	r18, Y+3	; 0x03
    1810:	3c 81       	ldd	r19, Y+4	; 0x04
    1812:	22 30       	cpi	r18, 0x02	; 2
    1814:	31 05       	cpc	r19, r1
    1816:	2c f4       	brge	.+10     	; 0x1822 <DIO_VoidSetPortDirection+0x38>
    1818:	8b 81       	ldd	r24, Y+3	; 0x03
    181a:	9c 81       	ldd	r25, Y+4	; 0x04
    181c:	00 97       	sbiw	r24, 0x00	; 0
    181e:	61 f0       	breq	.+24     	; 0x1838 <DIO_VoidSetPortDirection+0x4e>
    1820:	1e c0       	rjmp	.+60     	; 0x185e <DIO_VoidSetPortDirection+0x74>
    1822:	2b 81       	ldd	r18, Y+3	; 0x03
    1824:	3c 81       	ldd	r19, Y+4	; 0x04
    1826:	22 30       	cpi	r18, 0x02	; 2
    1828:	31 05       	cpc	r19, r1
    182a:	81 f0       	breq	.+32     	; 0x184c <DIO_VoidSetPortDirection+0x62>
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	9c 81       	ldd	r25, Y+4	; 0x04
    1830:	83 30       	cpi	r24, 0x03	; 3
    1832:	91 05       	cpc	r25, r1
    1834:	81 f0       	breq	.+32     	; 0x1856 <DIO_VoidSetPortDirection+0x6c>
    1836:	13 c0       	rjmp	.+38     	; 0x185e <DIO_VoidSetPortDirection+0x74>
	case PORTA:
		DDRA_REG = Value;
    1838:	ea e3       	ldi	r30, 0x3A	; 58
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	80 83       	st	Z, r24
    1840:	0e c0       	rjmp	.+28     	; 0x185e <DIO_VoidSetPortDirection+0x74>
		break;
	case PORTB:
		DDRB_REG = Value;
    1842:	e7 e3       	ldi	r30, 0x37	; 55
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	80 83       	st	Z, r24
    184a:	09 c0       	rjmp	.+18     	; 0x185e <DIO_VoidSetPortDirection+0x74>
		break;
	case PORTC:
		DDRC_REG = Value;
    184c:	e4 e3       	ldi	r30, 0x34	; 52
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	80 83       	st	Z, r24
    1854:	04 c0       	rjmp	.+8      	; 0x185e <DIO_VoidSetPortDirection+0x74>
		break;
	case PORTD:
		DDRD_REG = Value;
    1856:	e1 e3       	ldi	r30, 0x31	; 49
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	80 83       	st	Z, r24
		break;
	}
}
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	cf 91       	pop	r28
    1868:	df 91       	pop	r29
    186a:	08 95       	ret

0000186c <DIO_U8GetPinValue>:

u8 DIO_U8GetPinValue(PIN_NUM PIN) {
    186c:	df 93       	push	r29
    186e:	cf 93       	push	r28
    1870:	00 d0       	rcall	.+0      	; 0x1872 <DIO_U8GetPinValue+0x6>
    1872:	00 d0       	rcall	.+0      	; 0x1874 <DIO_U8GetPinValue+0x8>
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
    1878:	8a 83       	std	Y+2, r24	; 0x02
	u8 value = 0;
    187a:	19 82       	std	Y+1, r1	; 0x01
	switch (PIN / 8) {
    187c:	8a 81       	ldd	r24, Y+2	; 0x02
    187e:	86 95       	lsr	r24
    1880:	86 95       	lsr	r24
    1882:	86 95       	lsr	r24
    1884:	28 2f       	mov	r18, r24
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	3c 83       	std	Y+4, r19	; 0x04
    188a:	2b 83       	std	Y+3, r18	; 0x03
    188c:	4b 81       	ldd	r20, Y+3	; 0x03
    188e:	5c 81       	ldd	r21, Y+4	; 0x04
    1890:	41 30       	cpi	r20, 0x01	; 1
    1892:	51 05       	cpc	r21, r1
    1894:	59 f1       	breq	.+86     	; 0x18ec <DIO_U8GetPinValue+0x80>
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	9c 81       	ldd	r25, Y+4	; 0x04
    189a:	82 30       	cpi	r24, 0x02	; 2
    189c:	91 05       	cpc	r25, r1
    189e:	34 f4       	brge	.+12     	; 0x18ac <DIO_U8GetPinValue+0x40>
    18a0:	2b 81       	ldd	r18, Y+3	; 0x03
    18a2:	3c 81       	ldd	r19, Y+4	; 0x04
    18a4:	21 15       	cp	r18, r1
    18a6:	31 05       	cpc	r19, r1
    18a8:	69 f0       	breq	.+26     	; 0x18c4 <DIO_U8GetPinValue+0x58>
    18aa:	5b c0       	rjmp	.+182    	; 0x1962 <DIO_U8GetPinValue+0xf6>
    18ac:	4b 81       	ldd	r20, Y+3	; 0x03
    18ae:	5c 81       	ldd	r21, Y+4	; 0x04
    18b0:	42 30       	cpi	r20, 0x02	; 2
    18b2:	51 05       	cpc	r21, r1
    18b4:	79 f1       	breq	.+94     	; 0x1914 <DIO_U8GetPinValue+0xa8>
    18b6:	8b 81       	ldd	r24, Y+3	; 0x03
    18b8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ba:	83 30       	cpi	r24, 0x03	; 3
    18bc:	91 05       	cpc	r25, r1
    18be:	09 f4       	brne	.+2      	; 0x18c2 <DIO_U8GetPinValue+0x56>
    18c0:	3d c0       	rjmp	.+122    	; 0x193c <DIO_U8GetPinValue+0xd0>
    18c2:	4f c0       	rjmp	.+158    	; 0x1962 <DIO_U8GetPinValue+0xf6>
	case PORTA:
		value = GET_BIT(PINA_REG, (PIN % 8));
    18c4:	e9 e3       	ldi	r30, 0x39	; 57
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	28 2f       	mov	r18, r24
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	8a 81       	ldd	r24, Y+2	; 0x02
    18d0:	88 2f       	mov	r24, r24
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	87 70       	andi	r24, 0x07	; 7
    18d6:	90 70       	andi	r25, 0x00	; 0
    18d8:	a9 01       	movw	r20, r18
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <DIO_U8GetPinValue+0x74>
    18dc:	55 95       	asr	r21
    18de:	47 95       	ror	r20
    18e0:	8a 95       	dec	r24
    18e2:	e2 f7       	brpl	.-8      	; 0x18dc <DIO_U8GetPinValue+0x70>
    18e4:	ca 01       	movw	r24, r20
    18e6:	81 70       	andi	r24, 0x01	; 1
    18e8:	89 83       	std	Y+1, r24	; 0x01
    18ea:	3b c0       	rjmp	.+118    	; 0x1962 <DIO_U8GetPinValue+0xf6>
		break;
	case PORTB:
		value = GET_BIT(PINB_REG, (PIN % 8));
    18ec:	e6 e3       	ldi	r30, 0x36	; 54
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	28 2f       	mov	r18, r24
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	8a 81       	ldd	r24, Y+2	; 0x02
    18f8:	88 2f       	mov	r24, r24
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	87 70       	andi	r24, 0x07	; 7
    18fe:	90 70       	andi	r25, 0x00	; 0
    1900:	a9 01       	movw	r20, r18
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <DIO_U8GetPinValue+0x9c>
    1904:	55 95       	asr	r21
    1906:	47 95       	ror	r20
    1908:	8a 95       	dec	r24
    190a:	e2 f7       	brpl	.-8      	; 0x1904 <DIO_U8GetPinValue+0x98>
    190c:	ca 01       	movw	r24, r20
    190e:	81 70       	andi	r24, 0x01	; 1
    1910:	89 83       	std	Y+1, r24	; 0x01
    1912:	27 c0       	rjmp	.+78     	; 0x1962 <DIO_U8GetPinValue+0xf6>
		break;
	case PORTC:
		value = GET_BIT(PINC_REG, (PIN % 8));
    1914:	e3 e3       	ldi	r30, 0x33	; 51
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	28 2f       	mov	r18, r24
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	8a 81       	ldd	r24, Y+2	; 0x02
    1920:	88 2f       	mov	r24, r24
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	87 70       	andi	r24, 0x07	; 7
    1926:	90 70       	andi	r25, 0x00	; 0
    1928:	a9 01       	movw	r20, r18
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <DIO_U8GetPinValue+0xc4>
    192c:	55 95       	asr	r21
    192e:	47 95       	ror	r20
    1930:	8a 95       	dec	r24
    1932:	e2 f7       	brpl	.-8      	; 0x192c <DIO_U8GetPinValue+0xc0>
    1934:	ca 01       	movw	r24, r20
    1936:	81 70       	andi	r24, 0x01	; 1
    1938:	89 83       	std	Y+1, r24	; 0x01
    193a:	13 c0       	rjmp	.+38     	; 0x1962 <DIO_U8GetPinValue+0xf6>
		break;
	case PORTD:
		value = GET_BIT(PIND_REG, (PIN % 8));
    193c:	e0 e3       	ldi	r30, 0x30	; 48
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	28 2f       	mov	r18, r24
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	8a 81       	ldd	r24, Y+2	; 0x02
    1948:	88 2f       	mov	r24, r24
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	87 70       	andi	r24, 0x07	; 7
    194e:	90 70       	andi	r25, 0x00	; 0
    1950:	a9 01       	movw	r20, r18
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <DIO_U8GetPinValue+0xec>
    1954:	55 95       	asr	r21
    1956:	47 95       	ror	r20
    1958:	8a 95       	dec	r24
    195a:	e2 f7       	brpl	.-8      	; 0x1954 <DIO_U8GetPinValue+0xe8>
    195c:	ca 01       	movw	r24, r20
    195e:	81 70       	andi	r24, 0x01	; 1
    1960:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return value;
    1962:	89 81       	ldd	r24, Y+1	; 0x01
}
    1964:	0f 90       	pop	r0
    1966:	0f 90       	pop	r0
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	08 95       	ret

00001972 <DIO_SetPin_PULLUP>:
void DIO_SetPin_PULLUP(PIN_NUM PIN)
{
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	00 d0       	rcall	.+0      	; 0x1978 <DIO_SetPin_PULLUP+0x6>
    1978:	0f 92       	push	r0
    197a:	cd b7       	in	r28, 0x3d	; 61
    197c:	de b7       	in	r29, 0x3e	; 62
    197e:	89 83       	std	Y+1, r24	; 0x01
	switch (PIN / 8)
    1980:	89 81       	ldd	r24, Y+1	; 0x01
    1982:	86 95       	lsr	r24
    1984:	86 95       	lsr	r24
    1986:	86 95       	lsr	r24
    1988:	28 2f       	mov	r18, r24
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	3b 83       	std	Y+3, r19	; 0x03
    198e:	2a 83       	std	Y+2, r18	; 0x02
    1990:	8a 81       	ldd	r24, Y+2	; 0x02
    1992:	9b 81       	ldd	r25, Y+3	; 0x03
    1994:	81 30       	cpi	r24, 0x01	; 1
    1996:	91 05       	cpc	r25, r1
    1998:	69 f1       	breq	.+90     	; 0x19f4 <DIO_SetPin_PULLUP+0x82>
    199a:	2a 81       	ldd	r18, Y+2	; 0x02
    199c:	3b 81       	ldd	r19, Y+3	; 0x03
    199e:	22 30       	cpi	r18, 0x02	; 2
    19a0:	31 05       	cpc	r19, r1
    19a2:	2c f4       	brge	.+10     	; 0x19ae <DIO_SetPin_PULLUP+0x3c>
    19a4:	8a 81       	ldd	r24, Y+2	; 0x02
    19a6:	9b 81       	ldd	r25, Y+3	; 0x03
    19a8:	00 97       	sbiw	r24, 0x00	; 0
    19aa:	69 f0       	breq	.+26     	; 0x19c6 <DIO_SetPin_PULLUP+0x54>
    19ac:	67 c0       	rjmp	.+206    	; 0x1a7c <DIO_SetPin_PULLUP+0x10a>
    19ae:	2a 81       	ldd	r18, Y+2	; 0x02
    19b0:	3b 81       	ldd	r19, Y+3	; 0x03
    19b2:	22 30       	cpi	r18, 0x02	; 2
    19b4:	31 05       	cpc	r19, r1
    19b6:	a9 f1       	breq	.+106    	; 0x1a22 <DIO_SetPin_PULLUP+0xb0>
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	9b 81       	ldd	r25, Y+3	; 0x03
    19bc:	83 30       	cpi	r24, 0x03	; 3
    19be:	91 05       	cpc	r25, r1
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <DIO_SetPin_PULLUP+0x52>
    19c2:	46 c0       	rjmp	.+140    	; 0x1a50 <DIO_SetPin_PULLUP+0xde>
    19c4:	5b c0       	rjmp	.+182    	; 0x1a7c <DIO_SetPin_PULLUP+0x10a>
	{
	case PORTA:
		SET_BIT(PORTA_REG, (PIN % 8));
    19c6:	ab e3       	ldi	r26, 0x3B	; 59
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	eb e3       	ldi	r30, 0x3B	; 59
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	48 2f       	mov	r20, r24
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	88 2f       	mov	r24, r24
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	9c 01       	movw	r18, r24
    19da:	27 70       	andi	r18, 0x07	; 7
    19dc:	30 70       	andi	r19, 0x00	; 0
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	02 2e       	mov	r0, r18
    19e4:	02 c0       	rjmp	.+4      	; 0x19ea <DIO_SetPin_PULLUP+0x78>
    19e6:	88 0f       	add	r24, r24
    19e8:	99 1f       	adc	r25, r25
    19ea:	0a 94       	dec	r0
    19ec:	e2 f7       	brpl	.-8      	; 0x19e6 <DIO_SetPin_PULLUP+0x74>
    19ee:	84 2b       	or	r24, r20
    19f0:	8c 93       	st	X, r24
    19f2:	44 c0       	rjmp	.+136    	; 0x1a7c <DIO_SetPin_PULLUP+0x10a>
		break;
	case PORTB:
		SET_BIT(PORTB_REG, (PIN % 8));
    19f4:	a8 e3       	ldi	r26, 0x38	; 56
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	e8 e3       	ldi	r30, 0x38	; 56
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	48 2f       	mov	r20, r24
    1a00:	89 81       	ldd	r24, Y+1	; 0x01
    1a02:	88 2f       	mov	r24, r24
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	9c 01       	movw	r18, r24
    1a08:	27 70       	andi	r18, 0x07	; 7
    1a0a:	30 70       	andi	r19, 0x00	; 0
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	02 2e       	mov	r0, r18
    1a12:	02 c0       	rjmp	.+4      	; 0x1a18 <DIO_SetPin_PULLUP+0xa6>
    1a14:	88 0f       	add	r24, r24
    1a16:	99 1f       	adc	r25, r25
    1a18:	0a 94       	dec	r0
    1a1a:	e2 f7       	brpl	.-8      	; 0x1a14 <DIO_SetPin_PULLUP+0xa2>
    1a1c:	84 2b       	or	r24, r20
    1a1e:	8c 93       	st	X, r24
    1a20:	2d c0       	rjmp	.+90     	; 0x1a7c <DIO_SetPin_PULLUP+0x10a>
		break;
	case PORTC:
		SET_BIT(PORTC_REG, (PIN % 8));
    1a22:	a5 e3       	ldi	r26, 0x35	; 53
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	e5 e3       	ldi	r30, 0x35	; 53
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	48 2f       	mov	r20, r24
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
    1a30:	88 2f       	mov	r24, r24
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	9c 01       	movw	r18, r24
    1a36:	27 70       	andi	r18, 0x07	; 7
    1a38:	30 70       	andi	r19, 0x00	; 0
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	02 2e       	mov	r0, r18
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <DIO_SetPin_PULLUP+0xd4>
    1a42:	88 0f       	add	r24, r24
    1a44:	99 1f       	adc	r25, r25
    1a46:	0a 94       	dec	r0
    1a48:	e2 f7       	brpl	.-8      	; 0x1a42 <DIO_SetPin_PULLUP+0xd0>
    1a4a:	84 2b       	or	r24, r20
    1a4c:	8c 93       	st	X, r24
    1a4e:	16 c0       	rjmp	.+44     	; 0x1a7c <DIO_SetPin_PULLUP+0x10a>
		break;
	case PORTD:
		SET_BIT(PORTD_REG, (PIN % 8));
    1a50:	a2 e3       	ldi	r26, 0x32	; 50
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	e2 e3       	ldi	r30, 0x32	; 50
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	48 2f       	mov	r20, r24
    1a5c:	89 81       	ldd	r24, Y+1	; 0x01
    1a5e:	88 2f       	mov	r24, r24
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	9c 01       	movw	r18, r24
    1a64:	27 70       	andi	r18, 0x07	; 7
    1a66:	30 70       	andi	r19, 0x00	; 0
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	02 2e       	mov	r0, r18
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <DIO_SetPin_PULLUP+0x102>
    1a70:	88 0f       	add	r24, r24
    1a72:	99 1f       	adc	r25, r25
    1a74:	0a 94       	dec	r0
    1a76:	e2 f7       	brpl	.-8      	; 0x1a70 <DIO_SetPin_PULLUP+0xfe>
    1a78:	84 2b       	or	r24, r20
    1a7a:	8c 93       	st	X, r24
		break;
	}
}
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	0f 90       	pop	r0
    1a82:	cf 91       	pop	r28
    1a84:	df 91       	pop	r29
    1a86:	08 95       	ret

00001a88 <ADC_INIT>:
#include "avr/io.h"
#include<util/delay.h>

void (*ADC_f)(void)=NULL;

void ADC_INIT(Voltage_Reference Voltage_Selection) {
    1a88:	df 93       	push	r29
    1a8a:	cf 93       	push	r28
    1a8c:	00 d0       	rcall	.+0      	; 0x1a8e <ADC_INIT+0x6>
    1a8e:	0f 92       	push	r0
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
    1a94:	89 83       	std	Y+1, r24	; 0x01
    switch (Voltage_Selection) {
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
    1a98:	28 2f       	mov	r18, r24
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	3b 83       	std	Y+3, r19	; 0x03
    1a9e:	2a 83       	std	Y+2, r18	; 0x02
    1aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa2:	9b 81       	ldd	r25, Y+3	; 0x03
    1aa4:	81 30       	cpi	r24, 0x01	; 1
    1aa6:	91 05       	cpc	r25, r1
    1aa8:	21 f1       	breq	.+72     	; 0x1af2 <ADC_INIT+0x6a>
    1aaa:	2a 81       	ldd	r18, Y+2	; 0x02
    1aac:	3b 81       	ldd	r19, Y+3	; 0x03
    1aae:	22 30       	cpi	r18, 0x02	; 2
    1ab0:	31 05       	cpc	r19, r1
    1ab2:	2c f4       	brge	.+10     	; 0x1abe <ADC_INIT+0x36>
    1ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ab8:	00 97       	sbiw	r24, 0x00	; 0
    1aba:	61 f0       	breq	.+24     	; 0x1ad4 <ADC_INIT+0x4c>
    1abc:	46 c0       	rjmp	.+140    	; 0x1b4a <ADC_INIT+0xc2>
    1abe:	2a 81       	ldd	r18, Y+2	; 0x02
    1ac0:	3b 81       	ldd	r19, Y+3	; 0x03
    1ac2:	22 30       	cpi	r18, 0x02	; 2
    1ac4:	31 05       	cpc	r19, r1
    1ac6:	21 f1       	breq	.+72     	; 0x1b10 <ADC_INIT+0x88>
    1ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aca:	9b 81       	ldd	r25, Y+3	; 0x03
    1acc:	83 30       	cpi	r24, 0x03	; 3
    1ace:	91 05       	cpc	r25, r1
    1ad0:	71 f1       	breq	.+92     	; 0x1b2e <ADC_INIT+0xa6>
    1ad2:	3b c0       	rjmp	.+118    	; 0x1b4a <ADC_INIT+0xc2>
        case Internal_Vref_turned_off:
            CLR_BIT(ADMUX, REFS0);
    1ad4:	a7 e2       	ldi	r26, 0x27	; 39
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	e7 e2       	ldi	r30, 0x27	; 39
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	8f 7b       	andi	r24, 0xBF	; 191
    1ae0:	8c 93       	st	X, r24
            CLR_BIT(ADMUX, REFS1);
    1ae2:	a7 e2       	ldi	r26, 0x27	; 39
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	e7 e2       	ldi	r30, 0x27	; 39
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	8f 77       	andi	r24, 0x7F	; 127
    1aee:	8c 93       	st	X, r24
    1af0:	2c c0       	rjmp	.+88     	; 0x1b4a <ADC_INIT+0xc2>
            break;
        case AVCC:
            SET_BIT(ADMUX, REFS0);
    1af2:	a7 e2       	ldi	r26, 0x27	; 39
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	e7 e2       	ldi	r30, 0x27	; 39
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	80 64       	ori	r24, 0x40	; 64
    1afe:	8c 93       	st	X, r24
            CLR_BIT(ADMUX, REFS1);
    1b00:	a7 e2       	ldi	r26, 0x27	; 39
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e7 e2       	ldi	r30, 0x27	; 39
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	8f 77       	andi	r24, 0x7F	; 127
    1b0c:	8c 93       	st	X, r24
    1b0e:	1d c0       	rjmp	.+58     	; 0x1b4a <ADC_INIT+0xc2>
            break;
        case Res:
            CLR_BIT(ADMUX, REFS0);
    1b10:	a7 e2       	ldi	r26, 0x27	; 39
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	e7 e2       	ldi	r30, 0x27	; 39
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	8f 7b       	andi	r24, 0xBF	; 191
    1b1c:	8c 93       	st	X, r24
            SET_BIT(ADMUX, REFS1);
    1b1e:	a7 e2       	ldi	r26, 0x27	; 39
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	e7 e2       	ldi	r30, 0x27	; 39
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	80 68       	ori	r24, 0x80	; 128
    1b2a:	8c 93       	st	X, r24
    1b2c:	0e c0       	rjmp	.+28     	; 0x1b4a <ADC_INIT+0xc2>
            break;
        case Internal_Voltage_Reference:
            SET_BIT(ADMUX, REFS0);
    1b2e:	a7 e2       	ldi	r26, 0x27	; 39
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	e7 e2       	ldi	r30, 0x27	; 39
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	80 64       	ori	r24, 0x40	; 64
    1b3a:	8c 93       	st	X, r24
            SET_BIT(ADMUX, REFS1);
    1b3c:	a7 e2       	ldi	r26, 0x27	; 39
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	e7 e2       	ldi	r30, 0x27	; 39
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	80 68       	ori	r24, 0x80	; 128
    1b48:	8c 93       	st	X, r24
            break;
    }
    SET_BIT(ADCSRA, ADPS2); // select the prescaler
    1b4a:	a6 e2       	ldi	r26, 0x26	; 38
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	e6 e2       	ldi	r30, 0x26	; 38
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	84 60       	ori	r24, 0x04	; 4
    1b56:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADPS1);
    1b58:	a6 e2       	ldi	r26, 0x26	; 38
    1b5a:	b0 e0       	ldi	r27, 0x00	; 0
    1b5c:	e6 e2       	ldi	r30, 0x26	; 38
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	82 60       	ori	r24, 0x02	; 2
    1b64:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADPS0);
    1b66:	a6 e2       	ldi	r26, 0x26	; 38
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	e6 e2       	ldi	r30, 0x26	; 38
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	81 60       	ori	r24, 0x01	; 1
    1b72:	8c 93       	st	X, r24
    CLR_BIT(ADMUX, ADLAR);
    1b74:	a7 e2       	ldi	r26, 0x27	; 39
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	e7 e2       	ldi	r30, 0x27	; 39
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	8f 7d       	andi	r24, 0xDF	; 223
    1b80:	8c 93       	st	X, r24
    CLR_BIT(ADCSRA, ADATE);
    1b82:	a6 e2       	ldi	r26, 0x26	; 38
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	e6 e2       	ldi	r30, 0x26	; 38
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	80 81       	ld	r24, Z
    1b8c:	8f 7d       	andi	r24, 0xDF	; 223
    1b8e:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADIE); // enable ADC interrupt
    1b90:	a6 e2       	ldi	r26, 0x26	; 38
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	e6 e2       	ldi	r30, 0x26	; 38
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	88 60       	ori	r24, 0x08	; 8
    1b9c:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADEN); // enable the ADC
    1b9e:	a6 e2       	ldi	r26, 0x26	; 38
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	e6 e2       	ldi	r30, 0x26	; 38
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	80 68       	ori	r24, 0x80	; 128
    1baa:	8c 93       	st	X, r24
}
    1bac:	0f 90       	pop	r0
    1bae:	0f 90       	pop	r0
    1bb0:	0f 90       	pop	r0
    1bb2:	cf 91       	pop	r28
    1bb4:	df 91       	pop	r29
    1bb6:	08 95       	ret

00001bb8 <start_ADC_conversion>:

void start_ADC_conversion(ADC_channel channel) {
    1bb8:	df 93       	push	r29
    1bba:	cf 93       	push	r28
    1bbc:	0f 92       	push	r0
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
    1bc2:	89 83       	std	Y+1, r24	; 0x01
    ADMUX = (ADMUX & 0xE0) | channel; // Masking and then select the input pin
    1bc4:	a7 e2       	ldi	r26, 0x27	; 39
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	e7 e2       	ldi	r30, 0x27	; 39
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	98 2f       	mov	r25, r24
    1bd0:	90 7e       	andi	r25, 0xE0	; 224
    1bd2:	89 81       	ldd	r24, Y+1	; 0x01
    1bd4:	89 2b       	or	r24, r25
    1bd6:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADSC); // ADC Start Conversion
    1bd8:	a6 e2       	ldi	r26, 0x26	; 38
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	e6 e2       	ldi	r30, 0x26	; 38
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	80 64       	ori	r24, 0x40	; 64
    1be4:	8c 93       	st	X, r24
}
    1be6:	0f 90       	pop	r0
    1be8:	cf 91       	pop	r28
    1bea:	df 91       	pop	r29
    1bec:	08 95       	ret

00001bee <__vector_16>:

void __vector_16(void) {
    1bee:	1f 92       	push	r1
    1bf0:	0f 92       	push	r0
    1bf2:	0f b6       	in	r0, 0x3f	; 63
    1bf4:	0f 92       	push	r0
    1bf6:	11 24       	eor	r1, r1
    1bf8:	2f 93       	push	r18
    1bfa:	3f 93       	push	r19
    1bfc:	4f 93       	push	r20
    1bfe:	5f 93       	push	r21
    1c00:	6f 93       	push	r22
    1c02:	7f 93       	push	r23
    1c04:	8f 93       	push	r24
    1c06:	9f 93       	push	r25
    1c08:	af 93       	push	r26
    1c0a:	bf 93       	push	r27
    1c0c:	ef 93       	push	r30
    1c0e:	ff 93       	push	r31
    1c10:	df 93       	push	r29
    1c12:	cf 93       	push	r28
    1c14:	cd b7       	in	r28, 0x3d	; 61
    1c16:	de b7       	in	r29, 0x3e	; 62
    if (ADC_f != NULL) {
    1c18:	80 91 dd 00 	lds	r24, 0x00DD
    1c1c:	90 91 de 00 	lds	r25, 0x00DE
    1c20:	00 97       	sbiw	r24, 0x00	; 0
    1c22:	29 f0       	breq	.+10     	; 0x1c2e <__vector_16+0x40>
        ADC_f();
    1c24:	e0 91 dd 00 	lds	r30, 0x00DD
    1c28:	f0 91 de 00 	lds	r31, 0x00DE
    1c2c:	09 95       	icall
    }
    SET_BIT(ADCSRA, ADIF); // Clear the interrupt flag
    1c2e:	a6 e2       	ldi	r26, 0x26	; 38
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e6 e2       	ldi	r30, 0x26	; 38
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	80 61       	ori	r24, 0x10	; 16
    1c3a:	8c 93       	st	X, r24
}
    1c3c:	cf 91       	pop	r28
    1c3e:	df 91       	pop	r29
    1c40:	ff 91       	pop	r31
    1c42:	ef 91       	pop	r30
    1c44:	bf 91       	pop	r27
    1c46:	af 91       	pop	r26
    1c48:	9f 91       	pop	r25
    1c4a:	8f 91       	pop	r24
    1c4c:	7f 91       	pop	r23
    1c4e:	6f 91       	pop	r22
    1c50:	5f 91       	pop	r21
    1c52:	4f 91       	pop	r20
    1c54:	3f 91       	pop	r19
    1c56:	2f 91       	pop	r18
    1c58:	0f 90       	pop	r0
    1c5a:	0f be       	out	0x3f, r0	; 63
    1c5c:	0f 90       	pop	r0
    1c5e:	1f 90       	pop	r1
    1c60:	18 95       	reti

00001c62 <ADC_VoidCallBack>:

void ADC_VoidCallBack(void (*Ptr_f)(void)) {
    1c62:	df 93       	push	r29
    1c64:	cf 93       	push	r28
    1c66:	00 d0       	rcall	.+0      	; 0x1c68 <ADC_VoidCallBack+0x6>
    1c68:	cd b7       	in	r28, 0x3d	; 61
    1c6a:	de b7       	in	r29, 0x3e	; 62
    1c6c:	9a 83       	std	Y+2, r25	; 0x02
    1c6e:	89 83       	std	Y+1, r24	; 0x01
    ADC_f = Ptr_f;
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
    1c72:	9a 81       	ldd	r25, Y+2	; 0x02
    1c74:	90 93 de 00 	sts	0x00DE, r25
    1c78:	80 93 dd 00 	sts	0x00DD, r24
}
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	cf 91       	pop	r28
    1c82:	df 91       	pop	r29
    1c84:	08 95       	ret

00001c86 <LCD_VoidLatch>:
    0b00100,
    0b00000,
    0b00000
};

static void LCD_VoidLatch(u8 Copy_byte) {
    1c86:	df 93       	push	r29
    1c88:	cf 93       	push	r28
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
    1c8e:	6d 97       	sbiw	r28, 0x1d	; 29
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	de bf       	out	0x3e, r29	; 62
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	cd bf       	out	0x3d, r28	; 61
    1c9a:	8d 8f       	std	Y+29, r24	; 0x1d
#elif LCD_MODE == LCD_4_bit
//	DIO_VoidSetPinValue(D7,GET_BIT(Copy_byte,7));
//	DIO_VoidSetPinValue(D6,GET_BIT(Copy_byte,6));
//	DIO_VoidSetPinValue(D5,GET_BIT(Copy_byte,5));
//	DIO_VoidSetPinValue(D4,GET_BIT(Copy_byte,4));
	PORTD_REG = (PORTD_REG & 0x0F) | ((Copy_byte) & 0xF0);
    1c9c:	a2 e3       	ldi	r26, 0x32	; 50
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	e2 e3       	ldi	r30, 0x32	; 50
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	98 2f       	mov	r25, r24
    1ca8:	9f 70       	andi	r25, 0x0F	; 15
    1caa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cac:	80 7f       	andi	r24, 0xF0	; 240
    1cae:	89 2b       	or	r24, r25
    1cb0:	8c 93       	st	X, r24
	DIO_VoidSetPinValue(En, DIO_HIGH);
    1cb2:	8b e0       	ldi	r24, 0x0B	; 11
    1cb4:	61 e0       	ldi	r22, 0x01	; 1
    1cb6:	0e 94 99 0a 	call	0x1532	; 0x1532 <DIO_VoidSetPinValue>
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	a0 e8       	ldi	r26, 0x80	; 128
    1cc0:	bf e3       	ldi	r27, 0x3F	; 63
    1cc2:	89 8f       	std	Y+25, r24	; 0x19
    1cc4:	9a 8f       	std	Y+26, r25	; 0x1a
    1cc6:	ab 8f       	std	Y+27, r26	; 0x1b
    1cc8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cca:	69 8d       	ldd	r22, Y+25	; 0x19
    1ccc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	4a e7       	ldi	r20, 0x7A	; 122
    1cd8:	55 e4       	ldi	r21, 0x45	; 69
    1cda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cde:	dc 01       	movw	r26, r24
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	8d 8b       	std	Y+21, r24	; 0x15
    1ce4:	9e 8b       	std	Y+22, r25	; 0x16
    1ce6:	af 8b       	std	Y+23, r26	; 0x17
    1ce8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cea:	6d 89       	ldd	r22, Y+21	; 0x15
    1cec:	7e 89       	ldd	r23, Y+22	; 0x16
    1cee:	8f 89       	ldd	r24, Y+23	; 0x17
    1cf0:	98 8d       	ldd	r25, Y+24	; 0x18
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	40 e8       	ldi	r20, 0x80	; 128
    1cf8:	5f e3       	ldi	r21, 0x3F	; 63
    1cfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cfe:	88 23       	and	r24, r24
    1d00:	2c f4       	brge	.+10     	; 0x1d0c <LCD_VoidLatch+0x86>
		__ticks = 1;
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	9c 8b       	std	Y+20, r25	; 0x14
    1d08:	8b 8b       	std	Y+19, r24	; 0x13
    1d0a:	3f c0       	rjmp	.+126    	; 0x1d8a <LCD_VoidLatch+0x104>
	else if (__tmp > 65535)
    1d0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d10:	8f 89       	ldd	r24, Y+23	; 0x17
    1d12:	98 8d       	ldd	r25, Y+24	; 0x18
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	3f ef       	ldi	r19, 0xFF	; 255
    1d18:	4f e7       	ldi	r20, 0x7F	; 127
    1d1a:	57 e4       	ldi	r21, 0x47	; 71
    1d1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d20:	18 16       	cp	r1, r24
    1d22:	4c f5       	brge	.+82     	; 0x1d76 <LCD_VoidLatch+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d24:	69 8d       	ldd	r22, Y+25	; 0x19
    1d26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	40 e2       	ldi	r20, 0x20	; 32
    1d32:	51 e4       	ldi	r21, 0x41	; 65
    1d34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	bc 01       	movw	r22, r24
    1d3e:	cd 01       	movw	r24, r26
    1d40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	9c 8b       	std	Y+20, r25	; 0x14
    1d4a:	8b 8b       	std	Y+19, r24	; 0x13
    1d4c:	0f c0       	rjmp	.+30     	; 0x1d6c <LCD_VoidLatch+0xe6>
    1d4e:	80 e9       	ldi	r24, 0x90	; 144
    1d50:	91 e0       	ldi	r25, 0x01	; 1
    1d52:	9a 8b       	std	Y+18, r25	; 0x12
    1d54:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d56:	89 89       	ldd	r24, Y+17	; 0x11
    1d58:	9a 89       	ldd	r25, Y+18	; 0x12
    1d5a:	01 97       	sbiw	r24, 0x01	; 1
    1d5c:	f1 f7       	brne	.-4      	; 0x1d5a <LCD_VoidLatch+0xd4>
    1d5e:	9a 8b       	std	Y+18, r25	; 0x12
    1d60:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d62:	8b 89       	ldd	r24, Y+19	; 0x13
    1d64:	9c 89       	ldd	r25, Y+20	; 0x14
    1d66:	01 97       	sbiw	r24, 0x01	; 1
    1d68:	9c 8b       	std	Y+20, r25	; 0x14
    1d6a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d6c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d6e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d70:	00 97       	sbiw	r24, 0x00	; 0
    1d72:	69 f7       	brne	.-38     	; 0x1d4e <LCD_VoidLatch+0xc8>
    1d74:	14 c0       	rjmp	.+40     	; 0x1d9e <LCD_VoidLatch+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d76:	6d 89       	ldd	r22, Y+21	; 0x15
    1d78:	7e 89       	ldd	r23, Y+22	; 0x16
    1d7a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d7c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d82:	dc 01       	movw	r26, r24
    1d84:	cb 01       	movw	r24, r22
    1d86:	9c 8b       	std	Y+20, r25	; 0x14
    1d88:	8b 8b       	std	Y+19, r24	; 0x13
    1d8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d8e:	98 8b       	std	Y+16, r25	; 0x10
    1d90:	8f 87       	std	Y+15, r24	; 0x0f
    1d92:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d94:	98 89       	ldd	r25, Y+16	; 0x10
    1d96:	01 97       	sbiw	r24, 0x01	; 1
    1d98:	f1 f7       	brne	.-4      	; 0x1d96 <LCD_VoidLatch+0x110>
    1d9a:	98 8b       	std	Y+16, r25	; 0x10
    1d9c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VoidSetPinValue(En, DIO_LOW);
    1d9e:	8b e0       	ldi	r24, 0x0B	; 11
    1da0:	60 e0       	ldi	r22, 0x00	; 0
    1da2:	0e 94 99 0a 	call	0x1532	; 0x1532 <DIO_VoidSetPinValue>
//	DIO_VoidSetPinValue(D7,GET_BIT(Copy_byte,3));
//	DIO_VoidSetPinValue(D6,GET_BIT(Copy_byte,2));
//	DIO_VoidSetPinValue(D5,GET_BIT(Copy_byte,1));
//	DIO_VoidSetPinValue(D4,GET_BIT(Copy_byte,0));
	PORTD_REG = (PORTD_REG & 0x0F) | ((Copy_byte & 0x0F) << 4);
    1da6:	a2 e3       	ldi	r26, 0x32	; 50
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	e2 e3       	ldi	r30, 0x32	; 50
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	28 2f       	mov	r18, r24
    1db2:	2f 70       	andi	r18, 0x0F	; 15
    1db4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1db6:	88 2f       	mov	r24, r24
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	82 95       	swap	r24
    1dbc:	92 95       	swap	r25
    1dbe:	90 7f       	andi	r25, 0xF0	; 240
    1dc0:	98 27       	eor	r25, r24
    1dc2:	80 7f       	andi	r24, 0xF0	; 240
    1dc4:	98 27       	eor	r25, r24
    1dc6:	82 2b       	or	r24, r18
    1dc8:	8c 93       	st	X, r24
	DIO_VoidSetPinValue(En, DIO_HIGH);
    1dca:	8b e0       	ldi	r24, 0x0B	; 11
    1dcc:	61 e0       	ldi	r22, 0x01	; 1
    1dce:	0e 94 99 0a 	call	0x1532	; 0x1532 <DIO_VoidSetPinValue>
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	a0 e8       	ldi	r26, 0x80	; 128
    1dd8:	bf e3       	ldi	r27, 0x3F	; 63
    1dda:	8b 87       	std	Y+11, r24	; 0x0b
    1ddc:	9c 87       	std	Y+12, r25	; 0x0c
    1dde:	ad 87       	std	Y+13, r26	; 0x0d
    1de0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1de4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1de6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1de8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	4a e7       	ldi	r20, 0x7A	; 122
    1df0:	55 e4       	ldi	r21, 0x45	; 69
    1df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	8f 83       	std	Y+7, r24	; 0x07
    1dfc:	98 87       	std	Y+8, r25	; 0x08
    1dfe:	a9 87       	std	Y+9, r26	; 0x09
    1e00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e02:	6f 81       	ldd	r22, Y+7	; 0x07
    1e04:	78 85       	ldd	r23, Y+8	; 0x08
    1e06:	89 85       	ldd	r24, Y+9	; 0x09
    1e08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	40 e8       	ldi	r20, 0x80	; 128
    1e10:	5f e3       	ldi	r21, 0x3F	; 63
    1e12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e16:	88 23       	and	r24, r24
    1e18:	2c f4       	brge	.+10     	; 0x1e24 <LCD_VoidLatch+0x19e>
		__ticks = 1;
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	9e 83       	std	Y+6, r25	; 0x06
    1e20:	8d 83       	std	Y+5, r24	; 0x05
    1e22:	3f c0       	rjmp	.+126    	; 0x1ea2 <LCD_VoidLatch+0x21c>
	else if (__tmp > 65535)
    1e24:	6f 81       	ldd	r22, Y+7	; 0x07
    1e26:	78 85       	ldd	r23, Y+8	; 0x08
    1e28:	89 85       	ldd	r24, Y+9	; 0x09
    1e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	3f ef       	ldi	r19, 0xFF	; 255
    1e30:	4f e7       	ldi	r20, 0x7F	; 127
    1e32:	57 e4       	ldi	r21, 0x47	; 71
    1e34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e38:	18 16       	cp	r1, r24
    1e3a:	4c f5       	brge	.+82     	; 0x1e8e <LCD_VoidLatch+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	40 e2       	ldi	r20, 0x20	; 32
    1e4a:	51 e4       	ldi	r21, 0x41	; 65
    1e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	bc 01       	movw	r22, r24
    1e56:	cd 01       	movw	r24, r26
    1e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	9e 83       	std	Y+6, r25	; 0x06
    1e62:	8d 83       	std	Y+5, r24	; 0x05
    1e64:	0f c0       	rjmp	.+30     	; 0x1e84 <LCD_VoidLatch+0x1fe>
    1e66:	80 e9       	ldi	r24, 0x90	; 144
    1e68:	91 e0       	ldi	r25, 0x01	; 1
    1e6a:	9c 83       	std	Y+4, r25	; 0x04
    1e6c:	8b 83       	std	Y+3, r24	; 0x03
    1e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e70:	9c 81       	ldd	r25, Y+4	; 0x04
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	f1 f7       	brne	.-4      	; 0x1e72 <LCD_VoidLatch+0x1ec>
    1e76:	9c 83       	std	Y+4, r25	; 0x04
    1e78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	9e 83       	std	Y+6, r25	; 0x06
    1e82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e84:	8d 81       	ldd	r24, Y+5	; 0x05
    1e86:	9e 81       	ldd	r25, Y+6	; 0x06
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	69 f7       	brne	.-38     	; 0x1e66 <LCD_VoidLatch+0x1e0>
    1e8c:	14 c0       	rjmp	.+40     	; 0x1eb6 <LCD_VoidLatch+0x230>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e90:	78 85       	ldd	r23, Y+8	; 0x08
    1e92:	89 85       	ldd	r24, Y+9	; 0x09
    1e94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	9e 83       	std	Y+6, r25	; 0x06
    1ea0:	8d 83       	std	Y+5, r24	; 0x05
    1ea2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea6:	9a 83       	std	Y+2, r25	; 0x02
    1ea8:	89 83       	std	Y+1, r24	; 0x01
    1eaa:	89 81       	ldd	r24, Y+1	; 0x01
    1eac:	9a 81       	ldd	r25, Y+2	; 0x02
    1eae:	01 97       	sbiw	r24, 0x01	; 1
    1eb0:	f1 f7       	brne	.-4      	; 0x1eae <LCD_VoidLatch+0x228>
    1eb2:	9a 83       	std	Y+2, r25	; 0x02
    1eb4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_VoidSetPinValue(En, DIO_LOW);
    1eb6:	8b e0       	ldi	r24, 0x0B	; 11
    1eb8:	60 e0       	ldi	r22, 0x00	; 0
    1eba:	0e 94 99 0a 	call	0x1532	; 0x1532 <DIO_VoidSetPinValue>
#endif
}
    1ebe:	6d 96       	adiw	r28, 0x1d	; 29
    1ec0:	0f b6       	in	r0, 0x3f	; 63
    1ec2:	f8 94       	cli
    1ec4:	de bf       	out	0x3e, r29	; 62
    1ec6:	0f be       	out	0x3f, r0	; 63
    1ec8:	cd bf       	out	0x3d, r28	; 61
    1eca:	cf 91       	pop	r28
    1ecc:	df 91       	pop	r29
    1ece:	08 95       	ret

00001ed0 <LCD_VoidWriteInst>:

static void LCD_VoidWriteInst(u8 ins) {
    1ed0:	df 93       	push	r29
    1ed2:	cf 93       	push	r28
    1ed4:	0f 92       	push	r0
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
    1eda:	89 83       	std	Y+1, r24	; 0x01
	DIO_VoidSetPinValue(RS, DIO_LOW);
    1edc:	89 e0       	ldi	r24, 0x09	; 9
    1ede:	60 e0       	ldi	r22, 0x00	; 0
    1ee0:	0e 94 99 0a 	call	0x1532	; 0x1532 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(RW, DIO_LOW);
    1ee4:	8a e0       	ldi	r24, 0x0A	; 10
    1ee6:	60 e0       	ldi	r22, 0x00	; 0
    1ee8:	0e 94 99 0a 	call	0x1532	; 0x1532 <DIO_VoidSetPinValue>
	LCD_VoidLatch(ins);
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
    1eee:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <LCD_VoidLatch>

}
    1ef2:	0f 90       	pop	r0
    1ef4:	cf 91       	pop	r28
    1ef6:	df 91       	pop	r29
    1ef8:	08 95       	ret

00001efa <LCD_VoidInit>:
void LCD_VoidInit(void) {
    1efa:	df 93       	push	r29
    1efc:	cf 93       	push	r28
    1efe:	cd b7       	in	r28, 0x3d	; 61
    1f00:	de b7       	in	r29, 0x3e	; 62
    1f02:	e8 97       	sbiw	r28, 0x38	; 56
    1f04:	0f b6       	in	r0, 0x3f	; 63
    1f06:	f8 94       	cli
    1f08:	de bf       	out	0x3e, r29	; 62
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	cd bf       	out	0x3d, r28	; 61
	DIO_VoidSetPinDirection(En, OUTPUT);
    1f0e:	8b e0       	ldi	r24, 0x0B	; 11
    1f10:	61 e0       	ldi	r22, 0x01	; 1
    1f12:	0e 94 7e 09 	call	0x12fc	; 0x12fc <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(RS, OUTPUT);
    1f16:	89 e0       	ldi	r24, 0x09	; 9
    1f18:	61 e0       	ldi	r22, 0x01	; 1
    1f1a:	0e 94 7e 09 	call	0x12fc	; 0x12fc <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(RW, OUTPUT);
    1f1e:	8a e0       	ldi	r24, 0x0A	; 10
    1f20:	61 e0       	ldi	r22, 0x01	; 1
    1f22:	0e 94 7e 09 	call	0x12fc	; 0x12fc <DIO_VoidSetPinDirection>
	_delay_ms(1);
	LCD_VoidWriteInst(0x01);
	_delay_ms(2);
	LCD_VoidWriteInst(0x06);
#elif LCD_MODE == LCD_4_bit
	DIO_VoidSetPinDirection(D4, OUTPUT);
    1f26:	8c e1       	ldi	r24, 0x1C	; 28
    1f28:	61 e0       	ldi	r22, 0x01	; 1
    1f2a:	0e 94 7e 09 	call	0x12fc	; 0x12fc <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(D5, OUTPUT);
    1f2e:	8d e1       	ldi	r24, 0x1D	; 29
    1f30:	61 e0       	ldi	r22, 0x01	; 1
    1f32:	0e 94 7e 09 	call	0x12fc	; 0x12fc <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(D6, OUTPUT);
    1f36:	8e e1       	ldi	r24, 0x1E	; 30
    1f38:	61 e0       	ldi	r22, 0x01	; 1
    1f3a:	0e 94 7e 09 	call	0x12fc	; 0x12fc <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(D7, OUTPUT);
    1f3e:	8f e1       	ldi	r24, 0x1F	; 31
    1f40:	61 e0       	ldi	r22, 0x01	; 1
    1f42:	0e 94 7e 09 	call	0x12fc	; 0x12fc <DIO_VoidSetPinDirection>
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	a8 e4       	ldi	r26, 0x48	; 72
    1f4c:	b2 e4       	ldi	r27, 0x42	; 66
    1f4e:	8d ab       	std	Y+53, r24	; 0x35
    1f50:	9e ab       	std	Y+54, r25	; 0x36
    1f52:	af ab       	std	Y+55, r26	; 0x37
    1f54:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f56:	6d a9       	ldd	r22, Y+53	; 0x35
    1f58:	7e a9       	ldd	r23, Y+54	; 0x36
    1f5a:	8f a9       	ldd	r24, Y+55	; 0x37
    1f5c:	98 ad       	ldd	r25, Y+56	; 0x38
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	4a e7       	ldi	r20, 0x7A	; 122
    1f64:	55 e4       	ldi	r21, 0x45	; 69
    1f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	89 ab       	std	Y+49, r24	; 0x31
    1f70:	9a ab       	std	Y+50, r25	; 0x32
    1f72:	ab ab       	std	Y+51, r26	; 0x33
    1f74:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f76:	69 a9       	ldd	r22, Y+49	; 0x31
    1f78:	7a a9       	ldd	r23, Y+50	; 0x32
    1f7a:	8b a9       	ldd	r24, Y+51	; 0x33
    1f7c:	9c a9       	ldd	r25, Y+52	; 0x34
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	40 e8       	ldi	r20, 0x80	; 128
    1f84:	5f e3       	ldi	r21, 0x3F	; 63
    1f86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f8a:	88 23       	and	r24, r24
    1f8c:	2c f4       	brge	.+10     	; 0x1f98 <LCD_VoidInit+0x9e>
		__ticks = 1;
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	98 ab       	std	Y+48, r25	; 0x30
    1f94:	8f a7       	std	Y+47, r24	; 0x2f
    1f96:	3f c0       	rjmp	.+126    	; 0x2016 <LCD_VoidInit+0x11c>
	else if (__tmp > 65535)
    1f98:	69 a9       	ldd	r22, Y+49	; 0x31
    1f9a:	7a a9       	ldd	r23, Y+50	; 0x32
    1f9c:	8b a9       	ldd	r24, Y+51	; 0x33
    1f9e:	9c a9       	ldd	r25, Y+52	; 0x34
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	3f ef       	ldi	r19, 0xFF	; 255
    1fa4:	4f e7       	ldi	r20, 0x7F	; 127
    1fa6:	57 e4       	ldi	r21, 0x47	; 71
    1fa8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fac:	18 16       	cp	r1, r24
    1fae:	4c f5       	brge	.+82     	; 0x2002 <LCD_VoidInit+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb0:	6d a9       	ldd	r22, Y+53	; 0x35
    1fb2:	7e a9       	ldd	r23, Y+54	; 0x36
    1fb4:	8f a9       	ldd	r24, Y+55	; 0x37
    1fb6:	98 ad       	ldd	r25, Y+56	; 0x38
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	40 e2       	ldi	r20, 0x20	; 32
    1fbe:	51 e4       	ldi	r21, 0x41	; 65
    1fc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	bc 01       	movw	r22, r24
    1fca:	cd 01       	movw	r24, r26
    1fcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	98 ab       	std	Y+48, r25	; 0x30
    1fd6:	8f a7       	std	Y+47, r24	; 0x2f
    1fd8:	0f c0       	rjmp	.+30     	; 0x1ff8 <LCD_VoidInit+0xfe>
    1fda:	80 e9       	ldi	r24, 0x90	; 144
    1fdc:	91 e0       	ldi	r25, 0x01	; 1
    1fde:	9e a7       	std	Y+46, r25	; 0x2e
    1fe0:	8d a7       	std	Y+45, r24	; 0x2d
    1fe2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fe4:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fe6:	01 97       	sbiw	r24, 0x01	; 1
    1fe8:	f1 f7       	brne	.-4      	; 0x1fe6 <LCD_VoidInit+0xec>
    1fea:	9e a7       	std	Y+46, r25	; 0x2e
    1fec:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fee:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ff0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ff2:	01 97       	sbiw	r24, 0x01	; 1
    1ff4:	98 ab       	std	Y+48, r25	; 0x30
    1ff6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ffa:	98 a9       	ldd	r25, Y+48	; 0x30
    1ffc:	00 97       	sbiw	r24, 0x00	; 0
    1ffe:	69 f7       	brne	.-38     	; 0x1fda <LCD_VoidInit+0xe0>
    2000:	14 c0       	rjmp	.+40     	; 0x202a <LCD_VoidInit+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2002:	69 a9       	ldd	r22, Y+49	; 0x31
    2004:	7a a9       	ldd	r23, Y+50	; 0x32
    2006:	8b a9       	ldd	r24, Y+51	; 0x33
    2008:	9c a9       	ldd	r25, Y+52	; 0x34
    200a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	98 ab       	std	Y+48, r25	; 0x30
    2014:	8f a7       	std	Y+47, r24	; 0x2f
    2016:	8f a5       	ldd	r24, Y+47	; 0x2f
    2018:	98 a9       	ldd	r25, Y+48	; 0x30
    201a:	9c a7       	std	Y+44, r25	; 0x2c
    201c:	8b a7       	std	Y+43, r24	; 0x2b
    201e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2020:	9c a5       	ldd	r25, Y+44	; 0x2c
    2022:	01 97       	sbiw	r24, 0x01	; 1
    2024:	f1 f7       	brne	.-4      	; 0x2022 <LCD_VoidInit+0x128>
    2026:	9c a7       	std	Y+44, r25	; 0x2c
    2028:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
	LCD_VoidWriteInst(0x33);
    202a:	83 e3       	ldi	r24, 0x33	; 51
    202c:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <LCD_VoidWriteInst>
	LCD_VoidWriteInst(0x32);
    2030:	82 e3       	ldi	r24, 0x32	; 50
    2032:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <LCD_VoidWriteInst>
	LCD_VoidWriteInst(0x28);
    2036:	88 e2       	ldi	r24, 0x28	; 40
    2038:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <LCD_VoidWriteInst>
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	a0 e8       	ldi	r26, 0x80	; 128
    2042:	bf e3       	ldi	r27, 0x3F	; 63
    2044:	8f a3       	std	Y+39, r24	; 0x27
    2046:	98 a7       	std	Y+40, r25	; 0x28
    2048:	a9 a7       	std	Y+41, r26	; 0x29
    204a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    204c:	6f a1       	ldd	r22, Y+39	; 0x27
    204e:	78 a5       	ldd	r23, Y+40	; 0x28
    2050:	89 a5       	ldd	r24, Y+41	; 0x29
    2052:	9a a5       	ldd	r25, Y+42	; 0x2a
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	4a e7       	ldi	r20, 0x7A	; 122
    205a:	55 e4       	ldi	r21, 0x45	; 69
    205c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	8b a3       	std	Y+35, r24	; 0x23
    2066:	9c a3       	std	Y+36, r25	; 0x24
    2068:	ad a3       	std	Y+37, r26	; 0x25
    206a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    206c:	6b a1       	ldd	r22, Y+35	; 0x23
    206e:	7c a1       	ldd	r23, Y+36	; 0x24
    2070:	8d a1       	ldd	r24, Y+37	; 0x25
    2072:	9e a1       	ldd	r25, Y+38	; 0x26
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	40 e8       	ldi	r20, 0x80	; 128
    207a:	5f e3       	ldi	r21, 0x3F	; 63
    207c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2080:	88 23       	and	r24, r24
    2082:	2c f4       	brge	.+10     	; 0x208e <LCD_VoidInit+0x194>
		__ticks = 1;
    2084:	81 e0       	ldi	r24, 0x01	; 1
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	9a a3       	std	Y+34, r25	; 0x22
    208a:	89 a3       	std	Y+33, r24	; 0x21
    208c:	3f c0       	rjmp	.+126    	; 0x210c <LCD_VoidInit+0x212>
	else if (__tmp > 65535)
    208e:	6b a1       	ldd	r22, Y+35	; 0x23
    2090:	7c a1       	ldd	r23, Y+36	; 0x24
    2092:	8d a1       	ldd	r24, Y+37	; 0x25
    2094:	9e a1       	ldd	r25, Y+38	; 0x26
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	3f ef       	ldi	r19, 0xFF	; 255
    209a:	4f e7       	ldi	r20, 0x7F	; 127
    209c:	57 e4       	ldi	r21, 0x47	; 71
    209e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20a2:	18 16       	cp	r1, r24
    20a4:	4c f5       	brge	.+82     	; 0x20f8 <LCD_VoidInit+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a6:	6f a1       	ldd	r22, Y+39	; 0x27
    20a8:	78 a5       	ldd	r23, Y+40	; 0x28
    20aa:	89 a5       	ldd	r24, Y+41	; 0x29
    20ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	40 e2       	ldi	r20, 0x20	; 32
    20b4:	51 e4       	ldi	r21, 0x41	; 65
    20b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	bc 01       	movw	r22, r24
    20c0:	cd 01       	movw	r24, r26
    20c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	9a a3       	std	Y+34, r25	; 0x22
    20cc:	89 a3       	std	Y+33, r24	; 0x21
    20ce:	0f c0       	rjmp	.+30     	; 0x20ee <LCD_VoidInit+0x1f4>
    20d0:	80 e9       	ldi	r24, 0x90	; 144
    20d2:	91 e0       	ldi	r25, 0x01	; 1
    20d4:	98 a3       	std	Y+32, r25	; 0x20
    20d6:	8f 8f       	std	Y+31, r24	; 0x1f
    20d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20da:	98 a1       	ldd	r25, Y+32	; 0x20
    20dc:	01 97       	sbiw	r24, 0x01	; 1
    20de:	f1 f7       	brne	.-4      	; 0x20dc <LCD_VoidInit+0x1e2>
    20e0:	98 a3       	std	Y+32, r25	; 0x20
    20e2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e4:	89 a1       	ldd	r24, Y+33	; 0x21
    20e6:	9a a1       	ldd	r25, Y+34	; 0x22
    20e8:	01 97       	sbiw	r24, 0x01	; 1
    20ea:	9a a3       	std	Y+34, r25	; 0x22
    20ec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ee:	89 a1       	ldd	r24, Y+33	; 0x21
    20f0:	9a a1       	ldd	r25, Y+34	; 0x22
    20f2:	00 97       	sbiw	r24, 0x00	; 0
    20f4:	69 f7       	brne	.-38     	; 0x20d0 <LCD_VoidInit+0x1d6>
    20f6:	14 c0       	rjmp	.+40     	; 0x2120 <LCD_VoidInit+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f8:	6b a1       	ldd	r22, Y+35	; 0x23
    20fa:	7c a1       	ldd	r23, Y+36	; 0x24
    20fc:	8d a1       	ldd	r24, Y+37	; 0x25
    20fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	9a a3       	std	Y+34, r25	; 0x22
    210a:	89 a3       	std	Y+33, r24	; 0x21
    210c:	89 a1       	ldd	r24, Y+33	; 0x21
    210e:	9a a1       	ldd	r25, Y+34	; 0x22
    2110:	9e 8f       	std	Y+30, r25	; 0x1e
    2112:	8d 8f       	std	Y+29, r24	; 0x1d
    2114:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2116:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	f1 f7       	brne	.-4      	; 0x2118 <LCD_VoidInit+0x21e>
    211c:	9e 8f       	std	Y+30, r25	; 0x1e
    211e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_VoidWriteInst(0x0F);
    2120:	8f e0       	ldi	r24, 0x0F	; 15
    2122:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <LCD_VoidWriteInst>
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	a0 e8       	ldi	r26, 0x80	; 128
    212c:	bf e3       	ldi	r27, 0x3F	; 63
    212e:	89 8f       	std	Y+25, r24	; 0x19
    2130:	9a 8f       	std	Y+26, r25	; 0x1a
    2132:	ab 8f       	std	Y+27, r26	; 0x1b
    2134:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2136:	69 8d       	ldd	r22, Y+25	; 0x19
    2138:	7a 8d       	ldd	r23, Y+26	; 0x1a
    213a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    213c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	4a e7       	ldi	r20, 0x7A	; 122
    2144:	55 e4       	ldi	r21, 0x45	; 69
    2146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	8d 8b       	std	Y+21, r24	; 0x15
    2150:	9e 8b       	std	Y+22, r25	; 0x16
    2152:	af 8b       	std	Y+23, r26	; 0x17
    2154:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2156:	6d 89       	ldd	r22, Y+21	; 0x15
    2158:	7e 89       	ldd	r23, Y+22	; 0x16
    215a:	8f 89       	ldd	r24, Y+23	; 0x17
    215c:	98 8d       	ldd	r25, Y+24	; 0x18
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	40 e8       	ldi	r20, 0x80	; 128
    2164:	5f e3       	ldi	r21, 0x3F	; 63
    2166:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    216a:	88 23       	and	r24, r24
    216c:	2c f4       	brge	.+10     	; 0x2178 <LCD_VoidInit+0x27e>
		__ticks = 1;
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	9c 8b       	std	Y+20, r25	; 0x14
    2174:	8b 8b       	std	Y+19, r24	; 0x13
    2176:	3f c0       	rjmp	.+126    	; 0x21f6 <LCD_VoidInit+0x2fc>
	else if (__tmp > 65535)
    2178:	6d 89       	ldd	r22, Y+21	; 0x15
    217a:	7e 89       	ldd	r23, Y+22	; 0x16
    217c:	8f 89       	ldd	r24, Y+23	; 0x17
    217e:	98 8d       	ldd	r25, Y+24	; 0x18
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	3f ef       	ldi	r19, 0xFF	; 255
    2184:	4f e7       	ldi	r20, 0x7F	; 127
    2186:	57 e4       	ldi	r21, 0x47	; 71
    2188:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    218c:	18 16       	cp	r1, r24
    218e:	4c f5       	brge	.+82     	; 0x21e2 <LCD_VoidInit+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2190:	69 8d       	ldd	r22, Y+25	; 0x19
    2192:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2194:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2196:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	40 e2       	ldi	r20, 0x20	; 32
    219e:	51 e4       	ldi	r21, 0x41	; 65
    21a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	bc 01       	movw	r22, r24
    21aa:	cd 01       	movw	r24, r26
    21ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	9c 8b       	std	Y+20, r25	; 0x14
    21b6:	8b 8b       	std	Y+19, r24	; 0x13
    21b8:	0f c0       	rjmp	.+30     	; 0x21d8 <LCD_VoidInit+0x2de>
    21ba:	80 e9       	ldi	r24, 0x90	; 144
    21bc:	91 e0       	ldi	r25, 0x01	; 1
    21be:	9a 8b       	std	Y+18, r25	; 0x12
    21c0:	89 8b       	std	Y+17, r24	; 0x11
    21c2:	89 89       	ldd	r24, Y+17	; 0x11
    21c4:	9a 89       	ldd	r25, Y+18	; 0x12
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	f1 f7       	brne	.-4      	; 0x21c6 <LCD_VoidInit+0x2cc>
    21ca:	9a 8b       	std	Y+18, r25	; 0x12
    21cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ce:	8b 89       	ldd	r24, Y+19	; 0x13
    21d0:	9c 89       	ldd	r25, Y+20	; 0x14
    21d2:	01 97       	sbiw	r24, 0x01	; 1
    21d4:	9c 8b       	std	Y+20, r25	; 0x14
    21d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d8:	8b 89       	ldd	r24, Y+19	; 0x13
    21da:	9c 89       	ldd	r25, Y+20	; 0x14
    21dc:	00 97       	sbiw	r24, 0x00	; 0
    21de:	69 f7       	brne	.-38     	; 0x21ba <LCD_VoidInit+0x2c0>
    21e0:	14 c0       	rjmp	.+40     	; 0x220a <LCD_VoidInit+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e2:	6d 89       	ldd	r22, Y+21	; 0x15
    21e4:	7e 89       	ldd	r23, Y+22	; 0x16
    21e6:	8f 89       	ldd	r24, Y+23	; 0x17
    21e8:	98 8d       	ldd	r25, Y+24	; 0x18
    21ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	9c 8b       	std	Y+20, r25	; 0x14
    21f4:	8b 8b       	std	Y+19, r24	; 0x13
    21f6:	8b 89       	ldd	r24, Y+19	; 0x13
    21f8:	9c 89       	ldd	r25, Y+20	; 0x14
    21fa:	98 8b       	std	Y+16, r25	; 0x10
    21fc:	8f 87       	std	Y+15, r24	; 0x0f
    21fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2200:	98 89       	ldd	r25, Y+16	; 0x10
    2202:	01 97       	sbiw	r24, 0x01	; 1
    2204:	f1 f7       	brne	.-4      	; 0x2202 <LCD_VoidInit+0x308>
    2206:	98 8b       	std	Y+16, r25	; 0x10
    2208:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_VoidWriteInst(0x01);
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <LCD_VoidWriteInst>
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	a0 e0       	ldi	r26, 0x00	; 0
    2216:	b0 e4       	ldi	r27, 0x40	; 64
    2218:	8b 87       	std	Y+11, r24	; 0x0b
    221a:	9c 87       	std	Y+12, r25	; 0x0c
    221c:	ad 87       	std	Y+13, r26	; 0x0d
    221e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2220:	6b 85       	ldd	r22, Y+11	; 0x0b
    2222:	7c 85       	ldd	r23, Y+12	; 0x0c
    2224:	8d 85       	ldd	r24, Y+13	; 0x0d
    2226:	9e 85       	ldd	r25, Y+14	; 0x0e
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	4a e7       	ldi	r20, 0x7A	; 122
    222e:	55 e4       	ldi	r21, 0x45	; 69
    2230:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	8f 83       	std	Y+7, r24	; 0x07
    223a:	98 87       	std	Y+8, r25	; 0x08
    223c:	a9 87       	std	Y+9, r26	; 0x09
    223e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2240:	6f 81       	ldd	r22, Y+7	; 0x07
    2242:	78 85       	ldd	r23, Y+8	; 0x08
    2244:	89 85       	ldd	r24, Y+9	; 0x09
    2246:	9a 85       	ldd	r25, Y+10	; 0x0a
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	40 e8       	ldi	r20, 0x80	; 128
    224e:	5f e3       	ldi	r21, 0x3F	; 63
    2250:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2254:	88 23       	and	r24, r24
    2256:	2c f4       	brge	.+10     	; 0x2262 <LCD_VoidInit+0x368>
		__ticks = 1;
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	9e 83       	std	Y+6, r25	; 0x06
    225e:	8d 83       	std	Y+5, r24	; 0x05
    2260:	3f c0       	rjmp	.+126    	; 0x22e0 <LCD_VoidInit+0x3e6>
	else if (__tmp > 65535)
    2262:	6f 81       	ldd	r22, Y+7	; 0x07
    2264:	78 85       	ldd	r23, Y+8	; 0x08
    2266:	89 85       	ldd	r24, Y+9	; 0x09
    2268:	9a 85       	ldd	r25, Y+10	; 0x0a
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	3f ef       	ldi	r19, 0xFF	; 255
    226e:	4f e7       	ldi	r20, 0x7F	; 127
    2270:	57 e4       	ldi	r21, 0x47	; 71
    2272:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2276:	18 16       	cp	r1, r24
    2278:	4c f5       	brge	.+82     	; 0x22cc <LCD_VoidInit+0x3d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    227a:	6b 85       	ldd	r22, Y+11	; 0x0b
    227c:	7c 85       	ldd	r23, Y+12	; 0x0c
    227e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2280:	9e 85       	ldd	r25, Y+14	; 0x0e
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	40 e2       	ldi	r20, 0x20	; 32
    2288:	51 e4       	ldi	r21, 0x41	; 65
    228a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	bc 01       	movw	r22, r24
    2294:	cd 01       	movw	r24, r26
    2296:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	9e 83       	std	Y+6, r25	; 0x06
    22a0:	8d 83       	std	Y+5, r24	; 0x05
    22a2:	0f c0       	rjmp	.+30     	; 0x22c2 <LCD_VoidInit+0x3c8>
    22a4:	80 e9       	ldi	r24, 0x90	; 144
    22a6:	91 e0       	ldi	r25, 0x01	; 1
    22a8:	9c 83       	std	Y+4, r25	; 0x04
    22aa:	8b 83       	std	Y+3, r24	; 0x03
    22ac:	8b 81       	ldd	r24, Y+3	; 0x03
    22ae:	9c 81       	ldd	r25, Y+4	; 0x04
    22b0:	01 97       	sbiw	r24, 0x01	; 1
    22b2:	f1 f7       	brne	.-4      	; 0x22b0 <LCD_VoidInit+0x3b6>
    22b4:	9c 83       	std	Y+4, r25	; 0x04
    22b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ba:	9e 81       	ldd	r25, Y+6	; 0x06
    22bc:	01 97       	sbiw	r24, 0x01	; 1
    22be:	9e 83       	std	Y+6, r25	; 0x06
    22c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c2:	8d 81       	ldd	r24, Y+5	; 0x05
    22c4:	9e 81       	ldd	r25, Y+6	; 0x06
    22c6:	00 97       	sbiw	r24, 0x00	; 0
    22c8:	69 f7       	brne	.-38     	; 0x22a4 <LCD_VoidInit+0x3aa>
    22ca:	14 c0       	rjmp	.+40     	; 0x22f4 <LCD_VoidInit+0x3fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22cc:	6f 81       	ldd	r22, Y+7	; 0x07
    22ce:	78 85       	ldd	r23, Y+8	; 0x08
    22d0:	89 85       	ldd	r24, Y+9	; 0x09
    22d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	9e 83       	std	Y+6, r25	; 0x06
    22de:	8d 83       	std	Y+5, r24	; 0x05
    22e0:	8d 81       	ldd	r24, Y+5	; 0x05
    22e2:	9e 81       	ldd	r25, Y+6	; 0x06
    22e4:	9a 83       	std	Y+2, r25	; 0x02
    22e6:	89 83       	std	Y+1, r24	; 0x01
    22e8:	89 81       	ldd	r24, Y+1	; 0x01
    22ea:	9a 81       	ldd	r25, Y+2	; 0x02
    22ec:	01 97       	sbiw	r24, 0x01	; 1
    22ee:	f1 f7       	brne	.-4      	; 0x22ec <LCD_VoidInit+0x3f2>
    22f0:	9a 83       	std	Y+2, r25	; 0x02
    22f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_VoidWriteInst(0x06);
    22f4:	86 e0       	ldi	r24, 0x06	; 6
    22f6:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <LCD_VoidWriteInst>
#endif

}
    22fa:	e8 96       	adiw	r28, 0x38	; 56
    22fc:	0f b6       	in	r0, 0x3f	; 63
    22fe:	f8 94       	cli
    2300:	de bf       	out	0x3e, r29	; 62
    2302:	0f be       	out	0x3f, r0	; 63
    2304:	cd bf       	out	0x3d, r28	; 61
    2306:	cf 91       	pop	r28
    2308:	df 91       	pop	r29
    230a:	08 95       	ret

0000230c <LCD_VoidWriteData>:
void LCD_VoidWriteData(u8 LCD_Char) {
    230c:	df 93       	push	r29
    230e:	cf 93       	push	r28
    2310:	0f 92       	push	r0
    2312:	cd b7       	in	r28, 0x3d	; 61
    2314:	de b7       	in	r29, 0x3e	; 62
    2316:	89 83       	std	Y+1, r24	; 0x01
	DIO_VoidSetPinValue(RS, DIO_HIGH);
    2318:	89 e0       	ldi	r24, 0x09	; 9
    231a:	61 e0       	ldi	r22, 0x01	; 1
    231c:	0e 94 99 0a 	call	0x1532	; 0x1532 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(RW, DIO_LOW);
    2320:	8a e0       	ldi	r24, 0x0A	; 10
    2322:	60 e0       	ldi	r22, 0x00	; 0
    2324:	0e 94 99 0a 	call	0x1532	; 0x1532 <DIO_VoidSetPinValue>
	LCD_VoidLatch(LCD_Char);
    2328:	89 81       	ldd	r24, Y+1	; 0x01
    232a:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <LCD_VoidLatch>
}
    232e:	0f 90       	pop	r0
    2330:	cf 91       	pop	r28
    2332:	df 91       	pop	r29
    2334:	08 95       	ret

00002336 <LCD_VoidWriteString>:

void LCD_VoidWriteString(u8 *str) {
    2336:	df 93       	push	r29
    2338:	cf 93       	push	r28
    233a:	cd b7       	in	r28, 0x3d	; 61
    233c:	de b7       	in	r29, 0x3e	; 62
    233e:	61 97       	sbiw	r28, 0x11	; 17
    2340:	0f b6       	in	r0, 0x3f	; 63
    2342:	f8 94       	cli
    2344:	de bf       	out	0x3e, r29	; 62
    2346:	0f be       	out	0x3f, r0	; 63
    2348:	cd bf       	out	0x3d, r28	; 61
    234a:	99 8b       	std	Y+17, r25	; 0x11
    234c:	88 8b       	std	Y+16, r24	; 0x10
	for (u8 i = 0; str[i]; i++) {
    234e:	1f 86       	std	Y+15, r1	; 0x0f
    2350:	80 c0       	rjmp	.+256    	; 0x2452 <LCD_VoidWriteString+0x11c>
		LCD_VoidWriteData(str[i]);
    2352:	8f 85       	ldd	r24, Y+15	; 0x0f
    2354:	28 2f       	mov	r18, r24
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	88 89       	ldd	r24, Y+16	; 0x10
    235a:	99 89       	ldd	r25, Y+17	; 0x11
    235c:	fc 01       	movw	r30, r24
    235e:	e2 0f       	add	r30, r18
    2360:	f3 1f       	adc	r31, r19
    2362:	80 81       	ld	r24, Z
    2364:	0e 94 86 11 	call	0x230c	; 0x230c <LCD_VoidWriteData>
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	a8 ec       	ldi	r26, 0xC8	; 200
    236e:	b2 e4       	ldi	r27, 0x42	; 66
    2370:	8b 87       	std	Y+11, r24	; 0x0b
    2372:	9c 87       	std	Y+12, r25	; 0x0c
    2374:	ad 87       	std	Y+13, r26	; 0x0d
    2376:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2378:	6b 85       	ldd	r22, Y+11	; 0x0b
    237a:	7c 85       	ldd	r23, Y+12	; 0x0c
    237c:	8d 85       	ldd	r24, Y+13	; 0x0d
    237e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	4a e7       	ldi	r20, 0x7A	; 122
    2386:	55 e4       	ldi	r21, 0x45	; 69
    2388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    238c:	dc 01       	movw	r26, r24
    238e:	cb 01       	movw	r24, r22
    2390:	8f 83       	std	Y+7, r24	; 0x07
    2392:	98 87       	std	Y+8, r25	; 0x08
    2394:	a9 87       	std	Y+9, r26	; 0x09
    2396:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2398:	6f 81       	ldd	r22, Y+7	; 0x07
    239a:	78 85       	ldd	r23, Y+8	; 0x08
    239c:	89 85       	ldd	r24, Y+9	; 0x09
    239e:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	40 e8       	ldi	r20, 0x80	; 128
    23a6:	5f e3       	ldi	r21, 0x3F	; 63
    23a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23ac:	88 23       	and	r24, r24
    23ae:	2c f4       	brge	.+10     	; 0x23ba <LCD_VoidWriteString+0x84>
		__ticks = 1;
    23b0:	81 e0       	ldi	r24, 0x01	; 1
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	9e 83       	std	Y+6, r25	; 0x06
    23b6:	8d 83       	std	Y+5, r24	; 0x05
    23b8:	3f c0       	rjmp	.+126    	; 0x2438 <LCD_VoidWriteString+0x102>
	else if (__tmp > 65535)
    23ba:	6f 81       	ldd	r22, Y+7	; 0x07
    23bc:	78 85       	ldd	r23, Y+8	; 0x08
    23be:	89 85       	ldd	r24, Y+9	; 0x09
    23c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	3f ef       	ldi	r19, 0xFF	; 255
    23c6:	4f e7       	ldi	r20, 0x7F	; 127
    23c8:	57 e4       	ldi	r21, 0x47	; 71
    23ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23ce:	18 16       	cp	r1, r24
    23d0:	4c f5       	brge	.+82     	; 0x2424 <LCD_VoidWriteString+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    23d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    23d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    23d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	40 e2       	ldi	r20, 0x20	; 32
    23e0:	51 e4       	ldi	r21, 0x41	; 65
    23e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	bc 01       	movw	r22, r24
    23ec:	cd 01       	movw	r24, r26
    23ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f2:	dc 01       	movw	r26, r24
    23f4:	cb 01       	movw	r24, r22
    23f6:	9e 83       	std	Y+6, r25	; 0x06
    23f8:	8d 83       	std	Y+5, r24	; 0x05
    23fa:	0f c0       	rjmp	.+30     	; 0x241a <LCD_VoidWriteString+0xe4>
    23fc:	80 e9       	ldi	r24, 0x90	; 144
    23fe:	91 e0       	ldi	r25, 0x01	; 1
    2400:	9c 83       	std	Y+4, r25	; 0x04
    2402:	8b 83       	std	Y+3, r24	; 0x03
    2404:	8b 81       	ldd	r24, Y+3	; 0x03
    2406:	9c 81       	ldd	r25, Y+4	; 0x04
    2408:	01 97       	sbiw	r24, 0x01	; 1
    240a:	f1 f7       	brne	.-4      	; 0x2408 <LCD_VoidWriteString+0xd2>
    240c:	9c 83       	std	Y+4, r25	; 0x04
    240e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2410:	8d 81       	ldd	r24, Y+5	; 0x05
    2412:	9e 81       	ldd	r25, Y+6	; 0x06
    2414:	01 97       	sbiw	r24, 0x01	; 1
    2416:	9e 83       	std	Y+6, r25	; 0x06
    2418:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    241a:	8d 81       	ldd	r24, Y+5	; 0x05
    241c:	9e 81       	ldd	r25, Y+6	; 0x06
    241e:	00 97       	sbiw	r24, 0x00	; 0
    2420:	69 f7       	brne	.-38     	; 0x23fc <LCD_VoidWriteString+0xc6>
    2422:	14 c0       	rjmp	.+40     	; 0x244c <LCD_VoidWriteString+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2424:	6f 81       	ldd	r22, Y+7	; 0x07
    2426:	78 85       	ldd	r23, Y+8	; 0x08
    2428:	89 85       	ldd	r24, Y+9	; 0x09
    242a:	9a 85       	ldd	r25, Y+10	; 0x0a
    242c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	9e 83       	std	Y+6, r25	; 0x06
    2436:	8d 83       	std	Y+5, r24	; 0x05
    2438:	8d 81       	ldd	r24, Y+5	; 0x05
    243a:	9e 81       	ldd	r25, Y+6	; 0x06
    243c:	9a 83       	std	Y+2, r25	; 0x02
    243e:	89 83       	std	Y+1, r24	; 0x01
    2440:	89 81       	ldd	r24, Y+1	; 0x01
    2442:	9a 81       	ldd	r25, Y+2	; 0x02
    2444:	01 97       	sbiw	r24, 0x01	; 1
    2446:	f1 f7       	brne	.-4      	; 0x2444 <LCD_VoidWriteString+0x10e>
    2448:	9a 83       	std	Y+2, r25	; 0x02
    244a:	89 83       	std	Y+1, r24	; 0x01
	DIO_VoidSetPinValue(RW, DIO_LOW);
	LCD_VoidLatch(LCD_Char);
}

void LCD_VoidWriteString(u8 *str) {
	for (u8 i = 0; str[i]; i++) {
    244c:	8f 85       	ldd	r24, Y+15	; 0x0f
    244e:	8f 5f       	subi	r24, 0xFF	; 255
    2450:	8f 87       	std	Y+15, r24	; 0x0f
    2452:	8f 85       	ldd	r24, Y+15	; 0x0f
    2454:	28 2f       	mov	r18, r24
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	88 89       	ldd	r24, Y+16	; 0x10
    245a:	99 89       	ldd	r25, Y+17	; 0x11
    245c:	fc 01       	movw	r30, r24
    245e:	e2 0f       	add	r30, r18
    2460:	f3 1f       	adc	r31, r19
    2462:	80 81       	ld	r24, Z
    2464:	88 23       	and	r24, r24
    2466:	09 f0       	breq	.+2      	; 0x246a <LCD_VoidWriteString+0x134>
    2468:	74 cf       	rjmp	.-280    	; 0x2352 <LCD_VoidWriteString+0x1c>
		LCD_VoidWriteData(str[i]);
		_delay_ms(100);

	}
}
    246a:	61 96       	adiw	r28, 0x11	; 17
    246c:	0f b6       	in	r0, 0x3f	; 63
    246e:	f8 94       	cli
    2470:	de bf       	out	0x3e, r29	; 62
    2472:	0f be       	out	0x3f, r0	; 63
    2474:	cd bf       	out	0x3d, r28	; 61
    2476:	cf 91       	pop	r28
    2478:	df 91       	pop	r29
    247a:	08 95       	ret

0000247c <LCD_VoidWriteNumber>:

void LCD_VoidWriteNumber(u32 num) {
    247c:	ef 92       	push	r14
    247e:	ff 92       	push	r15
    2480:	0f 93       	push	r16
    2482:	1f 93       	push	r17
    2484:	df 93       	push	r29
    2486:	cf 93       	push	r28
    2488:	cd b7       	in	r28, 0x3d	; 61
    248a:	de b7       	in	r29, 0x3e	; 62
    248c:	2e 97       	sbiw	r28, 0x0e	; 14
    248e:	0f b6       	in	r0, 0x3f	; 63
    2490:	f8 94       	cli
    2492:	de bf       	out	0x3e, r29	; 62
    2494:	0f be       	out	0x3f, r0	; 63
    2496:	cd bf       	out	0x3d, r28	; 61
    2498:	6b 87       	std	Y+11, r22	; 0x0b
    249a:	7c 87       	std	Y+12, r23	; 0x0c
    249c:	8d 87       	std	Y+13, r24	; 0x0d
    249e:	9e 87       	std	Y+14, r25	; 0x0e
	u32 copy_num = num, Rev;
    24a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    24a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    24a4:	ad 85       	ldd	r26, Y+13	; 0x0d
    24a6:	be 85       	ldd	r27, Y+14	; 0x0e
    24a8:	8f 83       	std	Y+7, r24	; 0x07
    24aa:	98 87       	std	Y+8, r25	; 0x08
    24ac:	a9 87       	std	Y+9, r26	; 0x09
    24ae:	ba 87       	std	Y+10, r27	; 0x0a
	u8 digit = 0, c = 0;
    24b0:	1a 82       	std	Y+2, r1	; 0x02
    24b2:	19 82       	std	Y+1, r1	; 0x01
    24b4:	15 c0       	rjmp	.+42     	; 0x24e0 <LCD_VoidWriteNumber+0x64>
	while (copy_num != 0) {
		c++;
    24b6:	89 81       	ldd	r24, Y+1	; 0x01
    24b8:	8f 5f       	subi	r24, 0xFF	; 255
    24ba:	89 83       	std	Y+1, r24	; 0x01
		copy_num = copy_num / 10;
    24bc:	8f 81       	ldd	r24, Y+7	; 0x07
    24be:	98 85       	ldd	r25, Y+8	; 0x08
    24c0:	a9 85       	ldd	r26, Y+9	; 0x09
    24c2:	ba 85       	ldd	r27, Y+10	; 0x0a
    24c4:	2a e0       	ldi	r18, 0x0A	; 10
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	40 e0       	ldi	r20, 0x00	; 0
    24ca:	50 e0       	ldi	r21, 0x00	; 0
    24cc:	bc 01       	movw	r22, r24
    24ce:	cd 01       	movw	r24, r26
    24d0:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <__udivmodsi4>
    24d4:	da 01       	movw	r26, r20
    24d6:	c9 01       	movw	r24, r18
    24d8:	8f 83       	std	Y+7, r24	; 0x07
    24da:	98 87       	std	Y+8, r25	; 0x08
    24dc:	a9 87       	std	Y+9, r26	; 0x09
    24de:	ba 87       	std	Y+10, r27	; 0x0a
}

void LCD_VoidWriteNumber(u32 num) {
	u32 copy_num = num, Rev;
	u8 digit = 0, c = 0;
	while (copy_num != 0) {
    24e0:	8f 81       	ldd	r24, Y+7	; 0x07
    24e2:	98 85       	ldd	r25, Y+8	; 0x08
    24e4:	a9 85       	ldd	r26, Y+9	; 0x09
    24e6:	ba 85       	ldd	r27, Y+10	; 0x0a
    24e8:	00 97       	sbiw	r24, 0x00	; 0
    24ea:	a1 05       	cpc	r26, r1
    24ec:	b1 05       	cpc	r27, r1
    24ee:	19 f7       	brne	.-58     	; 0x24b6 <LCD_VoidWriteNumber+0x3a>
    24f0:	36 c0       	rjmp	.+108    	; 0x255e <LCD_VoidWriteNumber+0xe2>
		c++;
		copy_num = copy_num / 10;
	}
	while (num > 0) {
		Rev = Rev * 10 + num % 10;
    24f2:	8b 81       	ldd	r24, Y+3	; 0x03
    24f4:	9c 81       	ldd	r25, Y+4	; 0x04
    24f6:	ad 81       	ldd	r26, Y+5	; 0x05
    24f8:	be 81       	ldd	r27, Y+6	; 0x06
    24fa:	2a e0       	ldi	r18, 0x0A	; 10
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	40 e0       	ldi	r20, 0x00	; 0
    2500:	50 e0       	ldi	r21, 0x00	; 0
    2502:	bc 01       	movw	r22, r24
    2504:	cd 01       	movw	r24, r26
    2506:	0e 94 cd 1a 	call	0x359a	; 0x359a <__mulsi3>
    250a:	7b 01       	movw	r14, r22
    250c:	8c 01       	movw	r16, r24
    250e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2510:	9c 85       	ldd	r25, Y+12	; 0x0c
    2512:	ad 85       	ldd	r26, Y+13	; 0x0d
    2514:	be 85       	ldd	r27, Y+14	; 0x0e
    2516:	2a e0       	ldi	r18, 0x0A	; 10
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	40 e0       	ldi	r20, 0x00	; 0
    251c:	50 e0       	ldi	r21, 0x00	; 0
    251e:	bc 01       	movw	r22, r24
    2520:	cd 01       	movw	r24, r26
    2522:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <__udivmodsi4>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	8e 0d       	add	r24, r14
    252c:	9f 1d       	adc	r25, r15
    252e:	a0 1f       	adc	r26, r16
    2530:	b1 1f       	adc	r27, r17
    2532:	8b 83       	std	Y+3, r24	; 0x03
    2534:	9c 83       	std	Y+4, r25	; 0x04
    2536:	ad 83       	std	Y+5, r26	; 0x05
    2538:	be 83       	std	Y+6, r27	; 0x06
		num = num / 10;
    253a:	8b 85       	ldd	r24, Y+11	; 0x0b
    253c:	9c 85       	ldd	r25, Y+12	; 0x0c
    253e:	ad 85       	ldd	r26, Y+13	; 0x0d
    2540:	be 85       	ldd	r27, Y+14	; 0x0e
    2542:	2a e0       	ldi	r18, 0x0A	; 10
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	40 e0       	ldi	r20, 0x00	; 0
    2548:	50 e0       	ldi	r21, 0x00	; 0
    254a:	bc 01       	movw	r22, r24
    254c:	cd 01       	movw	r24, r26
    254e:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <__udivmodsi4>
    2552:	da 01       	movw	r26, r20
    2554:	c9 01       	movw	r24, r18
    2556:	8b 87       	std	Y+11, r24	; 0x0b
    2558:	9c 87       	std	Y+12, r25	; 0x0c
    255a:	ad 87       	std	Y+13, r26	; 0x0d
    255c:	be 87       	std	Y+14, r27	; 0x0e
	u8 digit = 0, c = 0;
	while (copy_num != 0) {
		c++;
		copy_num = copy_num / 10;
	}
	while (num > 0) {
    255e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2560:	9c 85       	ldd	r25, Y+12	; 0x0c
    2562:	ad 85       	ldd	r26, Y+13	; 0x0d
    2564:	be 85       	ldd	r27, Y+14	; 0x0e
    2566:	00 97       	sbiw	r24, 0x00	; 0
    2568:	a1 05       	cpc	r26, r1
    256a:	b1 05       	cpc	r27, r1
    256c:	11 f6       	brne	.-124    	; 0x24f2 <LCD_VoidWriteNumber+0x76>
    256e:	28 c0       	rjmp	.+80     	; 0x25c0 <LCD_VoidWriteNumber+0x144>
		Rev = Rev * 10 + num % 10;
		num = num / 10;
	}
	while (c != 0) {
		digit = Rev % 10;
    2570:	8b 81       	ldd	r24, Y+3	; 0x03
    2572:	9c 81       	ldd	r25, Y+4	; 0x04
    2574:	ad 81       	ldd	r26, Y+5	; 0x05
    2576:	be 81       	ldd	r27, Y+6	; 0x06
    2578:	2a e0       	ldi	r18, 0x0A	; 10
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	40 e0       	ldi	r20, 0x00	; 0
    257e:	50 e0       	ldi	r21, 0x00	; 0
    2580:	bc 01       	movw	r22, r24
    2582:	cd 01       	movw	r24, r26
    2584:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <__udivmodsi4>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	8a 83       	std	Y+2, r24	; 0x02
		Rev = Rev / 10;
    258e:	8b 81       	ldd	r24, Y+3	; 0x03
    2590:	9c 81       	ldd	r25, Y+4	; 0x04
    2592:	ad 81       	ldd	r26, Y+5	; 0x05
    2594:	be 81       	ldd	r27, Y+6	; 0x06
    2596:	2a e0       	ldi	r18, 0x0A	; 10
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	40 e0       	ldi	r20, 0x00	; 0
    259c:	50 e0       	ldi	r21, 0x00	; 0
    259e:	bc 01       	movw	r22, r24
    25a0:	cd 01       	movw	r24, r26
    25a2:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <__udivmodsi4>
    25a6:	da 01       	movw	r26, r20
    25a8:	c9 01       	movw	r24, r18
    25aa:	8b 83       	std	Y+3, r24	; 0x03
    25ac:	9c 83       	std	Y+4, r25	; 0x04
    25ae:	ad 83       	std	Y+5, r26	; 0x05
    25b0:	be 83       	std	Y+6, r27	; 0x06
		LCD_VoidWriteData(digit + '0');
    25b2:	8a 81       	ldd	r24, Y+2	; 0x02
    25b4:	80 5d       	subi	r24, 0xD0	; 208
    25b6:	0e 94 86 11 	call	0x230c	; 0x230c <LCD_VoidWriteData>
		c--;
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
    25bc:	81 50       	subi	r24, 0x01	; 1
    25be:	89 83       	std	Y+1, r24	; 0x01
	}
	while (num > 0) {
		Rev = Rev * 10 + num % 10;
		num = num / 10;
	}
	while (c != 0) {
    25c0:	89 81       	ldd	r24, Y+1	; 0x01
    25c2:	88 23       	and	r24, r24
    25c4:	a9 f6       	brne	.-86     	; 0x2570 <LCD_VoidWriteNumber+0xf4>
		Rev = Rev / 10;
		LCD_VoidWriteData(digit + '0');
		c--;
	}

}
    25c6:	2e 96       	adiw	r28, 0x0e	; 14
    25c8:	0f b6       	in	r0, 0x3f	; 63
    25ca:	f8 94       	cli
    25cc:	de bf       	out	0x3e, r29	; 62
    25ce:	0f be       	out	0x3f, r0	; 63
    25d0:	cd bf       	out	0x3d, r28	; 61
    25d2:	cf 91       	pop	r28
    25d4:	df 91       	pop	r29
    25d6:	1f 91       	pop	r17
    25d8:	0f 91       	pop	r16
    25da:	ff 90       	pop	r15
    25dc:	ef 90       	pop	r14
    25de:	08 95       	ret

000025e0 <LCD_VoidClearScreen>:

void LCD_VoidClearScreen(void) {
    25e0:	df 93       	push	r29
    25e2:	cf 93       	push	r28
    25e4:	cd b7       	in	r28, 0x3d	; 61
    25e6:	de b7       	in	r29, 0x3e	; 62
	LCD_VoidWriteInst(CLR_Screen);
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <LCD_VoidWriteInst>
}
    25ee:	cf 91       	pop	r28
    25f0:	df 91       	pop	r29
    25f2:	08 95       	ret

000025f4 <LCD_VoidSetCursor>:

void LCD_VoidSetCursor(u8 row, u8 col) {
    25f4:	df 93       	push	r29
    25f6:	cf 93       	push	r28
    25f8:	00 d0       	rcall	.+0      	; 0x25fa <LCD_VoidSetCursor+0x6>
    25fa:	cd b7       	in	r28, 0x3d	; 61
    25fc:	de b7       	in	r29, 0x3e	; 62
    25fe:	89 83       	std	Y+1, r24	; 0x01
    2600:	6a 83       	std	Y+2, r22	; 0x02
	if (row == 1) {
    2602:	89 81       	ldd	r24, Y+1	; 0x01
    2604:	81 30       	cpi	r24, 0x01	; 1
    2606:	29 f4       	brne	.+10     	; 0x2612 <LCD_VoidSetCursor+0x1e>
		LCD_VoidWriteInst(0x80 + col);
    2608:	8a 81       	ldd	r24, Y+2	; 0x02
    260a:	80 58       	subi	r24, 0x80	; 128
    260c:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <LCD_VoidWriteInst>
    2610:	07 c0       	rjmp	.+14     	; 0x2620 <LCD_VoidSetCursor+0x2c>
	} else if (row == 2) {
    2612:	89 81       	ldd	r24, Y+1	; 0x01
    2614:	82 30       	cpi	r24, 0x02	; 2
    2616:	21 f4       	brne	.+8      	; 0x2620 <LCD_VoidSetCursor+0x2c>
		LCD_VoidWriteInst(0x80 + 0x40 + col);
    2618:	8a 81       	ldd	r24, Y+2	; 0x02
    261a:	80 54       	subi	r24, 0x40	; 64
    261c:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <LCD_VoidWriteInst>
	}
}
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	cf 91       	pop	r28
    2626:	df 91       	pop	r29
    2628:	08 95       	ret

0000262a <LCD_VoidDisplayHeart>:
void LCD_VoidDisplayHeart(void) {
    262a:	df 93       	push	r29
    262c:	cf 93       	push	r28
    262e:	0f 92       	push	r0
    2630:	cd b7       	in	r28, 0x3d	; 61
    2632:	de b7       	in	r29, 0x3e	; 62
    // Load the heart symbol into CGRAM
    LCD_VoidWriteInst(0x40); // Start CGRAM address for custom characters
    2634:	80 e4       	ldi	r24, 0x40	; 64
    2636:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <LCD_VoidWriteInst>
    for (u8 i = 0; i < 8; i++) {
    263a:	19 82       	std	Y+1, r1	; 0x01
    263c:	0c c0       	rjmp	.+24     	; 0x2656 <LCD_VoidDisplayHeart+0x2c>
        LCD_VoidWriteData(heartSymbol[i]);
    263e:	89 81       	ldd	r24, Y+1	; 0x01
    2640:	88 2f       	mov	r24, r24
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	fc 01       	movw	r30, r24
    2646:	ed 53       	subi	r30, 0x3D	; 61
    2648:	ff 4f       	sbci	r31, 0xFF	; 255
    264a:	80 81       	ld	r24, Z
    264c:	0e 94 86 11 	call	0x230c	; 0x230c <LCD_VoidWriteData>
	}
}
void LCD_VoidDisplayHeart(void) {
    // Load the heart symbol into CGRAM
    LCD_VoidWriteInst(0x40); // Start CGRAM address for custom characters
    for (u8 i = 0; i < 8; i++) {
    2650:	89 81       	ldd	r24, Y+1	; 0x01
    2652:	8f 5f       	subi	r24, 0xFF	; 255
    2654:	89 83       	std	Y+1, r24	; 0x01
    2656:	89 81       	ldd	r24, Y+1	; 0x01
    2658:	88 30       	cpi	r24, 0x08	; 8
    265a:	88 f3       	brcs	.-30     	; 0x263e <LCD_VoidDisplayHeart+0x14>
        LCD_VoidWriteData(heartSymbol[i]);
    }
    LCD_VoidSetCursor(1, 2);
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	62 e0       	ldi	r22, 0x02	; 2
    2660:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <LCD_VoidSetCursor>
}
    2664:	0f 90       	pop	r0
    2666:	cf 91       	pop	r28
    2668:	df 91       	pop	r29
    266a:	08 95       	ret

0000266c <displayMessage>:
void displayMessage(const char* message) {
    266c:	df 93       	push	r29
    266e:	cf 93       	push	r28
    2670:	00 d0       	rcall	.+0      	; 0x2672 <displayMessage+0x6>
    2672:	cd b7       	in	r28, 0x3d	; 61
    2674:	de b7       	in	r29, 0x3e	; 62
    2676:	9a 83       	std	Y+2, r25	; 0x02
    2678:	89 83       	std	Y+1, r24	; 0x01
    LCD_VoidClearScreen();
    267a:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <LCD_VoidClearScreen>
    LCD_VoidWriteString(message);
    267e:	89 81       	ldd	r24, Y+1	; 0x01
    2680:	9a 81       	ldd	r25, Y+2	; 0x02
    2682:	0e 94 9b 11 	call	0x2336	; 0x2336 <LCD_VoidWriteString>
}
    2686:	0f 90       	pop	r0
    2688:	0f 90       	pop	r0
    268a:	cf 91       	pop	r28
    268c:	df 91       	pop	r29
    268e:	08 95       	ret

00002690 <EEPROM_WRITE>:
//	M_TWI_Stop();
//	return 1;
//}
/*----------------------------------------------------------------------------------*/
void EEPROM_WRITE(u16 wordadd, u8 data)
{
    2690:	df 93       	push	r29
    2692:	cf 93       	push	r28
    2694:	cd b7       	in	r28, 0x3d	; 61
    2696:	de b7       	in	r29, 0x3e	; 62
    2698:	62 97       	sbiw	r28, 0x12	; 18
    269a:	0f b6       	in	r0, 0x3f	; 63
    269c:	f8 94       	cli
    269e:	de bf       	out	0x3e, r29	; 62
    26a0:	0f be       	out	0x3f, r0	; 63
    26a2:	cd bf       	out	0x3d, r28	; 61
    26a4:	99 8b       	std	Y+17, r25	; 0x11
    26a6:	88 8b       	std	Y+16, r24	; 0x10
    26a8:	6a 8b       	std	Y+18, r22	; 0x12
	u8 add = (wordadd >> 8) | 0b01010000;
    26aa:	88 89       	ldd	r24, Y+16	; 0x10
    26ac:	99 89       	ldd	r25, Y+17	; 0x11
    26ae:	89 2f       	mov	r24, r25
    26b0:	99 27       	eor	r25, r25
    26b2:	80 65       	ori	r24, 0x50	; 80
    26b4:	8f 87       	std	Y+15, r24	; 0x0f

	vMASTER_init();
    26b6:	0e 94 4c 06 	call	0xc98	; 0xc98 <vMASTER_init>
	vMASTER_START_condition();
    26ba:	0e 94 73 06 	call	0xce6	; 0xce6 <vMASTER_START_condition>

	MASTER_SEND_ADDRESS_WRITE(add);
    26be:	8f 85       	ldd	r24, Y+15	; 0x0f
    26c0:	0e 94 a3 05 	call	0xb46	; 0xb46 <MASTER_SEND_ADDRESS_WRITE>
	MASTER_SEND_DATA((u8) wordadd);
    26c4:	88 89       	ldd	r24, Y+16	; 0x10
    26c6:	0e 94 cf 05 	call	0xb9e	; 0xb9e <MASTER_SEND_DATA>

	MASTER_SEND_DATA(data);
    26ca:	8a 89       	ldd	r24, Y+18	; 0x12
    26cc:	0e 94 cf 05 	call	0xb9e	; 0xb9e <MASTER_SEND_DATA>
	M_TWI_Stop();
    26d0:	0e 94 a0 06 	call	0xd40	; 0xd40 <M_TWI_Stop>
    26d4:	80 e0       	ldi	r24, 0x00	; 0
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	a0 ea       	ldi	r26, 0xA0	; 160
    26da:	b0 e4       	ldi	r27, 0x40	; 64
    26dc:	8b 87       	std	Y+11, r24	; 0x0b
    26de:	9c 87       	std	Y+12, r25	; 0x0c
    26e0:	ad 87       	std	Y+13, r26	; 0x0d
    26e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	4a e7       	ldi	r20, 0x7A	; 122
    26f2:	55 e4       	ldi	r21, 0x45	; 69
    26f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	8f 83       	std	Y+7, r24	; 0x07
    26fe:	98 87       	std	Y+8, r25	; 0x08
    2700:	a9 87       	std	Y+9, r26	; 0x09
    2702:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2704:	6f 81       	ldd	r22, Y+7	; 0x07
    2706:	78 85       	ldd	r23, Y+8	; 0x08
    2708:	89 85       	ldd	r24, Y+9	; 0x09
    270a:	9a 85       	ldd	r25, Y+10	; 0x0a
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	40 e8       	ldi	r20, 0x80	; 128
    2712:	5f e3       	ldi	r21, 0x3F	; 63
    2714:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2718:	88 23       	and	r24, r24
    271a:	2c f4       	brge	.+10     	; 0x2726 <EEPROM_WRITE+0x96>
		__ticks = 1;
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	9e 83       	std	Y+6, r25	; 0x06
    2722:	8d 83       	std	Y+5, r24	; 0x05
    2724:	3f c0       	rjmp	.+126    	; 0x27a4 <EEPROM_WRITE+0x114>
	else if (__tmp > 65535)
    2726:	6f 81       	ldd	r22, Y+7	; 0x07
    2728:	78 85       	ldd	r23, Y+8	; 0x08
    272a:	89 85       	ldd	r24, Y+9	; 0x09
    272c:	9a 85       	ldd	r25, Y+10	; 0x0a
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	3f ef       	ldi	r19, 0xFF	; 255
    2732:	4f e7       	ldi	r20, 0x7F	; 127
    2734:	57 e4       	ldi	r21, 0x47	; 71
    2736:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    273a:	18 16       	cp	r1, r24
    273c:	4c f5       	brge	.+82     	; 0x2790 <EEPROM_WRITE+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    273e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2740:	7c 85       	ldd	r23, Y+12	; 0x0c
    2742:	8d 85       	ldd	r24, Y+13	; 0x0d
    2744:	9e 85       	ldd	r25, Y+14	; 0x0e
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	40 e2       	ldi	r20, 0x20	; 32
    274c:	51 e4       	ldi	r21, 0x41	; 65
    274e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	bc 01       	movw	r22, r24
    2758:	cd 01       	movw	r24, r26
    275a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    275e:	dc 01       	movw	r26, r24
    2760:	cb 01       	movw	r24, r22
    2762:	9e 83       	std	Y+6, r25	; 0x06
    2764:	8d 83       	std	Y+5, r24	; 0x05
    2766:	0f c0       	rjmp	.+30     	; 0x2786 <EEPROM_WRITE+0xf6>
    2768:	80 e9       	ldi	r24, 0x90	; 144
    276a:	91 e0       	ldi	r25, 0x01	; 1
    276c:	9c 83       	std	Y+4, r25	; 0x04
    276e:	8b 83       	std	Y+3, r24	; 0x03
    2770:	8b 81       	ldd	r24, Y+3	; 0x03
    2772:	9c 81       	ldd	r25, Y+4	; 0x04
    2774:	01 97       	sbiw	r24, 0x01	; 1
    2776:	f1 f7       	brne	.-4      	; 0x2774 <EEPROM_WRITE+0xe4>
    2778:	9c 83       	std	Y+4, r25	; 0x04
    277a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    277c:	8d 81       	ldd	r24, Y+5	; 0x05
    277e:	9e 81       	ldd	r25, Y+6	; 0x06
    2780:	01 97       	sbiw	r24, 0x01	; 1
    2782:	9e 83       	std	Y+6, r25	; 0x06
    2784:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2786:	8d 81       	ldd	r24, Y+5	; 0x05
    2788:	9e 81       	ldd	r25, Y+6	; 0x06
    278a:	00 97       	sbiw	r24, 0x00	; 0
    278c:	69 f7       	brne	.-38     	; 0x2768 <EEPROM_WRITE+0xd8>
    278e:	14 c0       	rjmp	.+40     	; 0x27b8 <EEPROM_WRITE+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2790:	6f 81       	ldd	r22, Y+7	; 0x07
    2792:	78 85       	ldd	r23, Y+8	; 0x08
    2794:	89 85       	ldd	r24, Y+9	; 0x09
    2796:	9a 85       	ldd	r25, Y+10	; 0x0a
    2798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22
    27a0:	9e 83       	std	Y+6, r25	; 0x06
    27a2:	8d 83       	std	Y+5, r24	; 0x05
    27a4:	8d 81       	ldd	r24, Y+5	; 0x05
    27a6:	9e 81       	ldd	r25, Y+6	; 0x06
    27a8:	9a 83       	std	Y+2, r25	; 0x02
    27aa:	89 83       	std	Y+1, r24	; 0x01
    27ac:	89 81       	ldd	r24, Y+1	; 0x01
    27ae:	9a 81       	ldd	r25, Y+2	; 0x02
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	f1 f7       	brne	.-4      	; 0x27b0 <EEPROM_WRITE+0x120>
    27b4:	9a 83       	std	Y+2, r25	; 0x02
    27b6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);

}
    27b8:	62 96       	adiw	r28, 0x12	; 18
    27ba:	0f b6       	in	r0, 0x3f	; 63
    27bc:	f8 94       	cli
    27be:	de bf       	out	0x3e, r29	; 62
    27c0:	0f be       	out	0x3f, r0	; 63
    27c2:	cd bf       	out	0x3d, r28	; 61
    27c4:	cf 91       	pop	r28
    27c6:	df 91       	pop	r29
    27c8:	08 95       	ret

000027ca <EEPROM_WRITE_String>:
void EEPROM_WRITE_String(u16 wordadd, u8 *data)
{
    27ca:	df 93       	push	r29
    27cc:	cf 93       	push	r28
    27ce:	cd b7       	in	r28, 0x3d	; 61
    27d0:	de b7       	in	r29, 0x3e	; 62
    27d2:	a1 97       	sbiw	r28, 0x21	; 33
    27d4:	0f b6       	in	r0, 0x3f	; 63
    27d6:	f8 94       	cli
    27d8:	de bf       	out	0x3e, r29	; 62
    27da:	0f be       	out	0x3f, r0	; 63
    27dc:	cd bf       	out	0x3d, r28	; 61
    27de:	9f 8f       	std	Y+31, r25	; 0x1f
    27e0:	8e 8f       	std	Y+30, r24	; 0x1e
    27e2:	79 a3       	std	Y+33, r23	; 0x21
    27e4:	68 a3       	std	Y+32, r22	; 0x20
    27e6:	93 c0       	rjmp	.+294    	; 0x290e <EEPROM_WRITE_String+0x144>
    while (*data)
    {
        u8 add = (wordadd >> 8) | 0b01010000;
    27e8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27ea:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27ec:	89 2f       	mov	r24, r25
    27ee:	99 27       	eor	r25, r25
    27f0:	80 65       	ori	r24, 0x50	; 80
    27f2:	8d 8f       	std	Y+29, r24	; 0x1d

        vMASTER_init();
    27f4:	0e 94 4c 06 	call	0xc98	; 0xc98 <vMASTER_init>
        vMASTER_START_condition();
    27f8:	0e 94 73 06 	call	0xce6	; 0xce6 <vMASTER_START_condition>

        MASTER_SEND_ADDRESS_WRITE(add);
    27fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27fe:	0e 94 a3 05 	call	0xb46	; 0xb46 <MASTER_SEND_ADDRESS_WRITE>
        MASTER_SEND_DATA((u8)wordadd);
    2802:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2804:	0e 94 cf 05 	call	0xb9e	; 0xb9e <MASTER_SEND_DATA>

        MASTER_SEND_DATA(*data);
    2808:	e8 a1       	ldd	r30, Y+32	; 0x20
    280a:	f9 a1       	ldd	r31, Y+33	; 0x21
    280c:	80 81       	ld	r24, Z
    280e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <MASTER_SEND_DATA>
        M_TWI_Stop();
    2812:	0e 94 a0 06 	call	0xd40	; 0xd40 <M_TWI_Stop>
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	a0 ea       	ldi	r26, 0xA0	; 160
    281c:	b0 e4       	ldi	r27, 0x40	; 64
    281e:	89 8f       	std	Y+25, r24	; 0x19
    2820:	9a 8f       	std	Y+26, r25	; 0x1a
    2822:	ab 8f       	std	Y+27, r26	; 0x1b
    2824:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2826:	69 8d       	ldd	r22, Y+25	; 0x19
    2828:	7a 8d       	ldd	r23, Y+26	; 0x1a
    282a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    282c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	4a e7       	ldi	r20, 0x7A	; 122
    2834:	55 e4       	ldi	r21, 0x45	; 69
    2836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283a:	dc 01       	movw	r26, r24
    283c:	cb 01       	movw	r24, r22
    283e:	8d 8b       	std	Y+21, r24	; 0x15
    2840:	9e 8b       	std	Y+22, r25	; 0x16
    2842:	af 8b       	std	Y+23, r26	; 0x17
    2844:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2846:	6d 89       	ldd	r22, Y+21	; 0x15
    2848:	7e 89       	ldd	r23, Y+22	; 0x16
    284a:	8f 89       	ldd	r24, Y+23	; 0x17
    284c:	98 8d       	ldd	r25, Y+24	; 0x18
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	40 e8       	ldi	r20, 0x80	; 128
    2854:	5f e3       	ldi	r21, 0x3F	; 63
    2856:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    285a:	88 23       	and	r24, r24
    285c:	2c f4       	brge	.+10     	; 0x2868 <EEPROM_WRITE_String+0x9e>
		__ticks = 1;
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	9c 8b       	std	Y+20, r25	; 0x14
    2864:	8b 8b       	std	Y+19, r24	; 0x13
    2866:	3f c0       	rjmp	.+126    	; 0x28e6 <EEPROM_WRITE_String+0x11c>
	else if (__tmp > 65535)
    2868:	6d 89       	ldd	r22, Y+21	; 0x15
    286a:	7e 89       	ldd	r23, Y+22	; 0x16
    286c:	8f 89       	ldd	r24, Y+23	; 0x17
    286e:	98 8d       	ldd	r25, Y+24	; 0x18
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	3f ef       	ldi	r19, 0xFF	; 255
    2874:	4f e7       	ldi	r20, 0x7F	; 127
    2876:	57 e4       	ldi	r21, 0x47	; 71
    2878:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    287c:	18 16       	cp	r1, r24
    287e:	4c f5       	brge	.+82     	; 0x28d2 <EEPROM_WRITE_String+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2880:	69 8d       	ldd	r22, Y+25	; 0x19
    2882:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2884:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2886:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2888:	20 e0       	ldi	r18, 0x00	; 0
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	40 e2       	ldi	r20, 0x20	; 32
    288e:	51 e4       	ldi	r21, 0x41	; 65
    2890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2894:	dc 01       	movw	r26, r24
    2896:	cb 01       	movw	r24, r22
    2898:	bc 01       	movw	r22, r24
    289a:	cd 01       	movw	r24, r26
    289c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	9c 8b       	std	Y+20, r25	; 0x14
    28a6:	8b 8b       	std	Y+19, r24	; 0x13
    28a8:	0f c0       	rjmp	.+30     	; 0x28c8 <EEPROM_WRITE_String+0xfe>
    28aa:	80 e9       	ldi	r24, 0x90	; 144
    28ac:	91 e0       	ldi	r25, 0x01	; 1
    28ae:	9a 8b       	std	Y+18, r25	; 0x12
    28b0:	89 8b       	std	Y+17, r24	; 0x11
    28b2:	89 89       	ldd	r24, Y+17	; 0x11
    28b4:	9a 89       	ldd	r25, Y+18	; 0x12
    28b6:	01 97       	sbiw	r24, 0x01	; 1
    28b8:	f1 f7       	brne	.-4      	; 0x28b6 <EEPROM_WRITE_String+0xec>
    28ba:	9a 8b       	std	Y+18, r25	; 0x12
    28bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28be:	8b 89       	ldd	r24, Y+19	; 0x13
    28c0:	9c 89       	ldd	r25, Y+20	; 0x14
    28c2:	01 97       	sbiw	r24, 0x01	; 1
    28c4:	9c 8b       	std	Y+20, r25	; 0x14
    28c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c8:	8b 89       	ldd	r24, Y+19	; 0x13
    28ca:	9c 89       	ldd	r25, Y+20	; 0x14
    28cc:	00 97       	sbiw	r24, 0x00	; 0
    28ce:	69 f7       	brne	.-38     	; 0x28aa <EEPROM_WRITE_String+0xe0>
    28d0:	14 c0       	rjmp	.+40     	; 0x28fa <EEPROM_WRITE_String+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d2:	6d 89       	ldd	r22, Y+21	; 0x15
    28d4:	7e 89       	ldd	r23, Y+22	; 0x16
    28d6:	8f 89       	ldd	r24, Y+23	; 0x17
    28d8:	98 8d       	ldd	r25, Y+24	; 0x18
    28da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	9c 8b       	std	Y+20, r25	; 0x14
    28e4:	8b 8b       	std	Y+19, r24	; 0x13
    28e6:	8b 89       	ldd	r24, Y+19	; 0x13
    28e8:	9c 89       	ldd	r25, Y+20	; 0x14
    28ea:	98 8b       	std	Y+16, r25	; 0x10
    28ec:	8f 87       	std	Y+15, r24	; 0x0f
    28ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    28f0:	98 89       	ldd	r25, Y+16	; 0x10
    28f2:	01 97       	sbiw	r24, 0x01	; 1
    28f4:	f1 f7       	brne	.-4      	; 0x28f2 <EEPROM_WRITE_String+0x128>
    28f6:	98 8b       	std	Y+16, r25	; 0x10
    28f8:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(5);

        data++;
    28fa:	88 a1       	ldd	r24, Y+32	; 0x20
    28fc:	99 a1       	ldd	r25, Y+33	; 0x21
    28fe:	01 96       	adiw	r24, 0x01	; 1
    2900:	99 a3       	std	Y+33, r25	; 0x21
    2902:	88 a3       	std	Y+32, r24	; 0x20
        wordadd++;
    2904:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2906:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2908:	01 96       	adiw	r24, 0x01	; 1
    290a:	9f 8f       	std	Y+31, r25	; 0x1f
    290c:	8e 8f       	std	Y+30, r24	; 0x1e
	_delay_ms(5);

}
void EEPROM_WRITE_String(u16 wordadd, u8 *data)
{
    while (*data)
    290e:	e8 a1       	ldd	r30, Y+32	; 0x20
    2910:	f9 a1       	ldd	r31, Y+33	; 0x21
    2912:	80 81       	ld	r24, Z
    2914:	88 23       	and	r24, r24
    2916:	09 f0       	breq	.+2      	; 0x291a <EEPROM_WRITE_String+0x150>
    2918:	67 cf       	rjmp	.-306    	; 0x27e8 <EEPROM_WRITE_String+0x1e>
    291a:	80 e0       	ldi	r24, 0x00	; 0
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	a0 ea       	ldi	r26, 0xA0	; 160
    2920:	b0 e4       	ldi	r27, 0x40	; 64
    2922:	8b 87       	std	Y+11, r24	; 0x0b
    2924:	9c 87       	std	Y+12, r25	; 0x0c
    2926:	ad 87       	std	Y+13, r26	; 0x0d
    2928:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    292a:	6b 85       	ldd	r22, Y+11	; 0x0b
    292c:	7c 85       	ldd	r23, Y+12	; 0x0c
    292e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2930:	9e 85       	ldd	r25, Y+14	; 0x0e
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	4a e7       	ldi	r20, 0x7A	; 122
    2938:	55 e4       	ldi	r21, 0x45	; 69
    293a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	8f 83       	std	Y+7, r24	; 0x07
    2944:	98 87       	std	Y+8, r25	; 0x08
    2946:	a9 87       	std	Y+9, r26	; 0x09
    2948:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    294a:	6f 81       	ldd	r22, Y+7	; 0x07
    294c:	78 85       	ldd	r23, Y+8	; 0x08
    294e:	89 85       	ldd	r24, Y+9	; 0x09
    2950:	9a 85       	ldd	r25, Y+10	; 0x0a
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	40 e8       	ldi	r20, 0x80	; 128
    2958:	5f e3       	ldi	r21, 0x3F	; 63
    295a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    295e:	88 23       	and	r24, r24
    2960:	2c f4       	brge	.+10     	; 0x296c <EEPROM_WRITE_String+0x1a2>
		__ticks = 1;
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	9e 83       	std	Y+6, r25	; 0x06
    2968:	8d 83       	std	Y+5, r24	; 0x05
    296a:	3f c0       	rjmp	.+126    	; 0x29ea <EEPROM_WRITE_String+0x220>
	else if (__tmp > 65535)
    296c:	6f 81       	ldd	r22, Y+7	; 0x07
    296e:	78 85       	ldd	r23, Y+8	; 0x08
    2970:	89 85       	ldd	r24, Y+9	; 0x09
    2972:	9a 85       	ldd	r25, Y+10	; 0x0a
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	3f ef       	ldi	r19, 0xFF	; 255
    2978:	4f e7       	ldi	r20, 0x7F	; 127
    297a:	57 e4       	ldi	r21, 0x47	; 71
    297c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2980:	18 16       	cp	r1, r24
    2982:	4c f5       	brge	.+82     	; 0x29d6 <EEPROM_WRITE_String+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2984:	6b 85       	ldd	r22, Y+11	; 0x0b
    2986:	7c 85       	ldd	r23, Y+12	; 0x0c
    2988:	8d 85       	ldd	r24, Y+13	; 0x0d
    298a:	9e 85       	ldd	r25, Y+14	; 0x0e
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	40 e2       	ldi	r20, 0x20	; 32
    2992:	51 e4       	ldi	r21, 0x41	; 65
    2994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	bc 01       	movw	r22, r24
    299e:	cd 01       	movw	r24, r26
    29a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a4:	dc 01       	movw	r26, r24
    29a6:	cb 01       	movw	r24, r22
    29a8:	9e 83       	std	Y+6, r25	; 0x06
    29aa:	8d 83       	std	Y+5, r24	; 0x05
    29ac:	0f c0       	rjmp	.+30     	; 0x29cc <EEPROM_WRITE_String+0x202>
    29ae:	80 e9       	ldi	r24, 0x90	; 144
    29b0:	91 e0       	ldi	r25, 0x01	; 1
    29b2:	9c 83       	std	Y+4, r25	; 0x04
    29b4:	8b 83       	std	Y+3, r24	; 0x03
    29b6:	8b 81       	ldd	r24, Y+3	; 0x03
    29b8:	9c 81       	ldd	r25, Y+4	; 0x04
    29ba:	01 97       	sbiw	r24, 0x01	; 1
    29bc:	f1 f7       	brne	.-4      	; 0x29ba <EEPROM_WRITE_String+0x1f0>
    29be:	9c 83       	std	Y+4, r25	; 0x04
    29c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c2:	8d 81       	ldd	r24, Y+5	; 0x05
    29c4:	9e 81       	ldd	r25, Y+6	; 0x06
    29c6:	01 97       	sbiw	r24, 0x01	; 1
    29c8:	9e 83       	std	Y+6, r25	; 0x06
    29ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29cc:	8d 81       	ldd	r24, Y+5	; 0x05
    29ce:	9e 81       	ldd	r25, Y+6	; 0x06
    29d0:	00 97       	sbiw	r24, 0x00	; 0
    29d2:	69 f7       	brne	.-38     	; 0x29ae <EEPROM_WRITE_String+0x1e4>
    29d4:	14 c0       	rjmp	.+40     	; 0x29fe <EEPROM_WRITE_String+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29d6:	6f 81       	ldd	r22, Y+7	; 0x07
    29d8:	78 85       	ldd	r23, Y+8	; 0x08
    29da:	89 85       	ldd	r24, Y+9	; 0x09
    29dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e2:	dc 01       	movw	r26, r24
    29e4:	cb 01       	movw	r24, r22
    29e6:	9e 83       	std	Y+6, r25	; 0x06
    29e8:	8d 83       	std	Y+5, r24	; 0x05
    29ea:	8d 81       	ldd	r24, Y+5	; 0x05
    29ec:	9e 81       	ldd	r25, Y+6	; 0x06
    29ee:	9a 83       	std	Y+2, r25	; 0x02
    29f0:	89 83       	std	Y+1, r24	; 0x01
    29f2:	89 81       	ldd	r24, Y+1	; 0x01
    29f4:	9a 81       	ldd	r25, Y+2	; 0x02
    29f6:	01 97       	sbiw	r24, 0x01	; 1
    29f8:	f1 f7       	brne	.-4      	; 0x29f6 <EEPROM_WRITE_String+0x22c>
    29fa:	9a 83       	std	Y+2, r25	; 0x02
    29fc:	89 83       	std	Y+1, r24	; 0x01

        data++;
        wordadd++;
    }
    _delay_ms(5);
}
    29fe:	a1 96       	adiw	r28, 0x21	; 33
    2a00:	0f b6       	in	r0, 0x3f	; 63
    2a02:	f8 94       	cli
    2a04:	de bf       	out	0x3e, r29	; 62
    2a06:	0f be       	out	0x3f, r0	; 63
    2a08:	cd bf       	out	0x3d, r28	; 61
    2a0a:	cf 91       	pop	r28
    2a0c:	df 91       	pop	r29
    2a0e:	08 95       	ret

00002a10 <EEPROM_READ>:
u8 EEPROM_READ(u16 wordadd)
{
    2a10:	df 93       	push	r29
    2a12:	cf 93       	push	r28
    2a14:	00 d0       	rcall	.+0      	; 0x2a16 <EEPROM_READ+0x6>
    2a16:	00 d0       	rcall	.+0      	; 0x2a18 <EEPROM_READ+0x8>
    2a18:	cd b7       	in	r28, 0x3d	; 61
    2a1a:	de b7       	in	r29, 0x3e	; 62
    2a1c:	9c 83       	std	Y+4, r25	; 0x04
    2a1e:	8b 83       	std	Y+3, r24	; 0x03
	u8 add = (wordadd >> 8) | 0b01010000;
    2a20:	8b 81       	ldd	r24, Y+3	; 0x03
    2a22:	9c 81       	ldd	r25, Y+4	; 0x04
    2a24:	89 2f       	mov	r24, r25
    2a26:	99 27       	eor	r25, r25
    2a28:	80 65       	ori	r24, 0x50	; 80
    2a2a:	8a 83       	std	Y+2, r24	; 0x02
	vMASTER_init();
    2a2c:	0e 94 4c 06 	call	0xc98	; 0xc98 <vMASTER_init>
	vMASTER_START_condition();
    2a30:	0e 94 73 06 	call	0xce6	; 0xce6 <vMASTER_START_condition>
	MASTER_SEND_ADDRESS_WRITE(add);
    2a34:	8a 81       	ldd	r24, Y+2	; 0x02
    2a36:	0e 94 a3 05 	call	0xb46	; 0xb46 <MASTER_SEND_ADDRESS_WRITE>
	MASTER_SEND_DATA((u8) wordadd);
    2a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3c:	0e 94 cf 05 	call	0xb9e	; 0xb9e <MASTER_SEND_DATA>
	vMASTER_REP_START_condition();
    2a40:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vMASTER_REP_START_condition>
	MASTER_SEND_ADDRESS_READ(add);
    2a44:	8a 81       	ldd	r24, Y+2	; 0x02
    2a46:	0e 94 03 06 	call	0xc06	; 0xc06 <MASTER_SEND_ADDRESS_READ>
	u8 data = MASTER_RECIVE_DATA();
    2a4a:	0e 94 2f 06 	call	0xc5e	; 0xc5e <MASTER_RECIVE_DATA>
    2a4e:	89 83       	std	Y+1, r24	; 0x01
	M_TWI_Stop();
    2a50:	0e 94 a0 06 	call	0xd40	; 0xd40 <M_TWI_Stop>
	return data;
    2a54:	89 81       	ldd	r24, Y+1	; 0x01
	_delay_ms(5);

}
    2a56:	0f 90       	pop	r0
    2a58:	0f 90       	pop	r0
    2a5a:	0f 90       	pop	r0
    2a5c:	0f 90       	pop	r0
    2a5e:	cf 91       	pop	r28
    2a60:	df 91       	pop	r29
    2a62:	08 95       	ret

00002a64 <EEPROM_READ_String>:



void EEPROM_READ_String(u16 wordadd, u8 *buffer, u16 length)
{
    2a64:	0f 93       	push	r16
    2a66:	1f 93       	push	r17
    2a68:	df 93       	push	r29
    2a6a:	cf 93       	push	r28
    2a6c:	cd b7       	in	r28, 0x3d	; 61
    2a6e:	de b7       	in	r29, 0x3e	; 62
    2a70:	67 97       	sbiw	r28, 0x17	; 23
    2a72:	0f b6       	in	r0, 0x3f	; 63
    2a74:	f8 94       	cli
    2a76:	de bf       	out	0x3e, r29	; 62
    2a78:	0f be       	out	0x3f, r0	; 63
    2a7a:	cd bf       	out	0x3d, r28	; 61
    2a7c:	9b 8b       	std	Y+19, r25	; 0x13
    2a7e:	8a 8b       	std	Y+18, r24	; 0x12
    2a80:	7d 8b       	std	Y+21, r23	; 0x15
    2a82:	6c 8b       	std	Y+20, r22	; 0x14
    2a84:	5f 8b       	std	Y+23, r21	; 0x17
    2a86:	4e 8b       	std	Y+22, r20	; 0x16
    u8 add = (wordadd >> 8) | 0b01010000;
    2a88:	8a 89       	ldd	r24, Y+18	; 0x12
    2a8a:	9b 89       	ldd	r25, Y+19	; 0x13
    2a8c:	89 2f       	mov	r24, r25
    2a8e:	99 27       	eor	r25, r25
    2a90:	80 65       	ori	r24, 0x50	; 80
    2a92:	89 8b       	std	Y+17, r24	; 0x11
    vMASTER_init();
    2a94:	0e 94 4c 06 	call	0xc98	; 0xc98 <vMASTER_init>

    for (u16 i = 0; i < length; i++)
    2a98:	18 8a       	std	Y+16, r1	; 0x10
    2a9a:	1f 86       	std	Y+15, r1	; 0x0f
    2a9c:	94 c0       	rjmp	.+296    	; 0x2bc6 <EEPROM_READ_String+0x162>
    {
        vMASTER_START_condition();
    2a9e:	0e 94 73 06 	call	0xce6	; 0xce6 <vMASTER_START_condition>
        MASTER_SEND_ADDRESS_WRITE(add);
    2aa2:	89 89       	ldd	r24, Y+17	; 0x11
    2aa4:	0e 94 a3 05 	call	0xb46	; 0xb46 <MASTER_SEND_ADDRESS_WRITE>
        MASTER_SEND_DATA((u8)wordadd);
    2aa8:	8a 89       	ldd	r24, Y+18	; 0x12
    2aaa:	0e 94 cf 05 	call	0xb9e	; 0xb9e <MASTER_SEND_DATA>
        vMASTER_REP_START_condition();
    2aae:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vMASTER_REP_START_condition>
        MASTER_SEND_ADDRESS_READ(add);
    2ab2:	89 89       	ldd	r24, Y+17	; 0x11
    2ab4:	0e 94 03 06 	call	0xc06	; 0xc06 <MASTER_SEND_ADDRESS_READ>

        buffer[i] = MASTER_RECIVE_DATA();
    2ab8:	2c 89       	ldd	r18, Y+20	; 0x14
    2aba:	3d 89       	ldd	r19, Y+21	; 0x15
    2abc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2abe:	98 89       	ldd	r25, Y+16	; 0x10
    2ac0:	89 01       	movw	r16, r18
    2ac2:	08 0f       	add	r16, r24
    2ac4:	19 1f       	adc	r17, r25
    2ac6:	0e 94 2f 06 	call	0xc5e	; 0xc5e <MASTER_RECIVE_DATA>
    2aca:	f8 01       	movw	r30, r16
    2acc:	80 83       	st	Z, r24
    2ace:	80 e0       	ldi	r24, 0x00	; 0
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	a0 ea       	ldi	r26, 0xA0	; 160
    2ad4:	b0 e4       	ldi	r27, 0x40	; 64
    2ad6:	8b 87       	std	Y+11, r24	; 0x0b
    2ad8:	9c 87       	std	Y+12, r25	; 0x0c
    2ada:	ad 87       	std	Y+13, r26	; 0x0d
    2adc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ade:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ae0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ae2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ae4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	4a e7       	ldi	r20, 0x7A	; 122
    2aec:	55 e4       	ldi	r21, 0x45	; 69
    2aee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af2:	dc 01       	movw	r26, r24
    2af4:	cb 01       	movw	r24, r22
    2af6:	8f 83       	std	Y+7, r24	; 0x07
    2af8:	98 87       	std	Y+8, r25	; 0x08
    2afa:	a9 87       	std	Y+9, r26	; 0x09
    2afc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2afe:	6f 81       	ldd	r22, Y+7	; 0x07
    2b00:	78 85       	ldd	r23, Y+8	; 0x08
    2b02:	89 85       	ldd	r24, Y+9	; 0x09
    2b04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	40 e8       	ldi	r20, 0x80	; 128
    2b0c:	5f e3       	ldi	r21, 0x3F	; 63
    2b0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b12:	88 23       	and	r24, r24
    2b14:	2c f4       	brge	.+10     	; 0x2b20 <EEPROM_READ_String+0xbc>
		__ticks = 1;
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	9e 83       	std	Y+6, r25	; 0x06
    2b1c:	8d 83       	std	Y+5, r24	; 0x05
    2b1e:	3f c0       	rjmp	.+126    	; 0x2b9e <EEPROM_READ_String+0x13a>
	else if (__tmp > 65535)
    2b20:	6f 81       	ldd	r22, Y+7	; 0x07
    2b22:	78 85       	ldd	r23, Y+8	; 0x08
    2b24:	89 85       	ldd	r24, Y+9	; 0x09
    2b26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	3f ef       	ldi	r19, 0xFF	; 255
    2b2c:	4f e7       	ldi	r20, 0x7F	; 127
    2b2e:	57 e4       	ldi	r21, 0x47	; 71
    2b30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b34:	18 16       	cp	r1, r24
    2b36:	4c f5       	brge	.+82     	; 0x2b8a <EEPROM_READ_String+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b38:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b40:	20 e0       	ldi	r18, 0x00	; 0
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	40 e2       	ldi	r20, 0x20	; 32
    2b46:	51 e4       	ldi	r21, 0x41	; 65
    2b48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	cb 01       	movw	r24, r22
    2b50:	bc 01       	movw	r22, r24
    2b52:	cd 01       	movw	r24, r26
    2b54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b58:	dc 01       	movw	r26, r24
    2b5a:	cb 01       	movw	r24, r22
    2b5c:	9e 83       	std	Y+6, r25	; 0x06
    2b5e:	8d 83       	std	Y+5, r24	; 0x05
    2b60:	0f c0       	rjmp	.+30     	; 0x2b80 <EEPROM_READ_String+0x11c>
    2b62:	80 e9       	ldi	r24, 0x90	; 144
    2b64:	91 e0       	ldi	r25, 0x01	; 1
    2b66:	9c 83       	std	Y+4, r25	; 0x04
    2b68:	8b 83       	std	Y+3, r24	; 0x03
    2b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b6e:	01 97       	sbiw	r24, 0x01	; 1
    2b70:	f1 f7       	brne	.-4      	; 0x2b6e <EEPROM_READ_String+0x10a>
    2b72:	9c 83       	std	Y+4, r25	; 0x04
    2b74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b76:	8d 81       	ldd	r24, Y+5	; 0x05
    2b78:	9e 81       	ldd	r25, Y+6	; 0x06
    2b7a:	01 97       	sbiw	r24, 0x01	; 1
    2b7c:	9e 83       	std	Y+6, r25	; 0x06
    2b7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b80:	8d 81       	ldd	r24, Y+5	; 0x05
    2b82:	9e 81       	ldd	r25, Y+6	; 0x06
    2b84:	00 97       	sbiw	r24, 0x00	; 0
    2b86:	69 f7       	brne	.-38     	; 0x2b62 <EEPROM_READ_String+0xfe>
    2b88:	14 c0       	rjmp	.+40     	; 0x2bb2 <EEPROM_READ_String+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b8c:	78 85       	ldd	r23, Y+8	; 0x08
    2b8e:	89 85       	ldd	r24, Y+9	; 0x09
    2b90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	9e 83       	std	Y+6, r25	; 0x06
    2b9c:	8d 83       	std	Y+5, r24	; 0x05
    2b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba2:	9a 83       	std	Y+2, r25	; 0x02
    2ba4:	89 83       	std	Y+1, r24	; 0x01
    2ba6:	89 81       	ldd	r24, Y+1	; 0x01
    2ba8:	9a 81       	ldd	r25, Y+2	; 0x02
    2baa:	01 97       	sbiw	r24, 0x01	; 1
    2bac:	f1 f7       	brne	.-4      	; 0x2baa <EEPROM_READ_String+0x146>
    2bae:	9a 83       	std	Y+2, r25	; 0x02
    2bb0:	89 83       	std	Y+1, r24	; 0x01

        _delay_ms(5);

        wordadd++;
    2bb2:	8a 89       	ldd	r24, Y+18	; 0x12
    2bb4:	9b 89       	ldd	r25, Y+19	; 0x13
    2bb6:	01 96       	adiw	r24, 0x01	; 1
    2bb8:	9b 8b       	std	Y+19, r25	; 0x13
    2bba:	8a 8b       	std	Y+18, r24	; 0x12
void EEPROM_READ_String(u16 wordadd, u8 *buffer, u16 length)
{
    u8 add = (wordadd >> 8) | 0b01010000;
    vMASTER_init();

    for (u16 i = 0; i < length; i++)
    2bbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bbe:	98 89       	ldd	r25, Y+16	; 0x10
    2bc0:	01 96       	adiw	r24, 0x01	; 1
    2bc2:	98 8b       	std	Y+16, r25	; 0x10
    2bc4:	8f 87       	std	Y+15, r24	; 0x0f
    2bc6:	2f 85       	ldd	r18, Y+15	; 0x0f
    2bc8:	38 89       	ldd	r19, Y+16	; 0x10
    2bca:	8e 89       	ldd	r24, Y+22	; 0x16
    2bcc:	9f 89       	ldd	r25, Y+23	; 0x17
    2bce:	28 17       	cp	r18, r24
    2bd0:	39 07       	cpc	r19, r25
    2bd2:	08 f4       	brcc	.+2      	; 0x2bd6 <EEPROM_READ_String+0x172>
    2bd4:	64 cf       	rjmp	.-312    	; 0x2a9e <EEPROM_READ_String+0x3a>

        _delay_ms(5);

        wordadd++;
    }
    M_TWI_Stop();
    2bd6:	0e 94 a0 06 	call	0xd40	; 0xd40 <M_TWI_Stop>
    buffer[length] = '\0'; // Ensure the buffer is null-terminated
    2bda:	8c 89       	ldd	r24, Y+20	; 0x14
    2bdc:	9d 89       	ldd	r25, Y+21	; 0x15
    2bde:	2e 89       	ldd	r18, Y+22	; 0x16
    2be0:	3f 89       	ldd	r19, Y+23	; 0x17
    2be2:	fc 01       	movw	r30, r24
    2be4:	e2 0f       	add	r30, r18
    2be6:	f3 1f       	adc	r31, r19
    2be8:	10 82       	st	Z, r1
//    LCD_VoidWriteString(buffer); // Display the complete string after reading
}
    2bea:	67 96       	adiw	r28, 0x17	; 23
    2bec:	0f b6       	in	r0, 0x3f	; 63
    2bee:	f8 94       	cli
    2bf0:	de bf       	out	0x3e, r29	; 62
    2bf2:	0f be       	out	0x3f, r0	; 63
    2bf4:	cd bf       	out	0x3d, r28	; 61
    2bf6:	cf 91       	pop	r28
    2bf8:	df 91       	pop	r29
    2bfa:	1f 91       	pop	r17
    2bfc:	0f 91       	pop	r16
    2bfe:	08 95       	ret

00002c00 <ADC_Complete_Callback>:
volatile u8 current_channel = 0; // Index to keep track of the current ADC channel

// List of channels to be sampled
ADC_channel channels[] = { 0, 1, 2, 3, 4 }; // Example channels for flex sensors

void ADC_Complete_Callback(void) {
    2c00:	df 93       	push	r29
    2c02:	cf 93       	push	r28
    2c04:	cd b7       	in	r28, 0x3d	; 61
    2c06:	de b7       	in	r29, 0x3e	; 62

	 Digital_Values[current_channel] = (int)ADCL | (int)(ADCH << 8);// Store the ADC result (10-bit value)
    2c08:	80 91 e9 00 	lds	r24, 0x00E9
    2c0c:	48 2f       	mov	r20, r24
    2c0e:	50 e0       	ldi	r21, 0x00	; 0
    2c10:	e4 e2       	ldi	r30, 0x24	; 36
    2c12:	f0 e0       	ldi	r31, 0x00	; 0
    2c14:	80 81       	ld	r24, Z
    2c16:	28 2f       	mov	r18, r24
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	e5 e2       	ldi	r30, 0x25	; 37
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	80 81       	ld	r24, Z
    2c20:	88 2f       	mov	r24, r24
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	98 2f       	mov	r25, r24
    2c26:	88 27       	eor	r24, r24
    2c28:	82 2b       	or	r24, r18
    2c2a:	93 2b       	or	r25, r19
    2c2c:	9c 01       	movw	r18, r24
    2c2e:	ca 01       	movw	r24, r20
    2c30:	88 0f       	add	r24, r24
    2c32:	99 1f       	adc	r25, r25
    2c34:	fc 01       	movw	r30, r24
    2c36:	e1 52       	subi	r30, 0x21	; 33
    2c38:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3a:	31 83       	std	Z+1, r19	; 0x01
    2c3c:	20 83       	st	Z, r18

	// Move to the next channel
	current_channel++;
    2c3e:	80 91 e9 00 	lds	r24, 0x00E9
    2c42:	8f 5f       	subi	r24, 0xFF	; 255
    2c44:	80 93 e9 00 	sts	0x00E9, r24
	if (current_channel >= sizeof(channels) / sizeof(channels[0])) {
    2c48:	80 91 e9 00 	lds	r24, 0x00E9
    2c4c:	85 30       	cpi	r24, 0x05	; 5
    2c4e:	10 f0       	brcs	.+4      	; 0x2c54 <ADC_Complete_Callback+0x54>
		current_channel = 0; // Reset to the first channel
    2c50:	10 92 e9 00 	sts	0x00E9, r1
	}
	// Start the next ADC conversion
	ADMUX = (ADMUX & 0xE0) | channels[current_channel]; // Select the next channel
    2c54:	a7 e2       	ldi	r26, 0x27	; 39
    2c56:	b0 e0       	ldi	r27, 0x00	; 0
    2c58:	e7 e2       	ldi	r30, 0x27	; 39
    2c5a:	f0 e0       	ldi	r31, 0x00	; 0
    2c5c:	80 81       	ld	r24, Z
    2c5e:	28 2f       	mov	r18, r24
    2c60:	20 7e       	andi	r18, 0xE0	; 224
    2c62:	80 91 e9 00 	lds	r24, 0x00E9
    2c66:	88 2f       	mov	r24, r24
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	fc 01       	movw	r30, r24
    2c6c:	e2 54       	subi	r30, 0x42	; 66
    2c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c70:	80 81       	ld	r24, Z
    2c72:	82 2b       	or	r24, r18
    2c74:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADSC); // Start ADC conversion
    2c76:	a6 e2       	ldi	r26, 0x26	; 38
    2c78:	b0 e0       	ldi	r27, 0x00	; 0
    2c7a:	e6 e2       	ldi	r30, 0x26	; 38
    2c7c:	f0 e0       	ldi	r31, 0x00	; 0
    2c7e:	80 81       	ld	r24, Z
    2c80:	80 64       	ori	r24, 0x40	; 64
    2c82:	8c 93       	st	X, r24
}
    2c84:	cf 91       	pop	r28
    2c86:	df 91       	pop	r29
    2c88:	08 95       	ret

00002c8a <main>:

int main(void) {
    2c8a:	df 93       	push	r29
    2c8c:	cf 93       	push	r28
    2c8e:	cd b7       	in	r28, 0x3d	; 61
    2c90:	de b7       	in	r29, 0x3e	; 62
    2c92:	c3 5f       	subi	r28, 0xF3	; 243
    2c94:	d0 40       	sbci	r29, 0x00	; 0
    2c96:	0f b6       	in	r0, 0x3f	; 63
    2c98:	f8 94       	cli
    2c9a:	de bf       	out	0x3e, r29	; 62
    2c9c:	0f be       	out	0x3f, r0	; 63
    2c9e:	cd bf       	out	0x3d, r28	; 61

	DIO_VoidSetPortDirection(1, OUTPUT);// for LCD data
    2ca0:	81 e0       	ldi	r24, 0x01	; 1
    2ca2:	61 e0       	ldi	r22, 0x01	; 1
    2ca4:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <DIO_VoidSetPortDirection>
	LCD_VoidInit(); // LCD initialization
    2ca8:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <LCD_VoidInit>
	DIO_VoidSetPinDirection(DIO_PINA0, INPUT);
    2cac:	80 e0       	ldi	r24, 0x00	; 0
    2cae:	60 e0       	ldi	r22, 0x00	; 0
    2cb0:	0e 94 7e 09 	call	0x12fc	; 0x12fc <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_PINA1, INPUT);
    2cb4:	81 e0       	ldi	r24, 0x01	; 1
    2cb6:	60 e0       	ldi	r22, 0x00	; 0
    2cb8:	0e 94 7e 09 	call	0x12fc	; 0x12fc <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_PINA2, INPUT);
    2cbc:	82 e0       	ldi	r24, 0x02	; 2
    2cbe:	60 e0       	ldi	r22, 0x00	; 0
    2cc0:	0e 94 7e 09 	call	0x12fc	; 0x12fc <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_PINA3, INPUT);
    2cc4:	83 e0       	ldi	r24, 0x03	; 3
    2cc6:	60 e0       	ldi	r22, 0x00	; 0
    2cc8:	0e 94 7e 09 	call	0x12fc	; 0x12fc <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(DIO_PINA4, INPUT);
    2ccc:	84 e0       	ldi	r24, 0x04	; 4
    2cce:	60 e0       	ldi	r22, 0x00	; 0
    2cd0:	0e 94 7e 09 	call	0x12fc	; 0x12fc <DIO_VoidSetPinDirection>
	DIO_VoidSetPortDirection(3, 0xFF);
    2cd4:	83 e0       	ldi	r24, 0x03	; 3
    2cd6:	6f ef       	ldi	r22, 0xFF	; 255
    2cd8:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <DIO_VoidSetPortDirection>


	ADC_INIT(Internal_Voltage_Reference);// Initialize ADC with internal voltage reference
    2cdc:	83 e0       	ldi	r24, 0x03	; 3
    2cde:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <ADC_INIT>


	ADC_VoidCallBack(ADC_Complete_Callback);// Set the ADC complete callback function
    2ce2:	80 e0       	ldi	r24, 0x00	; 0
    2ce4:	96 e1       	ldi	r25, 0x16	; 22
    2ce6:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <ADC_VoidCallBack>


	M_GIE_VoidEnable();// Enable global interrupts
    2cea:	0e 94 62 09 	call	0x12c4	; 0x12c4 <M_GIE_VoidEnable>

	start_ADC_conversion(channels[current_channel]);
    2cee:	80 91 e9 00 	lds	r24, 0x00E9
    2cf2:	88 2f       	mov	r24, r24
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	fc 01       	movw	r30, r24
    2cf8:	e2 54       	subi	r30, 0x42	; 66
    2cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfc:	80 81       	ld	r24, Z
    2cfe:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <start_ADC_conversion>

	u8 lastMessage[16] = "";
    2d02:	1f 86       	std	Y+15, r1	; 0x0f
    2d04:	18 8a       	std	Y+16, r1	; 0x10
    2d06:	19 8a       	std	Y+17, r1	; 0x11
    2d08:	1a 8a       	std	Y+18, r1	; 0x12
    2d0a:	8c e0       	ldi	r24, 0x0C	; 12
    2d0c:	fe 01       	movw	r30, r28
    2d0e:	73 96       	adiw	r30, 0x13	; 19
    2d10:	df 01       	movw	r26, r30
    2d12:	28 2f       	mov	r18, r24
    2d14:	1d 92       	st	X+, r1
    2d16:	2a 95       	dec	r18
    2d18:	e9 f7       	brne	.-6      	; 0x2d14 <main+0x8a>

	u8 message1[] = "This is terrible";
    2d1a:	ce 01       	movw	r24, r28
    2d1c:	4f 96       	adiw	r24, 0x1f	; 31
    2d1e:	c5 52       	subi	r28, 0x25	; 37
    2d20:	df 4f       	sbci	r29, 0xFF	; 255
    2d22:	99 83       	std	Y+1, r25	; 0x01
    2d24:	88 83       	st	Y, r24
    2d26:	cb 5d       	subi	r28, 0xDB	; 219
    2d28:	d0 40       	sbci	r29, 0x00	; 0
    2d2a:	a0 e6       	ldi	r26, 0x60	; 96
    2d2c:	b0 e0       	ldi	r27, 0x00	; 0
    2d2e:	c3 52       	subi	r28, 0x23	; 35
    2d30:	df 4f       	sbci	r29, 0xFF	; 255
    2d32:	b9 83       	std	Y+1, r27	; 0x01
    2d34:	a8 83       	st	Y, r26
    2d36:	cd 5d       	subi	r28, 0xDD	; 221
    2d38:	d0 40       	sbci	r29, 0x00	; 0
    2d3a:	b1 e1       	ldi	r27, 0x11	; 17
    2d3c:	c1 52       	subi	r28, 0x21	; 33
    2d3e:	df 4f       	sbci	r29, 0xFF	; 255
    2d40:	b8 83       	st	Y, r27
    2d42:	cf 5d       	subi	r28, 0xDF	; 223
    2d44:	d0 40       	sbci	r29, 0x00	; 0
    2d46:	c3 52       	subi	r28, 0x23	; 35
    2d48:	df 4f       	sbci	r29, 0xFF	; 255
    2d4a:	e8 81       	ld	r30, Y
    2d4c:	f9 81       	ldd	r31, Y+1	; 0x01
    2d4e:	cd 5d       	subi	r28, 0xDD	; 221
    2d50:	d0 40       	sbci	r29, 0x00	; 0
    2d52:	00 80       	ld	r0, Z
    2d54:	c3 52       	subi	r28, 0x23	; 35
    2d56:	df 4f       	sbci	r29, 0xFF	; 255
    2d58:	88 81       	ld	r24, Y
    2d5a:	99 81       	ldd	r25, Y+1	; 0x01
    2d5c:	cd 5d       	subi	r28, 0xDD	; 221
    2d5e:	d0 40       	sbci	r29, 0x00	; 0
    2d60:	01 96       	adiw	r24, 0x01	; 1
    2d62:	c3 52       	subi	r28, 0x23	; 35
    2d64:	df 4f       	sbci	r29, 0xFF	; 255
    2d66:	99 83       	std	Y+1, r25	; 0x01
    2d68:	88 83       	st	Y, r24
    2d6a:	cd 5d       	subi	r28, 0xDD	; 221
    2d6c:	d0 40       	sbci	r29, 0x00	; 0
    2d6e:	c5 52       	subi	r28, 0x25	; 37
    2d70:	df 4f       	sbci	r29, 0xFF	; 255
    2d72:	a8 81       	ld	r26, Y
    2d74:	b9 81       	ldd	r27, Y+1	; 0x01
    2d76:	cb 5d       	subi	r28, 0xDB	; 219
    2d78:	d0 40       	sbci	r29, 0x00	; 0
    2d7a:	0c 92       	st	X, r0
    2d7c:	c5 52       	subi	r28, 0x25	; 37
    2d7e:	df 4f       	sbci	r29, 0xFF	; 255
    2d80:	e8 81       	ld	r30, Y
    2d82:	f9 81       	ldd	r31, Y+1	; 0x01
    2d84:	cb 5d       	subi	r28, 0xDB	; 219
    2d86:	d0 40       	sbci	r29, 0x00	; 0
    2d88:	31 96       	adiw	r30, 0x01	; 1
    2d8a:	c5 52       	subi	r28, 0x25	; 37
    2d8c:	df 4f       	sbci	r29, 0xFF	; 255
    2d8e:	f9 83       	std	Y+1, r31	; 0x01
    2d90:	e8 83       	st	Y, r30
    2d92:	cb 5d       	subi	r28, 0xDB	; 219
    2d94:	d0 40       	sbci	r29, 0x00	; 0
    2d96:	c1 52       	subi	r28, 0x21	; 33
    2d98:	df 4f       	sbci	r29, 0xFF	; 255
    2d9a:	f8 81       	ld	r31, Y
    2d9c:	cf 5d       	subi	r28, 0xDF	; 223
    2d9e:	d0 40       	sbci	r29, 0x00	; 0
    2da0:	f1 50       	subi	r31, 0x01	; 1
    2da2:	c1 52       	subi	r28, 0x21	; 33
    2da4:	df 4f       	sbci	r29, 0xFF	; 255
    2da6:	f8 83       	st	Y, r31
    2da8:	cf 5d       	subi	r28, 0xDF	; 223
    2daa:	d0 40       	sbci	r29, 0x00	; 0
    2dac:	c1 52       	subi	r28, 0x21	; 33
    2dae:	df 4f       	sbci	r29, 0xFF	; 255
    2db0:	28 81       	ld	r18, Y
    2db2:	cf 5d       	subi	r28, 0xDF	; 223
    2db4:	d0 40       	sbci	r29, 0x00	; 0
    2db6:	22 23       	and	r18, r18
    2db8:	31 f6       	brne	.-116    	; 0x2d46 <main+0xbc>
	u8 message2[] = "I Love You";
    2dba:	ce 01       	movw	r24, r28
    2dbc:	c0 96       	adiw	r24, 0x30	; 48
    2dbe:	c0 52       	subi	r28, 0x20	; 32
    2dc0:	df 4f       	sbci	r29, 0xFF	; 255
    2dc2:	99 83       	std	Y+1, r25	; 0x01
    2dc4:	88 83       	st	Y, r24
    2dc6:	c0 5e       	subi	r28, 0xE0	; 224
    2dc8:	d0 40       	sbci	r29, 0x00	; 0
    2dca:	a1 e7       	ldi	r26, 0x71	; 113
    2dcc:	b0 e0       	ldi	r27, 0x00	; 0
    2dce:	ce 51       	subi	r28, 0x1E	; 30
    2dd0:	df 4f       	sbci	r29, 0xFF	; 255
    2dd2:	b9 83       	std	Y+1, r27	; 0x01
    2dd4:	a8 83       	st	Y, r26
    2dd6:	c2 5e       	subi	r28, 0xE2	; 226
    2dd8:	d0 40       	sbci	r29, 0x00	; 0
    2dda:	bb e0       	ldi	r27, 0x0B	; 11
    2ddc:	cc 51       	subi	r28, 0x1C	; 28
    2dde:	df 4f       	sbci	r29, 0xFF	; 255
    2de0:	b8 83       	st	Y, r27
    2de2:	c4 5e       	subi	r28, 0xE4	; 228
    2de4:	d0 40       	sbci	r29, 0x00	; 0
    2de6:	ce 51       	subi	r28, 0x1E	; 30
    2de8:	df 4f       	sbci	r29, 0xFF	; 255
    2dea:	e8 81       	ld	r30, Y
    2dec:	f9 81       	ldd	r31, Y+1	; 0x01
    2dee:	c2 5e       	subi	r28, 0xE2	; 226
    2df0:	d0 40       	sbci	r29, 0x00	; 0
    2df2:	00 80       	ld	r0, Z
    2df4:	ce 51       	subi	r28, 0x1E	; 30
    2df6:	df 4f       	sbci	r29, 0xFF	; 255
    2df8:	88 81       	ld	r24, Y
    2dfa:	99 81       	ldd	r25, Y+1	; 0x01
    2dfc:	c2 5e       	subi	r28, 0xE2	; 226
    2dfe:	d0 40       	sbci	r29, 0x00	; 0
    2e00:	01 96       	adiw	r24, 0x01	; 1
    2e02:	ce 51       	subi	r28, 0x1E	; 30
    2e04:	df 4f       	sbci	r29, 0xFF	; 255
    2e06:	99 83       	std	Y+1, r25	; 0x01
    2e08:	88 83       	st	Y, r24
    2e0a:	c2 5e       	subi	r28, 0xE2	; 226
    2e0c:	d0 40       	sbci	r29, 0x00	; 0
    2e0e:	c0 52       	subi	r28, 0x20	; 32
    2e10:	df 4f       	sbci	r29, 0xFF	; 255
    2e12:	a8 81       	ld	r26, Y
    2e14:	b9 81       	ldd	r27, Y+1	; 0x01
    2e16:	c0 5e       	subi	r28, 0xE0	; 224
    2e18:	d0 40       	sbci	r29, 0x00	; 0
    2e1a:	0c 92       	st	X, r0
    2e1c:	c0 52       	subi	r28, 0x20	; 32
    2e1e:	df 4f       	sbci	r29, 0xFF	; 255
    2e20:	e8 81       	ld	r30, Y
    2e22:	f9 81       	ldd	r31, Y+1	; 0x01
    2e24:	c0 5e       	subi	r28, 0xE0	; 224
    2e26:	d0 40       	sbci	r29, 0x00	; 0
    2e28:	31 96       	adiw	r30, 0x01	; 1
    2e2a:	c0 52       	subi	r28, 0x20	; 32
    2e2c:	df 4f       	sbci	r29, 0xFF	; 255
    2e2e:	f9 83       	std	Y+1, r31	; 0x01
    2e30:	e8 83       	st	Y, r30
    2e32:	c0 5e       	subi	r28, 0xE0	; 224
    2e34:	d0 40       	sbci	r29, 0x00	; 0
    2e36:	cc 51       	subi	r28, 0x1C	; 28
    2e38:	df 4f       	sbci	r29, 0xFF	; 255
    2e3a:	f8 81       	ld	r31, Y
    2e3c:	c4 5e       	subi	r28, 0xE4	; 228
    2e3e:	d0 40       	sbci	r29, 0x00	; 0
    2e40:	f1 50       	subi	r31, 0x01	; 1
    2e42:	cc 51       	subi	r28, 0x1C	; 28
    2e44:	df 4f       	sbci	r29, 0xFF	; 255
    2e46:	f8 83       	st	Y, r31
    2e48:	c4 5e       	subi	r28, 0xE4	; 228
    2e4a:	d0 40       	sbci	r29, 0x00	; 0
    2e4c:	cc 51       	subi	r28, 0x1C	; 28
    2e4e:	df 4f       	sbci	r29, 0xFF	; 255
    2e50:	28 81       	ld	r18, Y
    2e52:	c4 5e       	subi	r28, 0xE4	; 228
    2e54:	d0 40       	sbci	r29, 0x00	; 0
    2e56:	22 23       	and	r18, r18
    2e58:	31 f6       	brne	.-116    	; 0x2de6 <main+0x15c>
	u8 message3[] = "I Really Love You";
    2e5a:	ce 01       	movw	r24, r28
    2e5c:	cb 96       	adiw	r24, 0x3b	; 59
    2e5e:	cb 51       	subi	r28, 0x1B	; 27
    2e60:	df 4f       	sbci	r29, 0xFF	; 255
    2e62:	99 83       	std	Y+1, r25	; 0x01
    2e64:	88 83       	st	Y, r24
    2e66:	c5 5e       	subi	r28, 0xE5	; 229
    2e68:	d0 40       	sbci	r29, 0x00	; 0
    2e6a:	ac e7       	ldi	r26, 0x7C	; 124
    2e6c:	b0 e0       	ldi	r27, 0x00	; 0
    2e6e:	c9 51       	subi	r28, 0x19	; 25
    2e70:	df 4f       	sbci	r29, 0xFF	; 255
    2e72:	b9 83       	std	Y+1, r27	; 0x01
    2e74:	a8 83       	st	Y, r26
    2e76:	c7 5e       	subi	r28, 0xE7	; 231
    2e78:	d0 40       	sbci	r29, 0x00	; 0
    2e7a:	b2 e1       	ldi	r27, 0x12	; 18
    2e7c:	c7 51       	subi	r28, 0x17	; 23
    2e7e:	df 4f       	sbci	r29, 0xFF	; 255
    2e80:	b8 83       	st	Y, r27
    2e82:	c9 5e       	subi	r28, 0xE9	; 233
    2e84:	d0 40       	sbci	r29, 0x00	; 0
    2e86:	c9 51       	subi	r28, 0x19	; 25
    2e88:	df 4f       	sbci	r29, 0xFF	; 255
    2e8a:	e8 81       	ld	r30, Y
    2e8c:	f9 81       	ldd	r31, Y+1	; 0x01
    2e8e:	c7 5e       	subi	r28, 0xE7	; 231
    2e90:	d0 40       	sbci	r29, 0x00	; 0
    2e92:	00 80       	ld	r0, Z
    2e94:	c9 51       	subi	r28, 0x19	; 25
    2e96:	df 4f       	sbci	r29, 0xFF	; 255
    2e98:	88 81       	ld	r24, Y
    2e9a:	99 81       	ldd	r25, Y+1	; 0x01
    2e9c:	c7 5e       	subi	r28, 0xE7	; 231
    2e9e:	d0 40       	sbci	r29, 0x00	; 0
    2ea0:	01 96       	adiw	r24, 0x01	; 1
    2ea2:	c9 51       	subi	r28, 0x19	; 25
    2ea4:	df 4f       	sbci	r29, 0xFF	; 255
    2ea6:	99 83       	std	Y+1, r25	; 0x01
    2ea8:	88 83       	st	Y, r24
    2eaa:	c7 5e       	subi	r28, 0xE7	; 231
    2eac:	d0 40       	sbci	r29, 0x00	; 0
    2eae:	cb 51       	subi	r28, 0x1B	; 27
    2eb0:	df 4f       	sbci	r29, 0xFF	; 255
    2eb2:	a8 81       	ld	r26, Y
    2eb4:	b9 81       	ldd	r27, Y+1	; 0x01
    2eb6:	c5 5e       	subi	r28, 0xE5	; 229
    2eb8:	d0 40       	sbci	r29, 0x00	; 0
    2eba:	0c 92       	st	X, r0
    2ebc:	cb 51       	subi	r28, 0x1B	; 27
    2ebe:	df 4f       	sbci	r29, 0xFF	; 255
    2ec0:	e8 81       	ld	r30, Y
    2ec2:	f9 81       	ldd	r31, Y+1	; 0x01
    2ec4:	c5 5e       	subi	r28, 0xE5	; 229
    2ec6:	d0 40       	sbci	r29, 0x00	; 0
    2ec8:	31 96       	adiw	r30, 0x01	; 1
    2eca:	cb 51       	subi	r28, 0x1B	; 27
    2ecc:	df 4f       	sbci	r29, 0xFF	; 255
    2ece:	f9 83       	std	Y+1, r31	; 0x01
    2ed0:	e8 83       	st	Y, r30
    2ed2:	c5 5e       	subi	r28, 0xE5	; 229
    2ed4:	d0 40       	sbci	r29, 0x00	; 0
    2ed6:	c7 51       	subi	r28, 0x17	; 23
    2ed8:	df 4f       	sbci	r29, 0xFF	; 255
    2eda:	f8 81       	ld	r31, Y
    2edc:	c9 5e       	subi	r28, 0xE9	; 233
    2ede:	d0 40       	sbci	r29, 0x00	; 0
    2ee0:	f1 50       	subi	r31, 0x01	; 1
    2ee2:	c7 51       	subi	r28, 0x17	; 23
    2ee4:	df 4f       	sbci	r29, 0xFF	; 255
    2ee6:	f8 83       	st	Y, r31
    2ee8:	c9 5e       	subi	r28, 0xE9	; 233
    2eea:	d0 40       	sbci	r29, 0x00	; 0
    2eec:	c7 51       	subi	r28, 0x17	; 23
    2eee:	df 4f       	sbci	r29, 0xFF	; 255
    2ef0:	28 81       	ld	r18, Y
    2ef2:	c9 5e       	subi	r28, 0xE9	; 233
    2ef4:	d0 40       	sbci	r29, 0x00	; 0
    2ef6:	22 23       	and	r18, r18
    2ef8:	31 f6       	brne	.-116    	; 0x2e86 <main+0x1fc>
	u8 message4[] = "Good Job";
    2efa:	ce 01       	movw	r24, r28
    2efc:	83 5b       	subi	r24, 0xB3	; 179
    2efe:	9f 4f       	sbci	r25, 0xFF	; 255
    2f00:	c6 51       	subi	r28, 0x16	; 22
    2f02:	df 4f       	sbci	r29, 0xFF	; 255
    2f04:	99 83       	std	Y+1, r25	; 0x01
    2f06:	88 83       	st	Y, r24
    2f08:	ca 5e       	subi	r28, 0xEA	; 234
    2f0a:	d0 40       	sbci	r29, 0x00	; 0
    2f0c:	8e e8       	ldi	r24, 0x8E	; 142
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	c4 51       	subi	r28, 0x14	; 20
    2f12:	df 4f       	sbci	r29, 0xFF	; 255
    2f14:	99 83       	std	Y+1, r25	; 0x01
    2f16:	88 83       	st	Y, r24
    2f18:	cc 5e       	subi	r28, 0xEC	; 236
    2f1a:	d0 40       	sbci	r29, 0x00	; 0
    2f1c:	99 e0       	ldi	r25, 0x09	; 9
    2f1e:	c2 51       	subi	r28, 0x12	; 18
    2f20:	df 4f       	sbci	r29, 0xFF	; 255
    2f22:	98 83       	st	Y, r25
    2f24:	ce 5e       	subi	r28, 0xEE	; 238
    2f26:	d0 40       	sbci	r29, 0x00	; 0
    2f28:	c4 51       	subi	r28, 0x14	; 20
    2f2a:	df 4f       	sbci	r29, 0xFF	; 255
    2f2c:	a8 81       	ld	r26, Y
    2f2e:	b9 81       	ldd	r27, Y+1	; 0x01
    2f30:	cc 5e       	subi	r28, 0xEC	; 236
    2f32:	d0 40       	sbci	r29, 0x00	; 0
    2f34:	0c 90       	ld	r0, X
    2f36:	c4 51       	subi	r28, 0x14	; 20
    2f38:	df 4f       	sbci	r29, 0xFF	; 255
    2f3a:	e8 81       	ld	r30, Y
    2f3c:	f9 81       	ldd	r31, Y+1	; 0x01
    2f3e:	cc 5e       	subi	r28, 0xEC	; 236
    2f40:	d0 40       	sbci	r29, 0x00	; 0
    2f42:	31 96       	adiw	r30, 0x01	; 1
    2f44:	c4 51       	subi	r28, 0x14	; 20
    2f46:	df 4f       	sbci	r29, 0xFF	; 255
    2f48:	f9 83       	std	Y+1, r31	; 0x01
    2f4a:	e8 83       	st	Y, r30
    2f4c:	cc 5e       	subi	r28, 0xEC	; 236
    2f4e:	d0 40       	sbci	r29, 0x00	; 0
    2f50:	c6 51       	subi	r28, 0x16	; 22
    2f52:	df 4f       	sbci	r29, 0xFF	; 255
    2f54:	a8 81       	ld	r26, Y
    2f56:	b9 81       	ldd	r27, Y+1	; 0x01
    2f58:	ca 5e       	subi	r28, 0xEA	; 234
    2f5a:	d0 40       	sbci	r29, 0x00	; 0
    2f5c:	0c 92       	st	X, r0
    2f5e:	c6 51       	subi	r28, 0x16	; 22
    2f60:	df 4f       	sbci	r29, 0xFF	; 255
    2f62:	e8 81       	ld	r30, Y
    2f64:	f9 81       	ldd	r31, Y+1	; 0x01
    2f66:	ca 5e       	subi	r28, 0xEA	; 234
    2f68:	d0 40       	sbci	r29, 0x00	; 0
    2f6a:	31 96       	adiw	r30, 0x01	; 1
    2f6c:	c6 51       	subi	r28, 0x16	; 22
    2f6e:	df 4f       	sbci	r29, 0xFF	; 255
    2f70:	f9 83       	std	Y+1, r31	; 0x01
    2f72:	e8 83       	st	Y, r30
    2f74:	ca 5e       	subi	r28, 0xEA	; 234
    2f76:	d0 40       	sbci	r29, 0x00	; 0
    2f78:	c2 51       	subi	r28, 0x12	; 18
    2f7a:	df 4f       	sbci	r29, 0xFF	; 255
    2f7c:	f8 81       	ld	r31, Y
    2f7e:	ce 5e       	subi	r28, 0xEE	; 238
    2f80:	d0 40       	sbci	r29, 0x00	; 0
    2f82:	f1 50       	subi	r31, 0x01	; 1
    2f84:	c2 51       	subi	r28, 0x12	; 18
    2f86:	df 4f       	sbci	r29, 0xFF	; 255
    2f88:	f8 83       	st	Y, r31
    2f8a:	ce 5e       	subi	r28, 0xEE	; 238
    2f8c:	d0 40       	sbci	r29, 0x00	; 0
    2f8e:	c2 51       	subi	r28, 0x12	; 18
    2f90:	df 4f       	sbci	r29, 0xFF	; 255
    2f92:	28 81       	ld	r18, Y
    2f94:	ce 5e       	subi	r28, 0xEE	; 238
    2f96:	d0 40       	sbci	r29, 0x00	; 0
    2f98:	22 23       	and	r18, r18
    2f9a:	31 f6       	brne	.-116    	; 0x2f28 <main+0x29e>
	u8 message5[] = "I'm watching you";
    2f9c:	ce 01       	movw	r24, r28
    2f9e:	8a 5a       	subi	r24, 0xAA	; 170
    2fa0:	9f 4f       	sbci	r25, 0xFF	; 255
    2fa2:	c1 51       	subi	r28, 0x11	; 17
    2fa4:	df 4f       	sbci	r29, 0xFF	; 255
    2fa6:	99 83       	std	Y+1, r25	; 0x01
    2fa8:	88 83       	st	Y, r24
    2faa:	cf 5e       	subi	r28, 0xEF	; 239
    2fac:	d0 40       	sbci	r29, 0x00	; 0
    2fae:	87 e9       	ldi	r24, 0x97	; 151
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	cf 50       	subi	r28, 0x0F	; 15
    2fb4:	df 4f       	sbci	r29, 0xFF	; 255
    2fb6:	99 83       	std	Y+1, r25	; 0x01
    2fb8:	88 83       	st	Y, r24
    2fba:	c1 5f       	subi	r28, 0xF1	; 241
    2fbc:	d0 40       	sbci	r29, 0x00	; 0
    2fbe:	91 e1       	ldi	r25, 0x11	; 17
    2fc0:	cd 50       	subi	r28, 0x0D	; 13
    2fc2:	df 4f       	sbci	r29, 0xFF	; 255
    2fc4:	98 83       	st	Y, r25
    2fc6:	c3 5f       	subi	r28, 0xF3	; 243
    2fc8:	d0 40       	sbci	r29, 0x00	; 0
    2fca:	cf 50       	subi	r28, 0x0F	; 15
    2fcc:	df 4f       	sbci	r29, 0xFF	; 255
    2fce:	a8 81       	ld	r26, Y
    2fd0:	b9 81       	ldd	r27, Y+1	; 0x01
    2fd2:	c1 5f       	subi	r28, 0xF1	; 241
    2fd4:	d0 40       	sbci	r29, 0x00	; 0
    2fd6:	0c 90       	ld	r0, X
    2fd8:	cf 50       	subi	r28, 0x0F	; 15
    2fda:	df 4f       	sbci	r29, 0xFF	; 255
    2fdc:	e8 81       	ld	r30, Y
    2fde:	f9 81       	ldd	r31, Y+1	; 0x01
    2fe0:	c1 5f       	subi	r28, 0xF1	; 241
    2fe2:	d0 40       	sbci	r29, 0x00	; 0
    2fe4:	31 96       	adiw	r30, 0x01	; 1
    2fe6:	cf 50       	subi	r28, 0x0F	; 15
    2fe8:	df 4f       	sbci	r29, 0xFF	; 255
    2fea:	f9 83       	std	Y+1, r31	; 0x01
    2fec:	e8 83       	st	Y, r30
    2fee:	c1 5f       	subi	r28, 0xF1	; 241
    2ff0:	d0 40       	sbci	r29, 0x00	; 0
    2ff2:	c1 51       	subi	r28, 0x11	; 17
    2ff4:	df 4f       	sbci	r29, 0xFF	; 255
    2ff6:	a8 81       	ld	r26, Y
    2ff8:	b9 81       	ldd	r27, Y+1	; 0x01
    2ffa:	cf 5e       	subi	r28, 0xEF	; 239
    2ffc:	d0 40       	sbci	r29, 0x00	; 0
    2ffe:	0c 92       	st	X, r0
    3000:	c1 51       	subi	r28, 0x11	; 17
    3002:	df 4f       	sbci	r29, 0xFF	; 255
    3004:	e8 81       	ld	r30, Y
    3006:	f9 81       	ldd	r31, Y+1	; 0x01
    3008:	cf 5e       	subi	r28, 0xEF	; 239
    300a:	d0 40       	sbci	r29, 0x00	; 0
    300c:	31 96       	adiw	r30, 0x01	; 1
    300e:	c1 51       	subi	r28, 0x11	; 17
    3010:	df 4f       	sbci	r29, 0xFF	; 255
    3012:	f9 83       	std	Y+1, r31	; 0x01
    3014:	e8 83       	st	Y, r30
    3016:	cf 5e       	subi	r28, 0xEF	; 239
    3018:	d0 40       	sbci	r29, 0x00	; 0
    301a:	cd 50       	subi	r28, 0x0D	; 13
    301c:	df 4f       	sbci	r29, 0xFF	; 255
    301e:	f8 81       	ld	r31, Y
    3020:	c3 5f       	subi	r28, 0xF3	; 243
    3022:	d0 40       	sbci	r29, 0x00	; 0
    3024:	f1 50       	subi	r31, 0x01	; 1
    3026:	cd 50       	subi	r28, 0x0D	; 13
    3028:	df 4f       	sbci	r29, 0xFF	; 255
    302a:	f8 83       	st	Y, r31
    302c:	c3 5f       	subi	r28, 0xF3	; 243
    302e:	d0 40       	sbci	r29, 0x00	; 0
    3030:	cd 50       	subi	r28, 0x0D	; 13
    3032:	df 4f       	sbci	r29, 0xFF	; 255
    3034:	28 81       	ld	r18, Y
    3036:	c3 5f       	subi	r28, 0xF3	; 243
    3038:	d0 40       	sbci	r29, 0x00	; 0
    303a:	22 23       	and	r18, r18
    303c:	31 f6       	brne	.-116    	; 0x2fca <main+0x340>
	u8 message6[] = "You";
    303e:	fe 01       	movw	r30, r28
    3040:	e9 59       	subi	r30, 0x99	; 153
    3042:	ff 4f       	sbci	r31, 0xFF	; 255
    3044:	80 91 a8 00 	lds	r24, 0x00A8
    3048:	90 91 a9 00 	lds	r25, 0x00A9
    304c:	a0 91 aa 00 	lds	r26, 0x00AA
    3050:	b0 91 ab 00 	lds	r27, 0x00AB
    3054:	80 83       	st	Z, r24
    3056:	91 83       	std	Z+1, r25	; 0x01
    3058:	a2 83       	std	Z+2, r26	; 0x02
    305a:	b3 83       	std	Z+3, r27	; 0x03

	u8 received1[16] = ""; //buffer to hold the data
    305c:	fe 01       	movw	r30, r28
    305e:	e5 59       	subi	r30, 0x95	; 149
    3060:	ff 4f       	sbci	r31, 0xFF	; 255
    3062:	10 82       	st	Z, r1
    3064:	11 82       	std	Z+1, r1	; 0x01
    3066:	12 82       	std	Z+2, r1	; 0x02
    3068:	13 82       	std	Z+3, r1	; 0x03
    306a:	8c e0       	ldi	r24, 0x0C	; 12
    306c:	34 96       	adiw	r30, 0x04	; 4
    306e:	df 01       	movw	r26, r30
    3070:	28 2f       	mov	r18, r24
    3072:	1d 92       	st	X+, r1
    3074:	2a 95       	dec	r18
    3076:	e9 f7       	brne	.-6      	; 0x3072 <main+0x3e8>
	u8 received2[16] = "";
    3078:	fe 01       	movw	r30, r28
    307a:	e5 58       	subi	r30, 0x85	; 133
    307c:	ff 4f       	sbci	r31, 0xFF	; 255
    307e:	10 82       	st	Z, r1
    3080:	11 82       	std	Z+1, r1	; 0x01
    3082:	12 82       	std	Z+2, r1	; 0x02
    3084:	13 82       	std	Z+3, r1	; 0x03
    3086:	8c e0       	ldi	r24, 0x0C	; 12
    3088:	34 96       	adiw	r30, 0x04	; 4
    308a:	df 01       	movw	r26, r30
    308c:	28 2f       	mov	r18, r24
    308e:	1d 92       	st	X+, r1
    3090:	2a 95       	dec	r18
    3092:	e9 f7       	brne	.-6      	; 0x308e <main+0x404>
	u8 received3[16] = "";
    3094:	fe 01       	movw	r30, r28
    3096:	e5 57       	subi	r30, 0x75	; 117
    3098:	ff 4f       	sbci	r31, 0xFF	; 255
    309a:	10 82       	st	Z, r1
    309c:	11 82       	std	Z+1, r1	; 0x01
    309e:	12 82       	std	Z+2, r1	; 0x02
    30a0:	13 82       	std	Z+3, r1	; 0x03
    30a2:	8c e0       	ldi	r24, 0x0C	; 12
    30a4:	34 96       	adiw	r30, 0x04	; 4
    30a6:	df 01       	movw	r26, r30
    30a8:	28 2f       	mov	r18, r24
    30aa:	1d 92       	st	X+, r1
    30ac:	2a 95       	dec	r18
    30ae:	e9 f7       	brne	.-6      	; 0x30aa <main+0x420>
	u8 received4[16] = "";
    30b0:	fe 01       	movw	r30, r28
    30b2:	e5 56       	subi	r30, 0x65	; 101
    30b4:	ff 4f       	sbci	r31, 0xFF	; 255
    30b6:	10 82       	st	Z, r1
    30b8:	11 82       	std	Z+1, r1	; 0x01
    30ba:	12 82       	std	Z+2, r1	; 0x02
    30bc:	13 82       	std	Z+3, r1	; 0x03
    30be:	8c e0       	ldi	r24, 0x0C	; 12
    30c0:	34 96       	adiw	r30, 0x04	; 4
    30c2:	df 01       	movw	r26, r30
    30c4:	28 2f       	mov	r18, r24
    30c6:	1d 92       	st	X+, r1
    30c8:	2a 95       	dec	r18
    30ca:	e9 f7       	brne	.-6      	; 0x30c6 <main+0x43c>
	u8 received5[16] = "";
    30cc:	fe 01       	movw	r30, r28
    30ce:	e5 55       	subi	r30, 0x55	; 85
    30d0:	ff 4f       	sbci	r31, 0xFF	; 255
    30d2:	10 82       	st	Z, r1
    30d4:	11 82       	std	Z+1, r1	; 0x01
    30d6:	12 82       	std	Z+2, r1	; 0x02
    30d8:	13 82       	std	Z+3, r1	; 0x03
    30da:	8c e0       	ldi	r24, 0x0C	; 12
    30dc:	34 96       	adiw	r30, 0x04	; 4
    30de:	df 01       	movw	r26, r30
    30e0:	28 2f       	mov	r18, r24
    30e2:	1d 92       	st	X+, r1
    30e4:	2a 95       	dec	r18
    30e6:	e9 f7       	brne	.-6      	; 0x30e2 <main+0x458>
	u8 received6[16] = "";
    30e8:	fe 01       	movw	r30, r28
    30ea:	e5 54       	subi	r30, 0x45	; 69
    30ec:	ff 4f       	sbci	r31, 0xFF	; 255
    30ee:	10 82       	st	Z, r1
    30f0:	11 82       	std	Z+1, r1	; 0x01
    30f2:	12 82       	std	Z+2, r1	; 0x02
    30f4:	13 82       	std	Z+3, r1	; 0x03
    30f6:	8c e0       	ldi	r24, 0x0C	; 12
    30f8:	34 96       	adiw	r30, 0x04	; 4
    30fa:	df 01       	movw	r26, r30
    30fc:	28 2f       	mov	r18, r24
    30fe:	1d 92       	st	X+, r1
    3100:	2a 95       	dec	r18
    3102:	e9 f7       	brne	.-6      	; 0x30fe <main+0x474>
	// Write the string to EEPROM starting at address 0x0000
	EEPROM_WRITE_String(0, message1);
    3104:	9e 01       	movw	r18, r28
    3106:	21 5e       	subi	r18, 0xE1	; 225
    3108:	3f 4f       	sbci	r19, 0xFF	; 255
    310a:	80 e0       	ldi	r24, 0x00	; 0
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	b9 01       	movw	r22, r18
    3110:	0e 94 e5 13 	call	0x27ca	; 0x27ca <EEPROM_WRITE_String>
	EEPROM_WRITE_String(20, message2);
    3114:	9e 01       	movw	r18, r28
    3116:	20 5d       	subi	r18, 0xD0	; 208
    3118:	3f 4f       	sbci	r19, 0xFF	; 255
    311a:	84 e1       	ldi	r24, 0x14	; 20
    311c:	90 e0       	ldi	r25, 0x00	; 0
    311e:	b9 01       	movw	r22, r18
    3120:	0e 94 e5 13 	call	0x27ca	; 0x27ca <EEPROM_WRITE_String>
	EEPROM_WRITE_String(40, message3);
    3124:	9e 01       	movw	r18, r28
    3126:	25 5c       	subi	r18, 0xC5	; 197
    3128:	3f 4f       	sbci	r19, 0xFF	; 255
    312a:	88 e2       	ldi	r24, 0x28	; 40
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	b9 01       	movw	r22, r18
    3130:	0e 94 e5 13 	call	0x27ca	; 0x27ca <EEPROM_WRITE_String>
	EEPROM_WRITE_String(60, message4);
    3134:	9e 01       	movw	r18, r28
    3136:	23 5b       	subi	r18, 0xB3	; 179
    3138:	3f 4f       	sbci	r19, 0xFF	; 255
    313a:	8c e3       	ldi	r24, 0x3C	; 60
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	b9 01       	movw	r22, r18
    3140:	0e 94 e5 13 	call	0x27ca	; 0x27ca <EEPROM_WRITE_String>
	EEPROM_WRITE_String(80, message5);
    3144:	9e 01       	movw	r18, r28
    3146:	2a 5a       	subi	r18, 0xAA	; 170
    3148:	3f 4f       	sbci	r19, 0xFF	; 255
    314a:	80 e5       	ldi	r24, 0x50	; 80
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	b9 01       	movw	r22, r18
    3150:	0e 94 e5 13 	call	0x27ca	; 0x27ca <EEPROM_WRITE_String>
	EEPROM_WRITE_String(100, message6);
    3154:	9e 01       	movw	r18, r28
    3156:	29 59       	subi	r18, 0x99	; 153
    3158:	3f 4f       	sbci	r19, 0xFF	; 255
    315a:	84 e6       	ldi	r24, 0x64	; 100
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	b9 01       	movw	r22, r18
    3160:	0e 94 e5 13 	call	0x27ca	; 0x27ca <EEPROM_WRITE_String>
    3164:	80 e0       	ldi	r24, 0x00	; 0
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	a8 ec       	ldi	r26, 0xC8	; 200
    316a:	b2 e4       	ldi	r27, 0x42	; 66
    316c:	8b 87       	std	Y+11, r24	; 0x0b
    316e:	9c 87       	std	Y+12, r25	; 0x0c
    3170:	ad 87       	std	Y+13, r26	; 0x0d
    3172:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3174:	6b 85       	ldd	r22, Y+11	; 0x0b
    3176:	7c 85       	ldd	r23, Y+12	; 0x0c
    3178:	8d 85       	ldd	r24, Y+13	; 0x0d
    317a:	9e 85       	ldd	r25, Y+14	; 0x0e
    317c:	20 e0       	ldi	r18, 0x00	; 0
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	4a e7       	ldi	r20, 0x7A	; 122
    3182:	55 e4       	ldi	r21, 0x45	; 69
    3184:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3188:	dc 01       	movw	r26, r24
    318a:	cb 01       	movw	r24, r22
    318c:	8f 83       	std	Y+7, r24	; 0x07
    318e:	98 87       	std	Y+8, r25	; 0x08
    3190:	a9 87       	std	Y+9, r26	; 0x09
    3192:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3194:	6f 81       	ldd	r22, Y+7	; 0x07
    3196:	78 85       	ldd	r23, Y+8	; 0x08
    3198:	89 85       	ldd	r24, Y+9	; 0x09
    319a:	9a 85       	ldd	r25, Y+10	; 0x0a
    319c:	20 e0       	ldi	r18, 0x00	; 0
    319e:	30 e0       	ldi	r19, 0x00	; 0
    31a0:	40 e8       	ldi	r20, 0x80	; 128
    31a2:	5f e3       	ldi	r21, 0x3F	; 63
    31a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31a8:	88 23       	and	r24, r24
    31aa:	2c f4       	brge	.+10     	; 0x31b6 <main+0x52c>
		__ticks = 1;
    31ac:	81 e0       	ldi	r24, 0x01	; 1
    31ae:	90 e0       	ldi	r25, 0x00	; 0
    31b0:	9e 83       	std	Y+6, r25	; 0x06
    31b2:	8d 83       	std	Y+5, r24	; 0x05
    31b4:	3f c0       	rjmp	.+126    	; 0x3234 <main+0x5aa>
	else if (__tmp > 65535)
    31b6:	6f 81       	ldd	r22, Y+7	; 0x07
    31b8:	78 85       	ldd	r23, Y+8	; 0x08
    31ba:	89 85       	ldd	r24, Y+9	; 0x09
    31bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    31be:	20 e0       	ldi	r18, 0x00	; 0
    31c0:	3f ef       	ldi	r19, 0xFF	; 255
    31c2:	4f e7       	ldi	r20, 0x7F	; 127
    31c4:	57 e4       	ldi	r21, 0x47	; 71
    31c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31ca:	18 16       	cp	r1, r24
    31cc:	4c f5       	brge	.+82     	; 0x3220 <main+0x596>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    31d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    31d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    31d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    31d6:	20 e0       	ldi	r18, 0x00	; 0
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	40 e2       	ldi	r20, 0x20	; 32
    31dc:	51 e4       	ldi	r21, 0x41	; 65
    31de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e2:	dc 01       	movw	r26, r24
    31e4:	cb 01       	movw	r24, r22
    31e6:	bc 01       	movw	r22, r24
    31e8:	cd 01       	movw	r24, r26
    31ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ee:	dc 01       	movw	r26, r24
    31f0:	cb 01       	movw	r24, r22
    31f2:	9e 83       	std	Y+6, r25	; 0x06
    31f4:	8d 83       	std	Y+5, r24	; 0x05
    31f6:	0f c0       	rjmp	.+30     	; 0x3216 <main+0x58c>
    31f8:	80 e9       	ldi	r24, 0x90	; 144
    31fa:	91 e0       	ldi	r25, 0x01	; 1
    31fc:	9c 83       	std	Y+4, r25	; 0x04
    31fe:	8b 83       	std	Y+3, r24	; 0x03
    3200:	8b 81       	ldd	r24, Y+3	; 0x03
    3202:	9c 81       	ldd	r25, Y+4	; 0x04
    3204:	01 97       	sbiw	r24, 0x01	; 1
    3206:	f1 f7       	brne	.-4      	; 0x3204 <main+0x57a>
    3208:	9c 83       	std	Y+4, r25	; 0x04
    320a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    320c:	8d 81       	ldd	r24, Y+5	; 0x05
    320e:	9e 81       	ldd	r25, Y+6	; 0x06
    3210:	01 97       	sbiw	r24, 0x01	; 1
    3212:	9e 83       	std	Y+6, r25	; 0x06
    3214:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3216:	8d 81       	ldd	r24, Y+5	; 0x05
    3218:	9e 81       	ldd	r25, Y+6	; 0x06
    321a:	00 97       	sbiw	r24, 0x00	; 0
    321c:	69 f7       	brne	.-38     	; 0x31f8 <main+0x56e>
    321e:	14 c0       	rjmp	.+40     	; 0x3248 <main+0x5be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3220:	6f 81       	ldd	r22, Y+7	; 0x07
    3222:	78 85       	ldd	r23, Y+8	; 0x08
    3224:	89 85       	ldd	r24, Y+9	; 0x09
    3226:	9a 85       	ldd	r25, Y+10	; 0x0a
    3228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    322c:	dc 01       	movw	r26, r24
    322e:	cb 01       	movw	r24, r22
    3230:	9e 83       	std	Y+6, r25	; 0x06
    3232:	8d 83       	std	Y+5, r24	; 0x05
    3234:	8d 81       	ldd	r24, Y+5	; 0x05
    3236:	9e 81       	ldd	r25, Y+6	; 0x06
    3238:	9a 83       	std	Y+2, r25	; 0x02
    323a:	89 83       	std	Y+1, r24	; 0x01
    323c:	89 81       	ldd	r24, Y+1	; 0x01
    323e:	9a 81       	ldd	r25, Y+2	; 0x02
    3240:	01 97       	sbiw	r24, 0x01	; 1
    3242:	f1 f7       	brne	.-4      	; 0x3240 <main+0x5b6>
    3244:	9a 83       	std	Y+2, r25	; 0x02
    3246:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);

	EEPROM_READ_String(0, received1, sizeof(message1));
    3248:	9e 01       	movw	r18, r28
    324a:	25 59       	subi	r18, 0x95	; 149
    324c:	3f 4f       	sbci	r19, 0xFF	; 255
    324e:	80 e0       	ldi	r24, 0x00	; 0
    3250:	90 e0       	ldi	r25, 0x00	; 0
    3252:	b9 01       	movw	r22, r18
    3254:	41 e1       	ldi	r20, 0x11	; 17
    3256:	50 e0       	ldi	r21, 0x00	; 0
    3258:	0e 94 32 15 	call	0x2a64	; 0x2a64 <EEPROM_READ_String>
	EEPROM_READ_String(20, received1, sizeof(message2));
    325c:	9e 01       	movw	r18, r28
    325e:	25 59       	subi	r18, 0x95	; 149
    3260:	3f 4f       	sbci	r19, 0xFF	; 255
    3262:	84 e1       	ldi	r24, 0x14	; 20
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	b9 01       	movw	r22, r18
    3268:	4b e0       	ldi	r20, 0x0B	; 11
    326a:	50 e0       	ldi	r21, 0x00	; 0
    326c:	0e 94 32 15 	call	0x2a64	; 0x2a64 <EEPROM_READ_String>
	EEPROM_READ_String(40, received1, sizeof(message3));
    3270:	9e 01       	movw	r18, r28
    3272:	25 59       	subi	r18, 0x95	; 149
    3274:	3f 4f       	sbci	r19, 0xFF	; 255
    3276:	88 e2       	ldi	r24, 0x28	; 40
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	b9 01       	movw	r22, r18
    327c:	42 e1       	ldi	r20, 0x12	; 18
    327e:	50 e0       	ldi	r21, 0x00	; 0
    3280:	0e 94 32 15 	call	0x2a64	; 0x2a64 <EEPROM_READ_String>
	EEPROM_READ_String(60, received1, sizeof(message4));
    3284:	9e 01       	movw	r18, r28
    3286:	25 59       	subi	r18, 0x95	; 149
    3288:	3f 4f       	sbci	r19, 0xFF	; 255
    328a:	8c e3       	ldi	r24, 0x3C	; 60
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	b9 01       	movw	r22, r18
    3290:	49 e0       	ldi	r20, 0x09	; 9
    3292:	50 e0       	ldi	r21, 0x00	; 0
    3294:	0e 94 32 15 	call	0x2a64	; 0x2a64 <EEPROM_READ_String>
	EEPROM_READ_String(80, received1, sizeof(message5));
    3298:	9e 01       	movw	r18, r28
    329a:	25 59       	subi	r18, 0x95	; 149
    329c:	3f 4f       	sbci	r19, 0xFF	; 255
    329e:	80 e5       	ldi	r24, 0x50	; 80
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	b9 01       	movw	r22, r18
    32a4:	41 e1       	ldi	r20, 0x11	; 17
    32a6:	50 e0       	ldi	r21, 0x00	; 0
    32a8:	0e 94 32 15 	call	0x2a64	; 0x2a64 <EEPROM_READ_String>
	EEPROM_READ_String(100, received1, sizeof(message6));
    32ac:	9e 01       	movw	r18, r28
    32ae:	25 59       	subi	r18, 0x95	; 149
    32b0:	3f 4f       	sbci	r19, 0xFF	; 255
    32b2:	84 e6       	ldi	r24, 0x64	; 100
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	b9 01       	movw	r22, r18
    32b8:	44 e0       	ldi	r20, 0x04	; 4
    32ba:	50 e0       	ldi	r21, 0x00	; 0
    32bc:	0e 94 32 15 	call	0x2a64	; 0x2a64 <EEPROM_READ_String>

	received1[sizeof(message1) - 1] = '\0';
    32c0:	fe 01       	movw	r30, r28
    32c2:	e5 59       	subi	r30, 0x95	; 149
    32c4:	ff 4f       	sbci	r31, 0xFF	; 255
    32c6:	10 8a       	std	Z+16, r1	; 0x10
	received2[sizeof(message2) - 1] = '\0';
    32c8:	fe 01       	movw	r30, r28
    32ca:	e5 58       	subi	r30, 0x85	; 133
    32cc:	ff 4f       	sbci	r31, 0xFF	; 255
    32ce:	12 86       	std	Z+10, r1	; 0x0a
	received3[sizeof(message3) - 1] = '\0';
    32d0:	fe 01       	movw	r30, r28
    32d2:	e5 57       	subi	r30, 0x75	; 117
    32d4:	ff 4f       	sbci	r31, 0xFF	; 255
    32d6:	11 8a       	std	Z+17, r1	; 0x11
	received4[sizeof(message4) - 1] = '\0';
    32d8:	fe 01       	movw	r30, r28
    32da:	e5 56       	subi	r30, 0x65	; 101
    32dc:	ff 4f       	sbci	r31, 0xFF	; 255
    32de:	10 86       	std	Z+8, r1	; 0x08
	received5[sizeof(message5) - 1] = '\0';
    32e0:	fe 01       	movw	r30, r28
    32e2:	e5 55       	subi	r30, 0x55	; 85
    32e4:	ff 4f       	sbci	r31, 0xFF	; 255
    32e6:	10 8a       	std	Z+16, r1	; 0x10
	received6[sizeof(message6) - 1] = '\0';
    32e8:	fe 01       	movw	r30, r28
    32ea:	e5 54       	subi	r30, 0x45	; 69
    32ec:	ff 4f       	sbci	r31, 0xFF	; 255
    32ee:	13 82       	std	Z+3, r1	; 0x03

	while (1) {
		u8 currentMessage[16] = "";
    32f0:	fe 01       	movw	r30, r28
    32f2:	e5 53       	subi	r30, 0x35	; 53
    32f4:	ff 4f       	sbci	r31, 0xFF	; 255
    32f6:	10 82       	st	Z, r1
    32f8:	11 82       	std	Z+1, r1	; 0x01
    32fa:	12 82       	std	Z+2, r1	; 0x02
    32fc:	13 82       	std	Z+3, r1	; 0x03
    32fe:	8c e0       	ldi	r24, 0x0C	; 12
    3300:	34 96       	adiw	r30, 0x04	; 4
    3302:	df 01       	movw	r26, r30
    3304:	28 2f       	mov	r18, r24
    3306:	1d 92       	st	X+, r1
    3308:	2a 95       	dec	r18
    330a:	e9 f7       	brne	.-6      	; 0x3306 <main+0x67c>

		if (Digital_Values[0] > 837 && Digital_Values[2] > 837
    330c:	80 91 df 00 	lds	r24, 0x00DF
    3310:	90 91 e0 00 	lds	r25, 0x00E0
    3314:	a3 e0       	ldi	r26, 0x03	; 3
    3316:	86 34       	cpi	r24, 0x46	; 70
    3318:	9a 07       	cpc	r25, r26
    331a:	50 f1       	brcs	.+84     	; 0x3370 <main+0x6e6>
    331c:	80 91 e3 00 	lds	r24, 0x00E3
    3320:	90 91 e4 00 	lds	r25, 0x00E4
    3324:	b3 e0       	ldi	r27, 0x03	; 3
    3326:	86 34       	cpi	r24, 0x46	; 70
    3328:	9b 07       	cpc	r25, r27
    332a:	10 f1       	brcs	.+68     	; 0x3370 <main+0x6e6>
    332c:	80 91 e5 00 	lds	r24, 0x00E5
    3330:	90 91 e6 00 	lds	r25, 0x00E6
    3334:	e3 e0       	ldi	r30, 0x03	; 3
    3336:	86 34       	cpi	r24, 0x46	; 70
    3338:	9e 07       	cpc	r25, r30
    333a:	d0 f0       	brcs	.+52     	; 0x3370 <main+0x6e6>
    333c:	80 91 e7 00 	lds	r24, 0x00E7
    3340:	90 91 e8 00 	lds	r25, 0x00E8
    3344:	f3 e0       	ldi	r31, 0x03	; 3
    3346:	85 34       	cpi	r24, 0x45	; 69
    3348:	9f 07       	cpc	r25, r31
    334a:	90 f4       	brcc	.+36     	; 0x3370 <main+0x6e6>
    334c:	80 91 e1 00 	lds	r24, 0x00E1
    3350:	90 91 e2 00 	lds	r25, 0x00E2
    3354:	23 e0       	ldi	r18, 0x03	; 3
    3356:	85 34       	cpi	r24, 0x45	; 69
    3358:	92 07       	cpc	r25, r18
    335a:	50 f4       	brcc	.+20     	; 0x3370 <main+0x6e6>
				&& Digital_Values[3] > 837 && Digital_Values[4] < 837
				&& Digital_Values[1] < 837) {
			strcpy(currentMessage, message1);
    335c:	ce 01       	movw	r24, r28
    335e:	85 53       	subi	r24, 0x35	; 53
    3360:	9f 4f       	sbci	r25, 0xFF	; 255
    3362:	9e 01       	movw	r18, r28
    3364:	21 5e       	subi	r18, 0xE1	; 225
    3366:	3f 4f       	sbci	r19, 0xFF	; 255
    3368:	b9 01       	movw	r22, r18
    336a:	0e 94 90 1b 	call	0x3720	; 0x3720 <strcpy>
    336e:	fc c0       	rjmp	.+504    	; 0x3568 <main+0x8de>
		} else if (Digital_Values[2] > 837 && Digital_Values[3] > 837
    3370:	80 91 e3 00 	lds	r24, 0x00E3
    3374:	90 91 e4 00 	lds	r25, 0x00E4
    3378:	a3 e0       	ldi	r26, 0x03	; 3
    337a:	86 34       	cpi	r24, 0x46	; 70
    337c:	9a 07       	cpc	r25, r26
    337e:	50 f1       	brcs	.+84     	; 0x33d4 <main+0x74a>
    3380:	80 91 e5 00 	lds	r24, 0x00E5
    3384:	90 91 e6 00 	lds	r25, 0x00E6
    3388:	b3 e0       	ldi	r27, 0x03	; 3
    338a:	86 34       	cpi	r24, 0x46	; 70
    338c:	9b 07       	cpc	r25, r27
    338e:	10 f1       	brcs	.+68     	; 0x33d4 <main+0x74a>
    3390:	80 91 df 00 	lds	r24, 0x00DF
    3394:	90 91 e0 00 	lds	r25, 0x00E0
    3398:	e3 e0       	ldi	r30, 0x03	; 3
    339a:	85 34       	cpi	r24, 0x45	; 69
    339c:	9e 07       	cpc	r25, r30
    339e:	d0 f4       	brcc	.+52     	; 0x33d4 <main+0x74a>
    33a0:	80 91 e1 00 	lds	r24, 0x00E1
    33a4:	90 91 e2 00 	lds	r25, 0x00E2
    33a8:	f3 e0       	ldi	r31, 0x03	; 3
    33aa:	85 34       	cpi	r24, 0x45	; 69
    33ac:	9f 07       	cpc	r25, r31
    33ae:	90 f4       	brcc	.+36     	; 0x33d4 <main+0x74a>
    33b0:	80 91 e7 00 	lds	r24, 0x00E7
    33b4:	90 91 e8 00 	lds	r25, 0x00E8
    33b8:	23 e0       	ldi	r18, 0x03	; 3
    33ba:	85 34       	cpi	r24, 0x45	; 69
    33bc:	92 07       	cpc	r25, r18
    33be:	50 f4       	brcc	.+20     	; 0x33d4 <main+0x74a>
				&& Digital_Values[0] < 837 && Digital_Values[1] < 837
				&& Digital_Values[4] < 837) {
			strcpy(currentMessage, message2);
    33c0:	ce 01       	movw	r24, r28
    33c2:	85 53       	subi	r24, 0x35	; 53
    33c4:	9f 4f       	sbci	r25, 0xFF	; 255
    33c6:	9e 01       	movw	r18, r28
    33c8:	20 5d       	subi	r18, 0xD0	; 208
    33ca:	3f 4f       	sbci	r19, 0xFF	; 255
    33cc:	b9 01       	movw	r22, r18
    33ce:	0e 94 90 1b 	call	0x3720	; 0x3720 <strcpy>
    33d2:	ca c0       	rjmp	.+404    	; 0x3568 <main+0x8de>
		} else if (Digital_Values[3] > 837 && Digital_Values[0] < 837
    33d4:	80 91 e5 00 	lds	r24, 0x00E5
    33d8:	90 91 e6 00 	lds	r25, 0x00E6
    33dc:	a3 e0       	ldi	r26, 0x03	; 3
    33de:	86 34       	cpi	r24, 0x46	; 70
    33e0:	9a 07       	cpc	r25, r26
    33e2:	50 f1       	brcs	.+84     	; 0x3438 <main+0x7ae>
    33e4:	80 91 df 00 	lds	r24, 0x00DF
    33e8:	90 91 e0 00 	lds	r25, 0x00E0
    33ec:	b3 e0       	ldi	r27, 0x03	; 3
    33ee:	85 34       	cpi	r24, 0x45	; 69
    33f0:	9b 07       	cpc	r25, r27
    33f2:	10 f5       	brcc	.+68     	; 0x3438 <main+0x7ae>
    33f4:	80 91 e1 00 	lds	r24, 0x00E1
    33f8:	90 91 e2 00 	lds	r25, 0x00E2
    33fc:	e3 e0       	ldi	r30, 0x03	; 3
    33fe:	85 34       	cpi	r24, 0x45	; 69
    3400:	9e 07       	cpc	r25, r30
    3402:	d0 f4       	brcc	.+52     	; 0x3438 <main+0x7ae>
    3404:	80 91 e3 00 	lds	r24, 0x00E3
    3408:	90 91 e4 00 	lds	r25, 0x00E4
    340c:	f3 e0       	ldi	r31, 0x03	; 3
    340e:	85 34       	cpi	r24, 0x45	; 69
    3410:	9f 07       	cpc	r25, r31
    3412:	90 f4       	brcc	.+36     	; 0x3438 <main+0x7ae>
    3414:	80 91 e7 00 	lds	r24, 0x00E7
    3418:	90 91 e8 00 	lds	r25, 0x00E8
    341c:	23 e0       	ldi	r18, 0x03	; 3
    341e:	85 34       	cpi	r24, 0x45	; 69
    3420:	92 07       	cpc	r25, r18
    3422:	50 f4       	brcc	.+20     	; 0x3438 <main+0x7ae>
				&& Digital_Values[1] < 837 && Digital_Values[2] < 837
				&& Digital_Values[4] < 837) {
			strcpy(currentMessage, message3);
    3424:	ce 01       	movw	r24, r28
    3426:	85 53       	subi	r24, 0x35	; 53
    3428:	9f 4f       	sbci	r25, 0xFF	; 255
    342a:	9e 01       	movw	r18, r28
    342c:	25 5c       	subi	r18, 0xC5	; 197
    342e:	3f 4f       	sbci	r19, 0xFF	; 255
    3430:	b9 01       	movw	r22, r18
    3432:	0e 94 90 1b 	call	0x3720	; 0x3720 <strcpy>
    3436:	98 c0       	rjmp	.+304    	; 0x3568 <main+0x8de>
		} else if (Digital_Values[1] > 837 && Digital_Values[2] > 837
    3438:	80 91 e1 00 	lds	r24, 0x00E1
    343c:	90 91 e2 00 	lds	r25, 0x00E2
    3440:	a3 e0       	ldi	r26, 0x03	; 3
    3442:	86 34       	cpi	r24, 0x46	; 70
    3444:	9a 07       	cpc	r25, r26
    3446:	50 f1       	brcs	.+84     	; 0x349c <main+0x812>
    3448:	80 91 e3 00 	lds	r24, 0x00E3
    344c:	90 91 e4 00 	lds	r25, 0x00E4
    3450:	b3 e0       	ldi	r27, 0x03	; 3
    3452:	86 34       	cpi	r24, 0x46	; 70
    3454:	9b 07       	cpc	r25, r27
    3456:	10 f1       	brcs	.+68     	; 0x349c <main+0x812>
    3458:	80 91 e5 00 	lds	r24, 0x00E5
    345c:	90 91 e6 00 	lds	r25, 0x00E6
    3460:	e3 e0       	ldi	r30, 0x03	; 3
    3462:	86 34       	cpi	r24, 0x46	; 70
    3464:	9e 07       	cpc	r25, r30
    3466:	d0 f0       	brcs	.+52     	; 0x349c <main+0x812>
    3468:	80 91 e7 00 	lds	r24, 0x00E7
    346c:	90 91 e8 00 	lds	r25, 0x00E8
    3470:	f3 e0       	ldi	r31, 0x03	; 3
    3472:	86 34       	cpi	r24, 0x46	; 70
    3474:	9f 07       	cpc	r25, r31
    3476:	90 f0       	brcs	.+36     	; 0x349c <main+0x812>
    3478:	80 91 df 00 	lds	r24, 0x00DF
    347c:	90 91 e0 00 	lds	r25, 0x00E0
    3480:	23 e0       	ldi	r18, 0x03	; 3
    3482:	85 34       	cpi	r24, 0x45	; 69
    3484:	92 07       	cpc	r25, r18
    3486:	50 f4       	brcc	.+20     	; 0x349c <main+0x812>
				&& Digital_Values[3] > 837 && Digital_Values[4] > 837
				&& Digital_Values[0] < 837) {
			strcpy(currentMessage, message4);
    3488:	ce 01       	movw	r24, r28
    348a:	85 53       	subi	r24, 0x35	; 53
    348c:	9f 4f       	sbci	r25, 0xFF	; 255
    348e:	9e 01       	movw	r18, r28
    3490:	23 5b       	subi	r18, 0xB3	; 179
    3492:	3f 4f       	sbci	r19, 0xFF	; 255
    3494:	b9 01       	movw	r22, r18
    3496:	0e 94 90 1b 	call	0x3720	; 0x3720 <strcpy>
    349a:	66 c0       	rjmp	.+204    	; 0x3568 <main+0x8de>
		} else if (Digital_Values[0] > 837 && Digital_Values[3] > 837
    349c:	80 91 df 00 	lds	r24, 0x00DF
    34a0:	90 91 e0 00 	lds	r25, 0x00E0
    34a4:	a3 e0       	ldi	r26, 0x03	; 3
    34a6:	86 34       	cpi	r24, 0x46	; 70
    34a8:	9a 07       	cpc	r25, r26
    34aa:	50 f1       	brcs	.+84     	; 0x3500 <main+0x876>
    34ac:	80 91 e5 00 	lds	r24, 0x00E5
    34b0:	90 91 e6 00 	lds	r25, 0x00E6
    34b4:	b3 e0       	ldi	r27, 0x03	; 3
    34b6:	86 34       	cpi	r24, 0x46	; 70
    34b8:	9b 07       	cpc	r25, r27
    34ba:	10 f1       	brcs	.+68     	; 0x3500 <main+0x876>
    34bc:	80 91 e7 00 	lds	r24, 0x00E7
    34c0:	90 91 e8 00 	lds	r25, 0x00E8
    34c4:	e3 e0       	ldi	r30, 0x03	; 3
    34c6:	86 34       	cpi	r24, 0x46	; 70
    34c8:	9e 07       	cpc	r25, r30
    34ca:	d0 f0       	brcs	.+52     	; 0x3500 <main+0x876>
    34cc:	80 91 e3 00 	lds	r24, 0x00E3
    34d0:	90 91 e4 00 	lds	r25, 0x00E4
    34d4:	f3 e0       	ldi	r31, 0x03	; 3
    34d6:	85 34       	cpi	r24, 0x45	; 69
    34d8:	9f 07       	cpc	r25, r31
    34da:	90 f4       	brcc	.+36     	; 0x3500 <main+0x876>
    34dc:	80 91 e1 00 	lds	r24, 0x00E1
    34e0:	90 91 e2 00 	lds	r25, 0x00E2
    34e4:	23 e0       	ldi	r18, 0x03	; 3
    34e6:	85 34       	cpi	r24, 0x45	; 69
    34e8:	92 07       	cpc	r25, r18
    34ea:	50 f4       	brcc	.+20     	; 0x3500 <main+0x876>
				&& Digital_Values[4] > 837 && Digital_Values[2] < 837
				&& Digital_Values[1] < 837) {
			strcpy(currentMessage, message5);
    34ec:	ce 01       	movw	r24, r28
    34ee:	85 53       	subi	r24, 0x35	; 53
    34f0:	9f 4f       	sbci	r25, 0xFF	; 255
    34f2:	9e 01       	movw	r18, r28
    34f4:	2a 5a       	subi	r18, 0xAA	; 170
    34f6:	3f 4f       	sbci	r19, 0xFF	; 255
    34f8:	b9 01       	movw	r22, r18
    34fa:	0e 94 90 1b 	call	0x3720	; 0x3720 <strcpy>
    34fe:	34 c0       	rjmp	.+104    	; 0x3568 <main+0x8de>
		} else if (Digital_Values[0] > 837 && Digital_Values[3] > 837
    3500:	80 91 df 00 	lds	r24, 0x00DF
    3504:	90 91 e0 00 	lds	r25, 0x00E0
    3508:	a3 e0       	ldi	r26, 0x03	; 3
    350a:	86 34       	cpi	r24, 0x46	; 70
    350c:	9a 07       	cpc	r25, r26
    350e:	50 f1       	brcs	.+84     	; 0x3564 <main+0x8da>
    3510:	80 91 e5 00 	lds	r24, 0x00E5
    3514:	90 91 e6 00 	lds	r25, 0x00E6
    3518:	b3 e0       	ldi	r27, 0x03	; 3
    351a:	86 34       	cpi	r24, 0x46	; 70
    351c:	9b 07       	cpc	r25, r27
    351e:	10 f1       	brcs	.+68     	; 0x3564 <main+0x8da>
    3520:	80 91 e7 00 	lds	r24, 0x00E7
    3524:	90 91 e8 00 	lds	r25, 0x00E8
    3528:	e3 e0       	ldi	r30, 0x03	; 3
    352a:	86 34       	cpi	r24, 0x46	; 70
    352c:	9e 07       	cpc	r25, r30
    352e:	d0 f0       	brcs	.+52     	; 0x3564 <main+0x8da>
    3530:	80 91 e3 00 	lds	r24, 0x00E3
    3534:	90 91 e4 00 	lds	r25, 0x00E4
    3538:	f3 e0       	ldi	r31, 0x03	; 3
    353a:	86 34       	cpi	r24, 0x46	; 70
    353c:	9f 07       	cpc	r25, r31
    353e:	90 f0       	brcs	.+36     	; 0x3564 <main+0x8da>
    3540:	80 91 e1 00 	lds	r24, 0x00E1
    3544:	90 91 e2 00 	lds	r25, 0x00E2
    3548:	23 e0       	ldi	r18, 0x03	; 3
    354a:	85 34       	cpi	r24, 0x45	; 69
    354c:	92 07       	cpc	r25, r18
    354e:	50 f4       	brcc	.+20     	; 0x3564 <main+0x8da>
				&& Digital_Values[4] > 837 && Digital_Values[2] > 837
				&& Digital_Values[1] < 837) {
			strcpy(currentMessage, message6);
    3550:	ce 01       	movw	r24, r28
    3552:	85 53       	subi	r24, 0x35	; 53
    3554:	9f 4f       	sbci	r25, 0xFF	; 255
    3556:	9e 01       	movw	r18, r28
    3558:	29 59       	subi	r18, 0x99	; 153
    355a:	3f 4f       	sbci	r19, 0xFF	; 255
    355c:	b9 01       	movw	r22, r18
    355e:	0e 94 90 1b 	call	0x3720	; 0x3720 <strcpy>
    3562:	02 c0       	rjmp	.+4      	; 0x3568 <main+0x8de>
		} else {
			LCD_VoidClearScreen();
    3564:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <LCD_VoidClearScreen>
		}

		if (strcmp(lastMessage, currentMessage) != 0) // to display the sentence on LCD
    3568:	ce 01       	movw	r24, r28
    356a:	0f 96       	adiw	r24, 0x0f	; 15
    356c:	9e 01       	movw	r18, r28
    356e:	25 53       	subi	r18, 0x35	; 53
    3570:	3f 4f       	sbci	r19, 0xFF	; 255
    3572:	b9 01       	movw	r22, r18
    3574:	0e 94 87 1b 	call	0x370e	; 0x370e <strcmp>
    3578:	00 97       	sbiw	r24, 0x00	; 0
    357a:	09 f4       	brne	.+2      	; 0x357e <main+0x8f4>
    357c:	b9 ce       	rjmp	.-654    	; 0x32f0 <main+0x666>
		{
			displayMessage(currentMessage);
    357e:	ce 01       	movw	r24, r28
    3580:	85 53       	subi	r24, 0x35	; 53
    3582:	9f 4f       	sbci	r25, 0xFF	; 255
    3584:	0e 94 36 13 	call	0x266c	; 0x266c <displayMessage>
			strcpy(lastMessage, currentMessage);
    3588:	ce 01       	movw	r24, r28
    358a:	0f 96       	adiw	r24, 0x0f	; 15
    358c:	9e 01       	movw	r18, r28
    358e:	25 53       	subi	r18, 0x35	; 53
    3590:	3f 4f       	sbci	r19, 0xFF	; 255
    3592:	b9 01       	movw	r22, r18
    3594:	0e 94 90 1b 	call	0x3720	; 0x3720 <strcpy>
    3598:	ab ce       	rjmp	.-682    	; 0x32f0 <main+0x666>

0000359a <__mulsi3>:
    359a:	62 9f       	mul	r22, r18
    359c:	d0 01       	movw	r26, r0
    359e:	73 9f       	mul	r23, r19
    35a0:	f0 01       	movw	r30, r0
    35a2:	82 9f       	mul	r24, r18
    35a4:	e0 0d       	add	r30, r0
    35a6:	f1 1d       	adc	r31, r1
    35a8:	64 9f       	mul	r22, r20
    35aa:	e0 0d       	add	r30, r0
    35ac:	f1 1d       	adc	r31, r1
    35ae:	92 9f       	mul	r25, r18
    35b0:	f0 0d       	add	r31, r0
    35b2:	83 9f       	mul	r24, r19
    35b4:	f0 0d       	add	r31, r0
    35b6:	74 9f       	mul	r23, r20
    35b8:	f0 0d       	add	r31, r0
    35ba:	65 9f       	mul	r22, r21
    35bc:	f0 0d       	add	r31, r0
    35be:	99 27       	eor	r25, r25
    35c0:	72 9f       	mul	r23, r18
    35c2:	b0 0d       	add	r27, r0
    35c4:	e1 1d       	adc	r30, r1
    35c6:	f9 1f       	adc	r31, r25
    35c8:	63 9f       	mul	r22, r19
    35ca:	b0 0d       	add	r27, r0
    35cc:	e1 1d       	adc	r30, r1
    35ce:	f9 1f       	adc	r31, r25
    35d0:	bd 01       	movw	r22, r26
    35d2:	cf 01       	movw	r24, r30
    35d4:	11 24       	eor	r1, r1
    35d6:	08 95       	ret

000035d8 <__divmodhi4>:
    35d8:	97 fb       	bst	r25, 7
    35da:	09 2e       	mov	r0, r25
    35dc:	07 26       	eor	r0, r23
    35de:	0a d0       	rcall	.+20     	; 0x35f4 <__divmodhi4_neg1>
    35e0:	77 fd       	sbrc	r23, 7
    35e2:	04 d0       	rcall	.+8      	; 0x35ec <__divmodhi4_neg2>
    35e4:	49 d0       	rcall	.+146    	; 0x3678 <__udivmodhi4>
    35e6:	06 d0       	rcall	.+12     	; 0x35f4 <__divmodhi4_neg1>
    35e8:	00 20       	and	r0, r0
    35ea:	1a f4       	brpl	.+6      	; 0x35f2 <__divmodhi4_exit>

000035ec <__divmodhi4_neg2>:
    35ec:	70 95       	com	r23
    35ee:	61 95       	neg	r22
    35f0:	7f 4f       	sbci	r23, 0xFF	; 255

000035f2 <__divmodhi4_exit>:
    35f2:	08 95       	ret

000035f4 <__divmodhi4_neg1>:
    35f4:	f6 f7       	brtc	.-4      	; 0x35f2 <__divmodhi4_exit>
    35f6:	90 95       	com	r25
    35f8:	81 95       	neg	r24
    35fa:	9f 4f       	sbci	r25, 0xFF	; 255
    35fc:	08 95       	ret

000035fe <__udivmodsi4>:
    35fe:	a1 e2       	ldi	r26, 0x21	; 33
    3600:	1a 2e       	mov	r1, r26
    3602:	aa 1b       	sub	r26, r26
    3604:	bb 1b       	sub	r27, r27
    3606:	fd 01       	movw	r30, r26
    3608:	0d c0       	rjmp	.+26     	; 0x3624 <__udivmodsi4_ep>

0000360a <__udivmodsi4_loop>:
    360a:	aa 1f       	adc	r26, r26
    360c:	bb 1f       	adc	r27, r27
    360e:	ee 1f       	adc	r30, r30
    3610:	ff 1f       	adc	r31, r31
    3612:	a2 17       	cp	r26, r18
    3614:	b3 07       	cpc	r27, r19
    3616:	e4 07       	cpc	r30, r20
    3618:	f5 07       	cpc	r31, r21
    361a:	20 f0       	brcs	.+8      	; 0x3624 <__udivmodsi4_ep>
    361c:	a2 1b       	sub	r26, r18
    361e:	b3 0b       	sbc	r27, r19
    3620:	e4 0b       	sbc	r30, r20
    3622:	f5 0b       	sbc	r31, r21

00003624 <__udivmodsi4_ep>:
    3624:	66 1f       	adc	r22, r22
    3626:	77 1f       	adc	r23, r23
    3628:	88 1f       	adc	r24, r24
    362a:	99 1f       	adc	r25, r25
    362c:	1a 94       	dec	r1
    362e:	69 f7       	brne	.-38     	; 0x360a <__udivmodsi4_loop>
    3630:	60 95       	com	r22
    3632:	70 95       	com	r23
    3634:	80 95       	com	r24
    3636:	90 95       	com	r25
    3638:	9b 01       	movw	r18, r22
    363a:	ac 01       	movw	r20, r24
    363c:	bd 01       	movw	r22, r26
    363e:	cf 01       	movw	r24, r30
    3640:	08 95       	ret

00003642 <__divmodsi4>:
    3642:	97 fb       	bst	r25, 7
    3644:	09 2e       	mov	r0, r25
    3646:	05 26       	eor	r0, r21
    3648:	0e d0       	rcall	.+28     	; 0x3666 <__divmodsi4_neg1>
    364a:	57 fd       	sbrc	r21, 7
    364c:	04 d0       	rcall	.+8      	; 0x3656 <__divmodsi4_neg2>
    364e:	d7 df       	rcall	.-82     	; 0x35fe <__udivmodsi4>
    3650:	0a d0       	rcall	.+20     	; 0x3666 <__divmodsi4_neg1>
    3652:	00 1c       	adc	r0, r0
    3654:	38 f4       	brcc	.+14     	; 0x3664 <__divmodsi4_exit>

00003656 <__divmodsi4_neg2>:
    3656:	50 95       	com	r21
    3658:	40 95       	com	r20
    365a:	30 95       	com	r19
    365c:	21 95       	neg	r18
    365e:	3f 4f       	sbci	r19, 0xFF	; 255
    3660:	4f 4f       	sbci	r20, 0xFF	; 255
    3662:	5f 4f       	sbci	r21, 0xFF	; 255

00003664 <__divmodsi4_exit>:
    3664:	08 95       	ret

00003666 <__divmodsi4_neg1>:
    3666:	f6 f7       	brtc	.-4      	; 0x3664 <__divmodsi4_exit>
    3668:	90 95       	com	r25
    366a:	80 95       	com	r24
    366c:	70 95       	com	r23
    366e:	61 95       	neg	r22
    3670:	7f 4f       	sbci	r23, 0xFF	; 255
    3672:	8f 4f       	sbci	r24, 0xFF	; 255
    3674:	9f 4f       	sbci	r25, 0xFF	; 255
    3676:	08 95       	ret

00003678 <__udivmodhi4>:
    3678:	aa 1b       	sub	r26, r26
    367a:	bb 1b       	sub	r27, r27
    367c:	51 e1       	ldi	r21, 0x11	; 17
    367e:	07 c0       	rjmp	.+14     	; 0x368e <__udivmodhi4_ep>

00003680 <__udivmodhi4_loop>:
    3680:	aa 1f       	adc	r26, r26
    3682:	bb 1f       	adc	r27, r27
    3684:	a6 17       	cp	r26, r22
    3686:	b7 07       	cpc	r27, r23
    3688:	10 f0       	brcs	.+4      	; 0x368e <__udivmodhi4_ep>
    368a:	a6 1b       	sub	r26, r22
    368c:	b7 0b       	sbc	r27, r23

0000368e <__udivmodhi4_ep>:
    368e:	88 1f       	adc	r24, r24
    3690:	99 1f       	adc	r25, r25
    3692:	5a 95       	dec	r21
    3694:	a9 f7       	brne	.-22     	; 0x3680 <__udivmodhi4_loop>
    3696:	80 95       	com	r24
    3698:	90 95       	com	r25
    369a:	bc 01       	movw	r22, r24
    369c:	cd 01       	movw	r24, r26
    369e:	08 95       	ret

000036a0 <__prologue_saves__>:
    36a0:	2f 92       	push	r2
    36a2:	3f 92       	push	r3
    36a4:	4f 92       	push	r4
    36a6:	5f 92       	push	r5
    36a8:	6f 92       	push	r6
    36aa:	7f 92       	push	r7
    36ac:	8f 92       	push	r8
    36ae:	9f 92       	push	r9
    36b0:	af 92       	push	r10
    36b2:	bf 92       	push	r11
    36b4:	cf 92       	push	r12
    36b6:	df 92       	push	r13
    36b8:	ef 92       	push	r14
    36ba:	ff 92       	push	r15
    36bc:	0f 93       	push	r16
    36be:	1f 93       	push	r17
    36c0:	cf 93       	push	r28
    36c2:	df 93       	push	r29
    36c4:	cd b7       	in	r28, 0x3d	; 61
    36c6:	de b7       	in	r29, 0x3e	; 62
    36c8:	ca 1b       	sub	r28, r26
    36ca:	db 0b       	sbc	r29, r27
    36cc:	0f b6       	in	r0, 0x3f	; 63
    36ce:	f8 94       	cli
    36d0:	de bf       	out	0x3e, r29	; 62
    36d2:	0f be       	out	0x3f, r0	; 63
    36d4:	cd bf       	out	0x3d, r28	; 61
    36d6:	09 94       	ijmp

000036d8 <__epilogue_restores__>:
    36d8:	2a 88       	ldd	r2, Y+18	; 0x12
    36da:	39 88       	ldd	r3, Y+17	; 0x11
    36dc:	48 88       	ldd	r4, Y+16	; 0x10
    36de:	5f 84       	ldd	r5, Y+15	; 0x0f
    36e0:	6e 84       	ldd	r6, Y+14	; 0x0e
    36e2:	7d 84       	ldd	r7, Y+13	; 0x0d
    36e4:	8c 84       	ldd	r8, Y+12	; 0x0c
    36e6:	9b 84       	ldd	r9, Y+11	; 0x0b
    36e8:	aa 84       	ldd	r10, Y+10	; 0x0a
    36ea:	b9 84       	ldd	r11, Y+9	; 0x09
    36ec:	c8 84       	ldd	r12, Y+8	; 0x08
    36ee:	df 80       	ldd	r13, Y+7	; 0x07
    36f0:	ee 80       	ldd	r14, Y+6	; 0x06
    36f2:	fd 80       	ldd	r15, Y+5	; 0x05
    36f4:	0c 81       	ldd	r16, Y+4	; 0x04
    36f6:	1b 81       	ldd	r17, Y+3	; 0x03
    36f8:	aa 81       	ldd	r26, Y+2	; 0x02
    36fa:	b9 81       	ldd	r27, Y+1	; 0x01
    36fc:	ce 0f       	add	r28, r30
    36fe:	d1 1d       	adc	r29, r1
    3700:	0f b6       	in	r0, 0x3f	; 63
    3702:	f8 94       	cli
    3704:	de bf       	out	0x3e, r29	; 62
    3706:	0f be       	out	0x3f, r0	; 63
    3708:	cd bf       	out	0x3d, r28	; 61
    370a:	ed 01       	movw	r28, r26
    370c:	08 95       	ret

0000370e <strcmp>:
    370e:	fb 01       	movw	r30, r22
    3710:	dc 01       	movw	r26, r24
    3712:	8d 91       	ld	r24, X+
    3714:	01 90       	ld	r0, Z+
    3716:	80 19       	sub	r24, r0
    3718:	01 10       	cpse	r0, r1
    371a:	d9 f3       	breq	.-10     	; 0x3712 <strcmp+0x4>
    371c:	99 0b       	sbc	r25, r25
    371e:	08 95       	ret

00003720 <strcpy>:
    3720:	fb 01       	movw	r30, r22
    3722:	dc 01       	movw	r26, r24
    3724:	01 90       	ld	r0, Z+
    3726:	0d 92       	st	X+, r0
    3728:	00 20       	and	r0, r0
    372a:	e1 f7       	brne	.-8      	; 0x3724 <strcpy+0x4>
    372c:	08 95       	ret

0000372e <_exit>:
    372e:	f8 94       	cli

00003730 <__stop_program>:
    3730:	ff cf       	rjmp	.-2      	; 0x3730 <__stop_program>
